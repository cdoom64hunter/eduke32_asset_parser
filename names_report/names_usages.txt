Usages for: SECTOREFFECTOR
source/duke3d/src/actors.cpp:6556:                        if ((sprite[j].picnum != SECTOREFFECTOR || (sprite[j].lotag == SE_49_POINT_LIGHT || sprite[j].lotag == SE_50_SPOT_LIGHT))
source/duke3d/src/actors.cpp:6636:                            if (sprite[j].picnum != SECTOREFFECTOR && sprite[j].picnum != LOCATORS)
source/duke3d/src/actors.cpp:6683:                    if ((sprite[j].picnum != SECTOREFFECTOR || sprite[j].lotag==SE_49_POINT_LIGHT || sprite[j].lotag==SE_50_SPOT_LIGHT)
source/duke3d/src/actors.cpp:6764:                    if (sprite[sectSprite].picnum != SECTOREFFECTOR)
source/duke3d/src/actors.cpp:8585:        (pSprite->picnum != SECTOREFFECTOR && ((pSprite->cstat & 32768) || pSprite->yrepeat < 4)) ||
source/duke3d/src/network.cpp:914:    bool isSyncedSE =   (DYNAMICTILEMAP(netActor->picnum) == SECTOREFFECTOR) &&
source/duke3d/src/game.cpp:444:        if (sprite[k].picnum != SECTOREFFECTOR && sprite[k].z >= sp->z)
source/duke3d/src/game.cpp:1445:        if (s.picnum == SECTOREFFECTOR && s.lotag == 50)
source/duke3d/src/game.cpp:2847:                    if (sprite[spriteNum].picnum == SECTOREFFECTOR && (sprite[spriteNum].lotag == 40 || sprite[spriteNum].lotag == 41) &&
source/duke3d/src/game.cpp:2887:                        if (sprite[spriteNum].statnum < MAXSTATUS && sprite[spriteNum].picnum == SECTOREFFECTOR &&
source/duke3d/src/game.cpp:3246:                            if (sprite[spriteNum].picnum == SECTOREFFECTOR &&
source/duke3d/src/game.cpp:3333:                                if (sprite[foundEffector].picnum == SECTOREFFECTOR && sprite[foundEffector].lotag == pSprite->lotag)
source/duke3d/src/sector.cpp:700:            if (PN(i)==SECTOREFFECTOR && SLT(i) == SE_17_WARP_ELEVATOR)
source/duke3d/src/sector.cpp:1160:                if (spriteNum >= 0 && sprite[spriteNum].picnum == SECTOREFFECTOR && sprite[spriteNum].lotag == SE_30_TWO_WAY_TRAIN)
source/duke3d/src/sector.cpp:1647:                    int const i = A_InsertSprite(sectNum, vPos.x, vPos.y, vPos.z, SECTOREFFECTOR, 0, 0, 0,
source/duke3d/src/sector.cpp:1904:                    if (PN(i) == SECTOREFFECTOR && SLT(i) == SE_12_LIGHT_SWITCH)
source/duke3d/src/astub.cpp:342:    " F6 = AUTOMATIC SECTOREFFECTOR HELP",
source/duke3d/src/astub.cpp:466:        case SECTOREFFECTOR:
source/duke3d/src/astub.cpp:871:    if (!(onnames>=3 && onnames<=8) || (onnames==7 && sprite[spritenum].picnum!=SECTOREFFECTOR))
source/duke3d/src/astub.cpp:907:    if (sprite[spritenum].picnum==SECTOREFFECTOR)
source/duke3d/src/astub.cpp:2227:            if (sprite[j].picnum==SECTOREFFECTOR &&
source/duke3d/src/astub.cpp:4412:                    if (sprite[searchwall].picnum==SECTOREFFECTOR)
source/duke3d/src/astub.cpp:4697:        message("Automatic SECTOREFFECTOR help %s", autospritehelp?"enabled":"disabled");
source/duke3d/src/astub.cpp:4707:        if (AIMING_AT_SPRITE && sprite[searchwall].picnum==SECTOREFFECTOR)
source/duke3d/src/astub.cpp:5696:            if (sprite[searchwall].picnum == SECTOREFFECTOR)
source/duke3d/src/astub.cpp:7215:                if (sprite[i].picnum==SECTOREFFECTOR)
source/duke3d/src/astub.cpp:7374:                sprite[i].lotag = _getnumber16(buffer, sprite[i].lotag, BTAG_MAX, 0+j, sprite[i].picnum==SECTOREFFECTOR ?
source/duke3d/src/astub.cpp:10081:                if (sprite[i].picnum == SECTOREFFECTOR &&
source/duke3d/src/astub.cpp:10130:                else if (sprite[i].picnum == SECTOREFFECTOR && (sprite[i].lotag == 49 || sprite[i].lotag == 50))
source/duke3d/src/astub.cpp:10798:            if (sprite[i].statnum==MAXSTATUS || sprite[i].picnum != SECTOREFFECTOR)
source/duke3d/src/premap.cpp:1260:        if (sprite[i].statnum < MAXSTATUS && (PN(i) != SECTOREFFECTOR || SLT(i) != SE_14_SUBWAY_CAR))
source/duke3d/src/premap.cpp:1266:        if (sprite[i].statnum < MAXSTATUS && PN(i) == SECTOREFFECTOR && SLT(i) == SE_14_SUBWAY_CAR)
Usages for: ACTIVATOR
source/duke3d/src/game.cpp:2867:                    if (sprite[j].picnum == ACTIVATOR || sprite[j].picnum == ACTIVATORLOCKED)
source/duke3d/src/gameexec.cpp:5133:                                    if (sprite[j].picnum == ACTIVATOR)
source/duke3d/src/sector.cpp:1509:        if (PN(i) == ACTIVATOR)
source/duke3d/src/sector.cpp:3539:                if (PN(spriteNum) == ACTIVATOR || PN(spriteNum) == MASTERSWITCH)
source/duke3d/src/sector.cpp:3551:                    if (PN(spriteNum) == ACTIVATOR || PN(spriteNum) == MASTERSWITCH)
source/duke3d/src/astub.cpp:476:        case ACTIVATOR: case TOUCHPLATE: case ACTIVATORLOCKED: case MASTERSWITCH:
Usages for: TOUCHPLATE
source/duke3d/src/actors.cpp:2550:                            if (j != spriteNum && sprite[j].picnum == TOUCHPLATE && sprite[j].lotag == pSprite->lotag)
source/duke3d/src/astub.cpp:476:        case ACTIVATOR: case TOUCHPLATE: case ACTIVATORLOCKED: case MASTERSWITCH:
Usages for: ACTIVATORLOCKED
source/duke3d/src/game.cpp:2804:            if (pSprite->picnum == ACTIVATORLOCKED)
source/duke3d/src/game.cpp:2867:                    if (sprite[j].picnum == ACTIVATOR || sprite[j].picnum == ACTIVATORLOCKED)
source/duke3d/src/sector.cpp:1085:            if (sprite[spriteNum].picnum == ACTIVATORLOCKED)
source/duke3d/src/astub.cpp:476:        case ACTIVATOR: case TOUCHPLATE: case ACTIVATORLOCKED: case MASTERSWITCH:
Usages for: MUSICANDSFX
source/duke3d/src/actors.cpp:744:    if (sprite[spriteNum].picnum == MUSICANDSFX && actor[spriteNum].t_data[0] == 1)
source/duke3d/src/sounds.h:101:    return (sprite[spriteNum].picnum == MUSICANDSFX && sprite[spriteNum].lotag < 999);
source/duke3d/src/savegame.cpp:2371:            if (sprite[i].picnum == MUSICANDSFX)
source/duke3d/src/sounds.cpp:453:        // MUSICANDSFX uses t_data[0] to control restarting the sound
source/duke3d/src/sounds.cpp:618:    if (!FURY && sectNum > -1 && sndist && PN(spriteNum) != MUSICANDSFX
source/duke3d/src/sounds.cpp:746:        if (sndist > 32767 && PN(spriteNum) != MUSICANDSFX && (snd.m & (SF_LOOP|SF_MSFX)) == 0)
source/duke3d/src/sounds.cpp:754:    if (snd.num > 0 && PN(spriteNum) != MUSICANDSFX)
source/duke3d/src/sounds_mapster32.cpp:49:#define MUSICANDSFX 5
source/duke3d/src/sounds_mapster32.cpp:187:    if (i >= 0 && (g_sounds[num].m & SF_GLOBAL) == 0 && PN(i) == MUSICANDSFX && SLT(i) < 999 && (sector[SECT(i)].lotag&0xff) < 9)
source/duke3d/src/sounds_mapster32.cpp:204:    if (cs > -1 && sndist && PN(i) != MUSICANDSFX && !cansee(cx,cy,cz-(24<<8),cs,SX(i),SY(i),SZ(i)-(24<<8),SECT(i)))
source/duke3d/src/sounds_mapster32.cpp:221:    if (sndist > 31444 && PN(i) != MUSICANDSFX)
source/duke3d/src/sounds_mapster32.cpp:226:    if (g_sounds[num].num > 0 && PN(i) != MUSICANDSFX)
source/duke3d/src/sounds_mapster32.cpp:405:            if (i >= 0 && (g_sounds[j].m & SF_GLOBAL) == 0 && PN(i) == MUSICANDSFX && SLT(i) < 999 && (sector[SECT(i)].lotag&0xff) < 9)
source/duke3d/src/sounds_mapster32.cpp:411:            if (cs > -1 && sndist && PN(i) != MUSICANDSFX && !cansee(cx,cy,cz-(24<<8),cs,sx,sy,sz-(24<<8),SECT(i)))
source/duke3d/src/sounds_mapster32.cpp:414:            if (PN(i) == MUSICANDSFX && SLT(i) < 999)
source/duke3d/src/sounds_mapster32.cpp:426:            if (sndist > 31444 && PN(i) != MUSICANDSFX)
source/duke3d/src/sounds_mapster32.cpp:458:                if (sprite[i].picnum == MUSICANDSFX && sector[sprite[i].sectnum].lotag < 3 && sprite[i].lotag < 999)
source/duke3d/src/network.cpp:900:    bool isSoundActor = (DYNAMICTILEMAP(netActor->picnum) == MUSICANDSFX);
source/duke3d/src/sector.cpp:39:        if (PN(spriteNum) == MUSICANDSFX && (unsigned)snd < 1000)  // XXX: in other places, 999
source/duke3d/src/sector.cpp:50:// this function activates a sector's MUSICANDSFX sprite
source/duke3d/src/astub.cpp:2018:        if (s->picnum != MUSICANDSFX)
source/duke3d/src/astub.cpp:2043:                                if (s->picnum == MUSICANDSFX && j != i && sprite[j].lotag < 999 &&
source/duke3d/src/astub.cpp:5701:            else if (sprite[searchwall].picnum == MUSICANDSFX)
source/duke3d/src/astub.cpp:9159:    OSD_RegisterFunction("show_ambiencesounds", "show_ambiencesounds {0, 1 or 2}: sets display of MUSICANDSFX circles in 2D mode", osdcmd_vars_pk);
source/duke3d/src/astub.cpp:10379:                if (sprite[i].picnum != MUSICANDSFX /*|| zoom < 256*/ || sprite[i].hitag < 1000)
Usages for: LOCATORS
source/duke3d/src/actors.cpp:6557:                            && sprite[j].picnum != LOCATORS)
source/duke3d/src/actors.cpp:6636:                            if (sprite[j].picnum != SECTOREFFECTOR && sprite[j].picnum != LOCATORS)
source/duke3d/src/actors.cpp:6684:                            && sprite[j].picnum != LOCATORS)
source/duke3d/src/game.cpp:1448:        if (s.picnum == LOCATORS && s.owner != -1)
Usages for: CYCLER
Usages for: MASTERSWITCH
source/duke3d/src/actors.cpp:2422:        else if (pSprite->picnum == MASTERSWITCH)
source/duke3d/src/actors.cpp:5393:                            if (sprite[j].picnum == MASTERSWITCH && sprite[j].hitag == pSprite->hitag && sprite[j].yvel == 0)
source/duke3d/src/game.cpp:2791:            if (pSprite->picnum == MASTERSWITCH)
source/duke3d/src/sector.cpp:1141:        if (PN(i) == MASTERSWITCH && SLT(i) == lotag && SP(i) == 0)
source/duke3d/src/sector.cpp:3539:                if (PN(spriteNum) == ACTIVATOR || PN(spriteNum) == MASTERSWITCH)
source/duke3d/src/sector.cpp:3551:                    if (PN(spriteNum) == ACTIVATOR || PN(spriteNum) == MASTERSWITCH)
source/duke3d/src/astub.cpp:476:        case ACTIVATOR: case TOUCHPLATE: case ACTIVATORLOCKED: case MASTERSWITCH:
Usages for: RESPAWN
source/duke3d/src/game.cpp:2041:                if (spriteNum >= 0 && sprite[spriteNum].picnum == RESPAWN)
source/duke3d/src/game.cpp:3519:                if (sprite[spriteNum].picnum == RESPAWN)
source/duke3d/src/sector.cpp:1043:        if (pSprite->lotag == lotag && pSprite->picnum == RESPAWN)
source/duke3d/src/astub.cpp:477:        case RESPAWN:  // ---
source/duke3d/src/astub.cpp:995:        if (sprite[i].picnum == RESPAWN)
source/duke3d/src/astub.cpp:1160:            if (runi==1 && sprite[i].picnum!=RESPAWN)
Usages for: GPSPEED
Usages for: FOF
source/duke3d/src/astub.cpp:2092:    if (fofsizex != -1) tilesizx[FOF] = fofsizex;
source/duke3d/src/astub.cpp:2093:    if (fofsizey != -1) tilesizy[FOF] = fofsizey;
source/duke3d/src/astub.cpp:2108:    // floors and ceilings. So the FOF textures is no longer required
source/duke3d/src/astub.cpp:2109:    //	if (!(gotpic[FOF>>3]&(1<<(FOF&7))))
source/duke3d/src/astub.cpp:2111:    //	gotpic[FOF>>3] &= ~(1<<(FOF&7));
Usages for: ARROW
source/duke3d/src/sbar.cpp:462:                rotatesprite_win(x-(2<<16), y+(19<<16), 65536L, 1024, ARROW, -32, 0, 2+16);
Usages for: FIRSTGUNSPRITE
source/duke3d/src/astub.cpp:1056:    PRSTAT("Pistol   =", FIRSTGUNSPRITE);
Usages for: CHAINGUNSPRITE
source/duke3d/src/astub.cpp:1058:    PRSTAT("Chaingun =", CHAINGUNSPRITE);
Usages for: RPGSPRITE
source/duke3d/src/astub.cpp:1059:    PRSTAT("RPG      =", RPGSPRITE);
Usages for: FREEZESPRITE
source/duke3d/src/astub.cpp:1064:    PRSTAT("Freezeray=", FREEZESPRITE);
Usages for: SHRINKERSPRITE
source/duke3d/src/astub.cpp:1061:    PRSTAT("Shrinker =", SHRINKERSPRITE);
Usages for: HEAVYHBOMB
source/duke3d/src/actors.cpp:5195:            if (pSprite->picnum == HEAVYHBOMB && pData[6] == 1)
source/duke3d/src/actors.cpp:5257:            else if (pSprite->picnum == HEAVYHBOMB && playerDist < 788 && pData[0] > 7 && pSprite->xvel == 0)
source/duke3d/src/game.cpp:4055:                    newTspr->xrepeat = (newTspr->picnum == HEAVYHBOMB) ? 10 : 16;
source/duke3d/src/gamevars.cpp:1251:    case HEAVYHBOMB__STATIC: return HEAVYHBOMB;
source/duke3d/src/sector.cpp:2575:            if (sprite[spriteNum].picnum == HEAVYHBOMB && sprite[spriteNum].owner == pPlayer->i)
source/duke3d/src/astub.cpp:1060:    PRSTAT("Pipe Bomb=", HEAVYHBOMB);
Usages for: TRIPBOMBSPRITE
source/duke3d/src/astub.cpp:1063:    PRSTAT("Trip mine=", TRIPBOMBSPRITE);
source/duke3d/src/sbar.cpp:620:                    TRIPBOMBSPRITE, FREEZEAMMO+1, HBOMBAMMO, GROWAMMO, FLAMETHROWERAMMO+1,
Usages for: SHOTGUNSPRITE
source/duke3d/src/astub.cpp:1057:    PRSTAT("Shotgun  =", SHOTGUNSPRITE);
Usages for: DEVISTATORSPRITE
source/duke3d/src/astub.cpp:1062:    PRSTAT("Devastatr=", DEVISTATORSPRITE);
Usages for: HEALTHBOX
source/duke3d/src/sbar.cpp:734:            rotatesprite_fs(sbarx(5), yofssh+sbary(200-28), sb16, 0, HEALTHBOX, 0, 21, orient);
Usages for: AMMOBOX
source/duke3d/src/sbar.cpp:744:            rotatesprite_fs(sbarx(37), yofssh+sbary(200-28), sb16, 0, AMMOBOX, 0, 21, orient);
Usages for: GROWSPRITEICON
source/duke3d/src/player.cpp:2320:                                         hudweap.cur == GROW_WEAPON ? GROWSPRITEICON : WeaponPickupSprites[hudweap.cur], 0,
source/duke3d/src/game.cpp:4053:                    newTspr->picnum  = (currentWeapon == GROW_WEAPON ? GROWSPRITEICON : WeaponPickupSprites[currentWeapon]);
Usages for: INVENTORYBOX
source/duke3d/src/screens.cpp:1318:                i -= sbarsc(ud.althud ? (tilesiz[BIGALPHANUM].y+8)<<16 : tilesiz[INVENTORYBOX].y<<16);
source/duke3d/src/sbar.cpp:736:                rotatesprite_fs(sbarx(69), yofssh+sbary(200-30), sb16, 0, INVENTORYBOX, 0, 21, orient);
Usages for: FREEZEAMMO
source/duke3d/src/astub.cpp:1078:    PRSTAT("Freezeray=", FREEZEAMMO);
source/duke3d/src/sbar.cpp:620:                    TRIPBOMBSPRITE, FREEZEAMMO+1, HBOMBAMMO, GROWAMMO, FLAMETHROWERAMMO+1,
Usages for: AMMO
source/duke3d/src/game.cpp:2256:                if (pSprite->picnum == AMMO)
source/duke3d/src/astub.cpp:1070:    PRSTAT("Pistol   =", AMMO);
source/duke3d/src/sbar.cpp:618:                int32_t asprites[MAX_WEAPONS] = { -1, AMMO, SHOTGUNAMMO, BATTERYAMMO,
Usages for: BATTERYAMMO
source/duke3d/src/astub.cpp:1072:    PRSTAT("Chain    =", BATTERYAMMO);
source/duke3d/src/sbar.cpp:618:                int32_t asprites[MAX_WEAPONS] = { -1, AMMO, SHOTGUNAMMO, BATTERYAMMO,
Usages for: DEVISTATORAMMO
source/duke3d/src/astub.cpp:1076:    PRSTAT("Devastatr=", DEVISTATORAMMO);
source/duke3d/src/sbar.cpp:619:                    RPGAMMO, HBOMBAMMO, CRYSTALAMMO, DEVISTATORAMMO,
Usages for: RPGAMMO
source/duke3d/src/astub.cpp:1073:    PRSTAT("RPG Box  =", RPGAMMO);
source/duke3d/src/sbar.cpp:619:                    RPGAMMO, HBOMBAMMO, CRYSTALAMMO, DEVISTATORAMMO,
Usages for: GROWAMMO
source/duke3d/src/astub.cpp:1077:    PRSTAT("Expander =", GROWAMMO);
source/duke3d/src/sbar.cpp:620:                    TRIPBOMBSPRITE, FREEZEAMMO+1, HBOMBAMMO, GROWAMMO, FLAMETHROWERAMMO+1,
Usages for: CRYSTALAMMO
source/duke3d/src/astub.cpp:1075:    PRSTAT("Shrinker =", CRYSTALAMMO);
source/duke3d/src/sbar.cpp:619:                    RPGAMMO, HBOMBAMMO, CRYSTALAMMO, DEVISTATORAMMO,
Usages for: HBOMBAMMO
source/duke3d/src/astub.cpp:1074:    PRSTAT("Pipe Bomb=", HBOMBAMMO);
source/duke3d/src/sbar.cpp:619:                    RPGAMMO, HBOMBAMMO, CRYSTALAMMO, DEVISTATORAMMO,
source/duke3d/src/sbar.cpp:620:                    TRIPBOMBSPRITE, FREEZEAMMO+1, HBOMBAMMO, GROWAMMO, FLAMETHROWERAMMO+1,
Usages for: AMMOLOTS
Usages for: SHOTGUNAMMO
source/duke3d/src/astub.cpp:1071:    PRSTAT("Shot     =", SHOTGUNAMMO);
source/duke3d/src/sbar.cpp:618:                int32_t asprites[MAX_WEAPONS] = { -1, AMMO, SHOTGUNAMMO, BATTERYAMMO,
Usages for: COLA
source/duke3d/src/astub.cpp:1034:    PRSTAT("10%health=", COLA);
source/duke3d/src/sbar.cpp:627:            rotatesprite_althud(2, hudoffset-21, sb15h, 0, COLA, 0, 0, 10+16+256);
Usages for: SIXPAK
source/duke3d/src/astub.cpp:1035:    PRSTAT("30%health=", SIXPAK);
source/duke3d/src/sbar.cpp:625:            //            rotatesprite_fs(sbarx(5+1),sbary(200-25+1),sb15h,0,SIXPAK,0,4,10+16+1+32);
source/duke3d/src/sbar.cpp:626:            //            rotatesprite_fs(sbarx(5),sbary(200-25),sb15h,0,SIXPAK,0,0,10+16);
Usages for: FIRSTAID
source/duke3d/src/astub.cpp:1036:    PRSTAT("Med-Kit  =", FIRSTAID);
Usages for: SHIELD
source/duke3d/src/astub.cpp:1038:    PRSTAT("Shields  =", SHIELD);
source/duke3d/src/sbar.cpp:639:            rotatesprite_althud(62, hudoffset-25, sb15h, 0, SHIELD, 0, 0, 10+16+256);
Usages for: STEROIDS
source/duke3d/src/astub.cpp:1044:    PRSTAT("Steroids =", STEROIDS);
Usages for: AIRTANK
source/duke3d/src/astub.cpp:1045:    PRSTAT("Airtank  =", AIRTANK);
Usages for: JETPACK
source/duke3d/src/astub.cpp:1046:    PRSTAT("Jetpack  =", JETPACK);
Usages for: HEATSENSOR
source/duke3d/src/astub.cpp:1047:    PRSTAT("Goggles  =", HEATSENSOR);
Usages for: ACCESSCARD
source/duke3d/src/game.cpp:2248:            if ((g_netServer || ud.multimode > 1) && !GTFLAGS(GAMETYPE_ACCESSCARDSPRITES) && pSprite->picnum == ACCESSCARD)
source/duke3d/src/sbar.cpp:706:            if (p->got_access&1) rotatesprite_althudr(39, hudoffset-43, sb15, 0, ACCESSCARD, 0, 0, 10+16+512);
source/duke3d/src/sbar.cpp:707:            if (p->got_access&4) rotatesprite_althudr(34, hudoffset-41, sb15, 0, ACCESSCARD, 0, 23, 10+16+512);
source/duke3d/src/sbar.cpp:708:            if (p->got_access&2) rotatesprite_althudr(29, hudoffset-39, sb15, 0, ACCESSCARD, 0, 21, 10+16+512);
Usages for: BOOTS
source/duke3d/src/astub.cpp:1048:    PRSTAT("Boots    =", BOOTS);
Usages for: MIRRORBROKE
source/duke3d/src/sector.cpp:1553:            pWall->overpicnum = MIRRORBROKE;
source/duke3d/src/sector.cpp:1578:                    pWall->overpicnum = MIRRORBROKE;
Usages for: CLOUDYOCEAN
source/duke3d/src/game.cpp:6101:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
source/duke3d/src/common.cpp:165:    // CLOUDYOCEAN
source/duke3d/src/astub.cpp:10016:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
Usages for: CLOUDYSKIES
source/duke3d/src/premap.cpp:1317:            if (s.ceilingpicnum == CLOUDYSKIES)
source/duke3d/src/premap.cpp:1337:        OSD_Printf(OSDTEXT_RED "Map warning: have %d unhandled CLOUDYSKIES ceilings.\n", missedCloudSectors);
Usages for: MOONSKY1
source/duke3d/src/actors.h:472:            (sector[sectnum].ceilingpicnum==MOONSKY1 || sector[sectnum].ceilingpicnum==BIGORBIT1));
source/duke3d/src/actors.h:478:            (sector[sectnum].floorpicnum==MOONSKY1 || sector[sectnum].floorpicnum==BIGORBIT1));
source/duke3d/src/game.cpp:6101:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
source/duke3d/src/common.cpp:171:    // MOONSKY1
source/duke3d/src/astub.cpp:10016:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
Usages for: MOONSKY2
Usages for: MOONSKY3
Usages for: MOONSKY4
Usages for: BIGORBIT1
source/duke3d/src/actors.h:472:            (sector[sectnum].ceilingpicnum==MOONSKY1 || sector[sectnum].ceilingpicnum==BIGORBIT1));
source/duke3d/src/actors.h:478:            (sector[sectnum].floorpicnum==MOONSKY1 || sector[sectnum].floorpicnum==BIGORBIT1));
source/duke3d/src/game.cpp:6101:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
source/duke3d/src/common.cpp:181:    // BIGORBIT1   // orbit
source/duke3d/src/astub.cpp:10016:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
Usages for: BIGORBIT2
Usages for: BIGORBIT3
Usages for: BIGORBIT4
Usages for: BIGORBIT5
Usages for: LA
source/duke3d/src/game.cpp:6101:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
source/duke3d/src/common.cpp:191:    // LA // la city
source/duke3d/src/astub.cpp:10016:    G_InitMultiPsky(CLOUDYOCEAN, MOONSKY1, BIGORBIT1, LA);
Usages for: REDSKY1
Usages for: REDSKY2
Usages for: ATOMICHEALTH
source/duke3d/src/game.cpp:2243:            if (pSprite->picnum == ATOMICHEALTH)
source/duke3d/src/gameexec.cpp:3456:                    if (!FURY && vm.pSprite->picnum == ATOMICHEALTH)
source/duke3d/src/astub.cpp:1037:    PRSTAT("Atom     =", ATOMICHEALTH);
Usages for: TECHLIGHT2
source/duke3d/src/sector.cpp:1786:            if (pWall->picnum == TECHLIGHT2)
source/duke3d/src/astub.cpp:505:        case TECHLIGHT2: case TECHLIGHT4: case WALLLIGHT4:
Usages for: TECHLIGHTBUST2
source/duke3d/src/sector.cpp:1787:                pWall->picnum = TECHLIGHTBUST2;
source/duke3d/src/sector.cpp:1889:        case TECHLIGHT2__STATIC: *pPicnum = TECHLIGHTBUST2; goto GLASSBREAK_CODE;
Usages for: TECHLIGHT4
source/duke3d/src/sector.cpp:1789:            if (pWall->picnum == TECHLIGHT4)
source/duke3d/src/astub.cpp:505:        case TECHLIGHT2: case TECHLIGHT4: case WALLLIGHT4:
Usages for: TECHLIGHTBUST4
source/duke3d/src/sector.cpp:1790:                pWall->picnum = TECHLIGHTBUST4;
source/duke3d/src/sector.cpp:1890:        case TECHLIGHT4__STATIC: *pPicnum = TECHLIGHTBUST4;
Usages for: WALLLIGHT4
source/duke3d/src/sector.cpp:1783:            if (pWall->picnum == WALLLIGHT4)
source/duke3d/src/astub.cpp:505:        case TECHLIGHT2: case TECHLIGHT4: case WALLLIGHT4:
Usages for: WALLLIGHTBUST4
source/duke3d/src/sector.cpp:1784:                pWall->picnum = WALLLIGHTBUST4;
source/duke3d/src/sector.cpp:1888:        case WALLLIGHT4__STATIC: *pPicnum = WALLLIGHTBUST4; goto GLASSBREAK_CODE;
Usages for: ACCESSSWITCH
source/duke3d/src/actors.cpp:8861:    // ACCESSSWITCH and ACCESSSWITCH2 are only active in one state so deal with
source/duke3d/src/actors.cpp:8864:    if ((PN(spriteNum) >= MULTISWITCH && PN(spriteNum) <= MULTISWITCH + 3) || (PN(spriteNum) == ACCESSSWITCH || PN(spriteNum) == ACCESSSWITCH2))
source/duke3d/src/player.cpp:830:    if (hitData->sprite >= 0 && sprite[hitData->sprite].picnum != ACCESSSWITCH && sprite[hitData->sprite].picnum != ACCESSSWITCH2)
source/duke3d/src/player.cpp:840:        if (wall[hitData->wall].picnum != ACCESSSWITCH && wall[hitData->wall].picnum != ACCESSSWITCH2)
source/duke3d/src/player.cpp:1228:            else if (hitData.wall >= 0 && wall[hitData.wall].picnum != ACCESSSWITCH && wall[hitData.wall].picnum != ACCESSSWITCH2)
source/duke3d/src/game.cpp:1474:                if (s.pal && s.picnum != ACCESSSWITCH && s.picnum != ACCESSSWITCH2)
source/duke3d/src/game.cpp:1487:                if (s.pal && s.picnum != ACCESSSWITCH && s.picnum != ACCESSSWITCH2)
source/duke3d/src/astub.cpp:420:         ACCESSSWITCH: \
Usages for: SLOTDOOR
source/duke3d/src/sector.cpp:1218:        switchPic == HANDSWITCH + 1         || switchPic == SLOTDOOR + 1     || switchPic == SPACEDOORSWITCH + 1 ||
source/duke3d/src/astub.cpp:436:    case SLOTDOOR: \
Usages for: LIGHTSWITCH
source/duke3d/src/sector.cpp:1219:        switchPic == SPACELIGHTSWITCH + 1   || switchPic == LIGHTSWITCH + 1  || switchPic == LIGHTSWITCH2 + 1 ||
source/duke3d/src/astub.cpp:431:    case LIGHTSWITCH: \
Usages for: SPACEDOORSWITCH
source/duke3d/src/sector.cpp:1218:        switchPic == HANDSWITCH + 1         || switchPic == SLOTDOOR + 1     || switchPic == SPACEDOORSWITCH + 1 ||
source/duke3d/src/astub.cpp:437:    case SPACEDOORSWITCH: \
Usages for: SPACELIGHTSWITCH
source/duke3d/src/sector.cpp:1219:        switchPic == SPACELIGHTSWITCH + 1   || switchPic == LIGHTSWITCH + 1  || switchPic == LIGHTSWITCH2 + 1 ||
source/duke3d/src/astub.cpp:438:    case SPACELIGHTSWITCH
Usages for: FRANKENSTINESWITCH
source/duke3d/src/sector.cpp:1220:        switchPic == FRANKENSTINESWITCH + 1 || switchPic == POWERSWITCH1 + 1 || switchPic == POWERSWITCH2 + 1 ||
source/duke3d/src/astub.cpp:428:    case FRANKENSTINESWITCH: \
Usages for: NUKEBUTTON
source/duke3d/src/actors.cpp:5481:        if (pSprite->picnum > NUKEBUTTON && pSprite->picnum <= NUKEBUTTON+3)
source/duke3d/src/actors.cpp:5482:            switchPic = NUKEBUTTON;
source/duke3d/src/actors.cpp:5589:                    //        case NUKEBUTTON+1:
source/duke3d/src/actors.cpp:5590:                    //        case NUKEBUTTON+2:
source/duke3d/src/actors.cpp:5591:                    //        case NUKEBUTTON+3:
source/duke3d/src/actors.cpp:5597:                            pSprite->picnum = NUKEBUTTON + 1;
source/duke3d/src/actors.cpp:5600:                            pSprite->picnum = NUKEBUTTON + 2;
source/duke3d/src/actors.cpp:5604:                            pSprite->picnum = NUKEBUTTON + 3;
source/duke3d/src/player.cpp:4022:                else if (actor[pPlayer->i].picnum == NUKEBUTTON)
source/duke3d/src/player.cpp:4606:    // the fist punching NUKEBUTTON
source/duke3d/src/sector.cpp:3437:                            // NUKEBUTTON frags the player
source/duke3d/src/sector.cpp:3438:                            actor[pPlayer->i].picnum = NUKEBUTTON;
Usages for: MULTISWITCH
source/duke3d/src/actors.cpp:8860:    // MULTISWITCH has 4 states so deal with it separately,
source/duke3d/src/actors.cpp:8864:    if ((PN(spriteNum) >= MULTISWITCH && PN(spriteNum) <= MULTISWITCH + 3) || (PN(spriteNum) == ACCESSSWITCH || PN(spriteNum) == ACCESSSWITCH2))
source/duke3d/src/sector.cpp:1181:// the MULTISWITCH. 13 cases.
source/duke3d/src/sector.cpp:1213:    if (switchPic > MULTISWITCH && switchPic <= MULTISWITCH+3)
source/duke3d/src/sector.cpp:1214:        return MULTISWITCH;
source/duke3d/src/sector.cpp:1326:            if (spritePic >= MULTISWITCH && spritePic <= MULTISWITCH+3)
source/duke3d/src/sector.cpp:1329:                if (sprite[spriteNum].picnum > MULTISWITCH+3)
source/duke3d/src/sector.cpp:1330:                    sprite[spriteNum].picnum = MULTISWITCH;
source/duke3d/src/sector.cpp:1375:            if (wall[wallNum].picnum >= MULTISWITCH && wall[wallNum].picnum <= MULTISWITCH+3)
source/duke3d/src/sector.cpp:1378:                if (wall[wallNum].picnum > MULTISWITCH+3)
source/duke3d/src/sector.cpp:1379:                    wall[wallNum].picnum = MULTISWITCH;
source/duke3d/src/sector.cpp:1450:            if (nSwitchPicnum >= MULTISWITCH && nSwitchPicnum <= MULTISWITCH + 3)
source/duke3d/src/sector.cpp:1451:                lotag += nSwitchPicnum - MULTISWITCH;
source/duke3d/src/astub.cpp:424:// the MULTISWITCH. 13 cases.
source/duke3d/src/astub.cpp:478:        case MULTISWITCH:  // *
source/duke3d/src/astub.cpp:543:        if (picnum >= MULTISWITCH && picnum <= MULTISWITCH+3)
source/duke3d/src/astub.cpp:571:        if (sprite[i].picnum==MULTISWITCH)
source/duke3d/src/astub.cpp:573:            // MULTISWITCH needs special care
Usages for: DOORTILE5
source/duke3d/src/astub.cpp:524:        case DOORTILE5: case DOORTILE6: case DOORTILE1: case DOORTILE2: case DOORTILE3:
Usages for: DOORTILE6
source/duke3d/src/astub.cpp:524:        case DOORTILE5: case DOORTILE6: case DOORTILE1: case DOORTILE2: case DOORTILE3:
Usages for: DOORTILE1
source/duke3d/src/astub.cpp:524:        case DOORTILE5: case DOORTILE6: case DOORTILE1: case DOORTILE2: case DOORTILE3:
Usages for: DOORTILE2
source/duke3d/src/astub.cpp:524:        case DOORTILE5: case DOORTILE6: case DOORTILE1: case DOORTILE2: case DOORTILE3:
Usages for: DOORTILE3
source/duke3d/src/astub.cpp:524:        case DOORTILE5: case DOORTILE6: case DOORTILE1: case DOORTILE2: case DOORTILE3:
Usages for: DOORTILE4
source/duke3d/src/astub.cpp:525:        case DOORTILE4: case DOORTILE7: case DOORTILE8: case DOORTILE9: case DOORTILE10:
Usages for: DOORTILE7
source/duke3d/src/astub.cpp:525:        case DOORTILE4: case DOORTILE7: case DOORTILE8: case DOORTILE9: case DOORTILE10:
Usages for: DOORTILE8
source/duke3d/src/astub.cpp:525:        case DOORTILE4: case DOORTILE7: case DOORTILE8: case DOORTILE9: case DOORTILE10:
Usages for: DOORTILE9
source/duke3d/src/astub.cpp:525:        case DOORTILE4: case DOORTILE7: case DOORTILE8: case DOORTILE9: case DOORTILE10:
Usages for: DOORTILE10
source/duke3d/src/astub.cpp:525:        case DOORTILE4: case DOORTILE7: case DOORTILE8: case DOORTILE9: case DOORTILE10:
Usages for: DOORSHOCK
Usages for: DIPSWITCH
source/duke3d/src/player.cpp:337:    return tileNum == DIPSWITCH || tileNum == DIPSWITCH + 1 || tileNum == DIPSWITCH2 || tileNum == DIPSWITCH2 + 1 ||
source/duke3d/src/sector.cpp:1204:        if (switchPic == DIPSWITCH+i || switchPic == TECHSWITCH+i || switchPic == ALIENSWITCH+i)
source/duke3d/src/sector.cpp:1216:    return (switchPic == DIPSWITCH + 1      || switchPic == DIPSWITCH2 + 1   || switchPic == DIPSWITCH3 + 1 ||
source/duke3d/src/astub.cpp:414:         DIPSWITCH: \
Usages for: DIPSWITCH2
source/duke3d/src/player.cpp:337:    return tileNum == DIPSWITCH || tileNum == DIPSWITCH + 1 || tileNum == DIPSWITCH2 || tileNum == DIPSWITCH2 + 1 ||
source/duke3d/src/sector.cpp:1216:    return (switchPic == DIPSWITCH + 1      || switchPic == DIPSWITCH2 + 1   || switchPic == DIPSWITCH3 + 1 ||
source/duke3d/src/astub.cpp:426:         DIPSWITCH2: \
Usages for: TECHSWITCH
source/duke3d/src/sector.cpp:1204:        if (switchPic == DIPSWITCH+i || switchPic == TECHSWITCH+i || switchPic == ALIENSWITCH+i)
source/duke3d/src/sector.cpp:1217:        switchPic == TECHSWITCH + 1         || switchPic == ALIENSWITCH + 1  || switchPic == PULLSWITCH + 1 ||
source/duke3d/src/astub.cpp:415:    case TECHSWITCH: \
Usages for: DIPSWITCH3
source/duke3d/src/player.cpp:338:           tileNum == DIPSWITCH3 || tileNum == DIPSWITCH3 + 1 || tileNum == HANDSWITCH || tileNum == HANDSWITCH + 1;
source/duke3d/src/sector.cpp:1216:    return (switchPic == DIPSWITCH + 1      || switchPic == DIPSWITCH2 + 1   || switchPic == DIPSWITCH3 + 1 ||
source/duke3d/src/astub.cpp:427:    case DIPSWITCH3: \
Usages for: ACCESSSWITCH2
source/duke3d/src/actors.cpp:8861:    // ACCESSSWITCH and ACCESSSWITCH2 are only active in one state so deal with
source/duke3d/src/actors.cpp:8864:    if ((PN(spriteNum) >= MULTISWITCH && PN(spriteNum) <= MULTISWITCH + 3) || (PN(spriteNum) == ACCESSSWITCH || PN(spriteNum) == ACCESSSWITCH2))
source/duke3d/src/player.cpp:830:    if (hitData->sprite >= 0 && sprite[hitData->sprite].picnum != ACCESSSWITCH && sprite[hitData->sprite].picnum != ACCESSSWITCH2)
source/duke3d/src/player.cpp:840:        if (wall[hitData->wall].picnum != ACCESSSWITCH && wall[hitData->wall].picnum != ACCESSSWITCH2)
source/duke3d/src/player.cpp:1228:            else if (hitData.wall >= 0 && wall[hitData.wall].picnum != ACCESSSWITCH && wall[hitData.wall].picnum != ACCESSSWITCH2)
source/duke3d/src/game.cpp:1474:                if (s.pal && s.picnum != ACCESSSWITCH && s.picnum != ACCESSSWITCH2)
source/duke3d/src/game.cpp:1487:                if (s.pal && s.picnum != ACCESSSWITCH && s.picnum != ACCESSSWITCH2)
source/duke3d/src/astub.cpp:421:    case ACCESSSWITCH2
Usages for: REFLECTWATERTILE
Usages for: FLOORSLIME
source/duke3d/src/player.cpp:64:    else if (sector[playerSectnum].ceilingpicnum >= FLOORSLIME && sector[playerSectnum].ceilingpicnum <= FLOORSLIME + 2)
source/duke3d/src/player.cpp:5154:                        pPlayer->footprintpal                  = (sector[pPlayer->cursectnum].floorpicnum == FLOORSLIME) ? 8 : 0;
source/duke3d/src/game.cpp:1602:            if (sector[sectNum].floorpicnum == FLOORSLIME || sector[sectNum].ceilingpicnum == FLOORSLIME)
source/duke3d/src/game.cpp:4195:            if (sector[t->sectnum].floorpicnum == FLOORSLIME)
source/duke3d/src/astub.cpp:10603:        if (sector[cursectnum].ceilingpicnum==FLOORSLIME)
Usages for: BIGFORCE
source/duke3d/src/actors.cpp:7582:                        if (wall[j].overpicnum == BIGFORCE)
source/duke3d/src/player.cpp:691:            (hitWall->overpicnum != BIGFORCE && (hitWall->cstat & 16) == 0) &&
source/duke3d/src/player.cpp:786:        && (hitWall->overpicnum != BIGFORCE && (hitWall->cstat & 16) == 0)
source/duke3d/src/player.cpp:4235:                                if (wall[hitData.wall].overpicnum == BIGFORCE)
source/duke3d/src/sector.cpp:1152:            && (G_GetForcefieldPicnum(wallNum) == W_FORCEFIELD || (wall[wallNum].overpicnum == BIGFORCE)))
source/duke3d/src/sector.cpp:1584:    if ((((pWall->cstat & 16) || pWall->overpicnum == BIGFORCE) && pWall->nextsector >= 0) &&
source/duke3d/src/astub.cpp:507:        case BIGFORCE: case W_FORCEFIELD:
Usages for: EPISODE
Usages for: MASKWALL9
Usages for: W_LIGHT
Usages for: SCREENBREAK1
Usages for: SCREENBREAK2
Usages for: SCREENBREAK3
Usages for: SCREENBREAK4
Usages for: SCREENBREAK5
Usages for: SCREENBREAK6
source/duke3d/src/savegame.cpp:2395:                    wall[animwall[i].wallnum].picnum = SCREENBREAK6;
source/duke3d/src/menus.cpp:3645:                    wall[animwall[x].wallnum].picnum = SCREENBREAK6;
source/duke3d/src/gameexec.cpp:6742:                    case FEMPIC3__STATIC: wall[animwall[x].wallnum].picnum = SCREENBREAK6; break;
source/duke3d/src/sector.cpp:480:                wall[wallNum].picnum = SCREENBREAK6;
source/duke3d/src/sector.cpp:492:                if (wall[wallNum].picnum == (SCREENBREAK6+3))
source/duke3d/src/sector.cpp:493:                    wall[wallNum].picnum = SCREENBREAK6;
source/duke3d/src/premap.cpp:1145:                    w.picnum = (w.picnum == FEMPIC1) ? BLANKSCREEN : SCREENBREAK6;
source/duke3d/src/premap.cpp:1163:                for (int j = SCREENBREAK6; j < SCREENBREAK9; j++)
Usages for: SCREENBREAK7
Usages for: SCREENBREAK8
Usages for: SCREENBREAK9
source/duke3d/src/premap.cpp:1163:                for (int j = SCREENBREAK6; j < SCREENBREAK9; j++)
Usages for: SCREENBREAK10
Usages for: SCREENBREAK11
Usages for: SCREENBREAK12
Usages for: SCREENBREAK13
Usages for: MASKWALL1
Usages for: W_TECHWALL1
Usages for: W_TECHWALL2
Usages for: W_TECHWALL15
Usages for: W_TECHWALL3
Usages for: W_TECHWALL4
Usages for: W_TECHWALL10
Usages for: W_TECHWALL16
Usages for: WATERTILE2
Usages for: BPANNEL1
source/duke3d/src/sector.cpp:2233:        PN(spriteNum) = BPANNEL1;
Usages for: PANNEL1
Usages for: PANNEL2
Usages for: WATERTILE
Usages for: STATIC
source/duke3d/src/game.cpp:3939:                t->picnum = STATIC;
source/duke3d/src/screens.cpp:295:                rotatesprite_win(x<<16, y<<16, 65536L, 0, STATIC, 0, 0, 2+flipbits);
Usages for: W_SCREENBREAK
source/duke3d/src/menus.cpp:3660:                    if (wall[animwall[x].wallnum].picnum != W_SCREENBREAK &&
source/duke3d/src/menus.cpp:3661:                            wall[animwall[x].wallnum].picnum != W_SCREENBREAK+1 &&
source/duke3d/src/menus.cpp:3662:                            wall[animwall[x].wallnum].picnum != W_SCREENBREAK+2)
source/duke3d/src/menus.cpp:4111:                if ((unsigned) animwall[x].wallnum < (unsigned)numwalls && wall[animwall[x].wallnum].picnum != W_SCREENBREAK &&
source/duke3d/src/menus.cpp:4112:                        wall[animwall[x].wallnum].picnum != W_SCREENBREAK+1 &&
source/duke3d/src/menus.cpp:4113:                        wall[animwall[x].wallnum].picnum != W_SCREENBREAK+2)
source/duke3d/src/sector.cpp:1709:            pWall->picnum = W_SCREENBREAK + (krand() % 3);
Usages for: W_HITTECHWALL3
source/duke3d/src/sector.cpp:1749:            G_BreakWall(W_HITTECHWALL3, spriteNum, wallNum);
Usages for: W_HITTECHWALL4
source/duke3d/src/sector.cpp:1753:            G_BreakWall(W_HITTECHWALL4, spriteNum, wallNum);
Usages for: W_HITTECHWALL2
source/duke3d/src/sector.cpp:1745:            G_BreakWall(W_HITTECHWALL2, spriteNum, wallNum);
Usages for: W_HITTECHWALL1
source/duke3d/src/sector.cpp:1733:            G_BreakWall(W_HITTECHWALL1, spriteNum, wallNum);
Usages for: MASKWALL10
Usages for: MASKWALL11
Usages for: DOORTILE22
source/duke3d/src/astub.cpp:526:        case DOORTILE22: case DOORTILE18: case DOORTILE19: case DOORTILE20:
Usages for: FANSPRITE
Usages for: FANSPRITEBROKE
source/duke3d/src/sector.cpp:1593:                pWall->overpicnum = FANSPRITEBROKE;
source/duke3d/src/sector.cpp:1597:                    wall[pWall->nextwall].overpicnum = FANSPRITEBROKE;
source/duke3d/src/sector.cpp:1963:        PN(spriteNum) = FANSPRITEBROKE;
source/duke3d/src/sector.cpp:2472:        PN(spriteNum) = FANSPRITEBROKE;
Usages for: FANSHADOW
source/duke3d/src/sector.cpp:1966:        if (sector[SECT(spriteNum)].floorpicnum == FANSHADOW)
Usages for: FANSHADOWBROKE
source/duke3d/src/sector.cpp:1967:            sector[SECT(spriteNum)].floorpicnum = FANSHADOWBROKE;
Usages for: DOORTILE18
source/duke3d/src/astub.cpp:526:        case DOORTILE22: case DOORTILE18: case DOORTILE19: case DOORTILE20:
Usages for: DOORTILE19
source/duke3d/src/astub.cpp:526:        case DOORTILE22: case DOORTILE18: case DOORTILE19: case DOORTILE20:
Usages for: DOORTILE20
source/duke3d/src/astub.cpp:526:        case DOORTILE22: case DOORTILE18: case DOORTILE19: case DOORTILE20:
Usages for: SPACESHUTTLE
Usages for: SATELLITE
Usages for: VIEWSCREEN2
source/duke3d/src/game.cpp:1466:            && s.picnum != VIEWSCREEN && s.picnum != VIEWSCREEN2 && (!(s.picnum >= CRACK1 && s.picnum <= CRACK4)))
source/duke3d/src/astub.cpp:486:        case VIEWSCREEN2: case VIEWSCREEN:
Usages for: VIEWSCREENBROKE
Usages for: VIEWSCREEN
source/duke3d/src/game.cpp:1466:            && s.picnum != VIEWSCREEN && s.picnum != VIEWSCREEN2 && (!(s.picnum >= CRACK1 && s.picnum <= CRACK4)))
source/duke3d/src/astub.cpp:486:        case VIEWSCREEN2: case VIEWSCREEN:
source/duke3d/src/premap.cpp:220:    tloadtile(VIEWSCREEN, 1);
Usages for: GLASS
Usages for: GLASS2
source/duke3d/src/sector.cpp:1639:                pWall->overpicnum = GLASS2;
Usages for: STAINGLASS1
Usages for: MASKWALL5
Usages for: SATELITE
Usages for: FUELPOD
Usages for: SLIMEPIPE
Usages for: CRACK1
source/duke3d/src/actors.cpp:2230:        else if (!FURY && pSprite->picnum >= CRACK1 && pSprite->picnum <= CRACK4)
source/duke3d/src/game.cpp:1466:            && s.picnum != VIEWSCREEN && s.picnum != VIEWSCREEN2 && (!(s.picnum >= CRACK1 && s.picnum <= CRACK4)))
source/duke3d/src/astub.cpp:487:        case CRACK1: case CRACK2: case CRACK3: case CRACK4: case FIREEXT:
Usages for: CRACK2
source/duke3d/src/astub.cpp:487:        case CRACK1: case CRACK2: case CRACK3: case CRACK4: case FIREEXT:
Usages for: CRACK3
source/duke3d/src/astub.cpp:487:        case CRACK1: case CRACK2: case CRACK3: case CRACK4: case FIREEXT:
Usages for: CRACK4
source/duke3d/src/actors.cpp:2230:        else if (!FURY && pSprite->picnum >= CRACK1 && pSprite->picnum <= CRACK4)
source/duke3d/src/game.cpp:1466:            && s.picnum != VIEWSCREEN && s.picnum != VIEWSCREEN2 && (!(s.picnum >= CRACK1 && s.picnum <= CRACK4)))
source/duke3d/src/astub.cpp:487:        case CRACK1: case CRACK2: case CRACK3: case CRACK4: case FIREEXT:
Usages for: FOOTPRINTS
source/duke3d/src/player.cpp:5168:                    if (sprite[spriteNum].picnum == FOOTPRINTS || sprite[spriteNum].picnum == FOOTPRINTS2 ||
source/duke3d/src/player.cpp:5187:                                case 0: spriteNum  = A_Spawn(pPlayer->i, FOOTPRINTS); break;
source/duke3d/src/premap.cpp:229:    for (int i = FOOTPRINTS; i < FOOTPRINTS+3; i++)
Usages for: DOMELITE
source/duke3d/src/game.cpp:1606:            if (pSprite->picnum == DOMELITE)
source/duke3d/src/game.cpp:4302:            if (t->statnum != TSPR_TEMP && pSprite->picnum != EXPLOSION2 && pSprite->picnum != HANGLIGHT && pSprite->picnum != DOMELITE && pSprite->picnum != HOTMEAT)
Usages for: CAMERAPOLE
Usages for: CHAIR1
Usages for: CHAIR2
Usages for: BROKENCHAIR
source/duke3d/src/sector.cpp:2321:        PN(spriteNum) = BROKENCHAIR;
Usages for: MIRROR
source/duke3d/src/actors.cpp:3148:                            && (wall[otherSprite].overpicnum == MIRROR || wall[otherSprite].picnum == MIRROR))
source/duke3d/src/actors.cpp:3165:                                if (wall[otherSprite].overpicnum != MIRROR && wall[otherSprite].picnum != MIRROR)
source/duke3d/src/actors.cpp:3440:                                && (wall[moveSprite].overpicnum == MIRROR || wall[moveSprite].picnum == MIRROR))
source/duke3d/src/actors.cpp:3454:                                    if (wall[moveSprite].overpicnum != MIRROR && wall[moveSprite].picnum != MIRROR)
source/duke3d/src/player.cpp:5109:    if (ud.noclip == 0 && ((uint16_t)pPlayer->cursectnum >= MAXSECTORS || sector[pPlayer->cursectnum].floorpicnum == MIRROR))
source/duke3d/src/game.cpp:580:    if ((gotpic[MIRROR>>3]&pow2char[MIRROR&7])
source/duke3d/src/game.cpp:588:            // NOTE: We can have g_mirrorCount==0 but gotpic'd MIRROR,
source/duke3d/src/game.cpp:590:            gotpic[MIRROR>>3] &= ~pow2char[MIRROR&7];
source/duke3d/src/game.cpp:613:        if (wall[g_mirrorWall[i]].overpicnum != MIRROR)
source/duke3d/src/game.cpp:623:                if (j >= 0 && (wall[j].cstat&32) && wall[j].overpicnum==MIRROR)  // cmp. premap.c
source/duke3d/src/game.cpp:631:        if (wall[g_mirrorWall[i]].overpicnum == MIRROR)
source/duke3d/src/game.cpp:706:        gotpic[MIRROR>>3] &= ~pow2char[MIRROR&7];
source/duke3d/src/game.cpp:1110:            gotpic[MIRROR>>3] |= pow2char[MIRROR&7];
source/duke3d/src/game.cpp:4495:        if (sector[t->sectnum].floorpicnum == MIRROR)
source/duke3d/src/game.cpp:6663:    tileDelete(MIRROR);
source/duke3d/src/sector.cpp:1542:    if (pWall->overpicnum == MIRROR && pWall->pal != 4 &&
source/duke3d/src/sector.cpp:1558:    if (pWall->overpicnum == MIRROR && pWall->pal != 4)
source/duke3d/src/sector.cpp:3314:        if (foundWall >= 0 && wallDist < 1280 && wall[foundWall].overpicnum == MIRROR)
source/duke3d/src/premap.cpp:1072:        if (w.overpicnum == MIRROR && (w.cstat & 32) != 0)
source/duke3d/src/premap.cpp:1076:            if ((nextSectnum >= 0) && sector[nextSectnum].ceilingpicnum != MIRROR)
source/duke3d/src/premap.cpp:1083:                sector[nextSectnum].ceilingpicnum = MIRROR;
source/duke3d/src/premap.cpp:1084:                sector[nextSectnum].floorpicnum   = MIRROR;
source/duke3d/src/premap.cpp:1203:            wall[j].picnum = wall[j].overpicnum = MIRROR;
Usages for: WATERFOUNTAIN
source/duke3d/src/actors.cpp:1986:        else if (!FURY && PN(spriteNum) >= WATERFOUNTAIN && PN(spriteNum) <= WATERFOUNTAIN+3)
source/duke3d/src/actors.cpp:1996:                    if (pSprite->picnum == (WATERFOUNTAIN+3))
source/duke3d/src/actors.cpp:1997:                        pSprite->picnum = WATERFOUNTAIN+1;
source/duke3d/src/actors.cpp:2008:                        pSprite->picnum = WATERFOUNTAIN;
source/duke3d/src/sector.cpp:2083:        //    case WATERFOUNTAIN+1:
source/duke3d/src/sector.cpp:2084:        //    case WATERFOUNTAIN+2:
Usages for: WATERFOUNTAINBROKE
source/duke3d/src/sector.cpp:2085:        PN(spriteNum) = WATERFOUNTAINBROKE;
Usages for: FEMMAG1
Usages for: TOILET
Usages for: STALL
Usages for: STALLBROKE
source/duke3d/src/sector.cpp:2206:        PN(spriteNum) = STALLBROKE;
source/duke3d/src/premap.cpp:89:        tloadtile(STALLBROKE,1);
Usages for: FEMMAG2
Usages for: REACTOR2
source/duke3d/src/actors.cpp:7359:                    if (sprite[j].picnum == REACTOR || sprite[j].picnum == REACTOR2)
Usages for: REACTOR2BURNT
source/duke3d/src/actors.cpp:5335:                        sprite[j].picnum = REACTOR2BURNT;
Usages for: REACTOR2SPARK
Usages for: GRATE1
Usages for: BGRATE1
source/duke3d/src/sector.cpp:1957:        PN(spriteNum) = BGRATE1;
source/duke3d/src/sector.cpp:2467:        PN(spriteNum) = BGRATE1;
Usages for: SOLARPANNEL
Usages for: NAKED1
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: ANTENNA
Usages for: MASKWALL12
Usages for: TOILETBROKE
source/duke3d/src/sector.cpp:2198:        PN(spriteNum) = TOILETBROKE;
source/duke3d/src/premap.cpp:85:        tloadtile(TOILETBROKE,1);
Usages for: PIPE2
Usages for: PIPE1B
source/duke3d/src/sector.cpp:2254:            PN(spriteNum)=PIPE1B;
Usages for: PIPE3
Usages for: PIPE1
Usages for: CAMERA1
source/duke3d/src/actors.cpp:99:        if (sprite[k].picnum==CAMERA1)
source/duke3d/src/game.cpp:1521:    if (pSprite->picnum >= CAMERA1 && pSprite->picnum <= CAMERA1 + 4)
source/duke3d/src/game.cpp:1522:        pSprite->picnum = CAMERA1;
source/duke3d/src/sector.cpp:3481:                    if (PN(spriteNum) == CAMERA1 && SP(spriteNum) == 0 && sprite[nearSprite].hitag == SLT(spriteNum))
source/duke3d/src/astub.cpp:481:        case CAMERA1:
source/duke3d/src/astub.cpp:10293:            case CAMERA1:
source/duke3d/src/astub.cpp:10520:        case CAMERA1:
Usages for: BRICK
Usages for: SPLINTERWOOD
Usages for: PIPE2B
source/duke3d/src/sector.cpp:2257:            PN(spriteNum)=PIPE2B;
Usages for: BOLT1
source/duke3d/src/actors.cpp:2474:                else if (switchPic > BOLT1 && switchPic <= BOLT1 + 3)
source/duke3d/src/actors.cpp:2475:                    switchPic = BOLT1;
source/duke3d/src/actors.cpp:2643:                    // SIDEBOLT1 never gets translucent as a consequence, unlike BOLT1.
source/duke3d/src/actors.cpp:2658:                    //        case BOLT1+1:
source/duke3d/src/actors.cpp:2659:                    //        case BOLT1+2:
source/duke3d/src/actors.cpp:2660:                    //        case BOLT1+3:
source/duke3d/src/actors.cpp:2699:                    if (pSprite->picnum == (BOLT1 + 1)
source/duke3d/src/actors.cpp:2703:                    if (pSprite->picnum == BOLT1 + 4)
source/duke3d/src/actors.cpp:2704:                        pSprite->picnum = BOLT1;
source/duke3d/src/actors.cpp:7807:                        if (sprite[sectSprite].picnum == BOLT1
source/duke3d/src/actors.cpp:7808:                            || sprite[sectSprite].picnum == BOLT1 + 1
source/duke3d/src/actors.cpp:7809:                            || sprite[sectSprite].picnum == BOLT1 + 2
source/duke3d/src/actors.cpp:7810:                            || sprite[sectSprite].picnum == BOLT1 + 3
source/duke3d/src/game.cpp:1524:    else if (pSprite->picnum >= BOLT1 && pSprite->picnum <= BOLT1 + 3)
source/duke3d/src/game.cpp:1525:        pSprite->picnum = BOLT1;
Usages for: W_NUMBERS
Usages for: WATERDRIP
source/duke3d/src/actors.cpp:2740:                            if (sprite[pSprite->owner].picnum != WATERDRIP)
Usages for: WATERBUBBLE
source/duke3d/src/actors.cpp:3076:                A_Spawn(spriteNum, WATERBUBBLE);
source/duke3d/src/actors.cpp:3590:                    A_Spawn(spriteNum, WATERBUBBLE);
source/duke3d/src/actors.cpp:3685:            sprite[A_Spawn(pPlayer->i, WATERBUBBLE)].z += krand() & 16383;
source/duke3d/src/actors.cpp:3903:                                    //                            if( rnd(192) && sprite[j].picnum == WATERBUBBLE)
source/duke3d/src/player.cpp:141:        A_InsertSprite(sectNum, startPos.x, startPos.y, startPos.z, WATERBUBBLE, -32, 4 + (krand() & 3), 4 + (krand() & 3), krand() & 2047, 0, 0,
source/duke3d/src/player.cpp:1613:                j = A_Spawn(spriteNum, WATERBUBBLE);
source/duke3d/src/player.cpp:4718:        int const spriteNum = A_Spawn(pPlayer->i, WATERBUBBLE);
Usages for: WATERBUBBLEMAKER
source/duke3d/src/game.cpp:2778:            if (EDUKE32_PREDICT_FALSE(pSprite->hitag && pSprite->picnum == WATERBUBBLEMAKER))
source/duke3d/src/game.cpp:2781:                OSD_Printf(OSD_ERROR "WARNING: WATERBUBBLEMAKER %d @ %d,%d with hitag!=0. Applying fixup.\n",
Usages for: W_FORCEFIELD
source/duke3d/src/sector.cpp:498:        if ((wall[wallNum].cstat&16) && G_GetForcefieldPicnum(wallNum)==W_FORCEFIELD)
source/duke3d/src/sector.cpp:516:                    wall[wallNum].overpicnum = (animwall[animwallNum].tag & 128) ? W_FORCEFIELD : W_FORCEFIELD + 1;
source/duke3d/src/sector.cpp:522:                    else wall[wallNum].overpicnum = W_FORCEFIELD+1;
source/duke3d/src/sector.cpp:1152:            && (G_GetForcefieldPicnum(wallNum) == W_FORCEFIELD || (wall[wallNum].overpicnum == BIGFORCE)))
source/duke3d/src/astub.cpp:507:        case BIGFORCE: case W_FORCEFIELD:
source/duke3d/src/premap.cpp:1116:                        tloadtile(W_FORCEFIELD + j, 0);
source/duke3d/src/sector.h:150:// Returns W_FORCEFIELD if wall has a forcefield overpicnum, its overpicnum else.
source/duke3d/src/sector.h:154:    return tileNum == W_FORCEFIELD + 1 ? W_FORCEFIELD : tileNum;
Usages for: VACUUM
Usages for: FOOTPRINTS2
source/duke3d/src/player.cpp:5168:                    if (sprite[spriteNum].picnum == FOOTPRINTS || sprite[spriteNum].picnum == FOOTPRINTS2 ||
source/duke3d/src/player.cpp:5188:                                case 1: spriteNum  = A_Spawn(pPlayer->i, FOOTPRINTS2); break;
Usages for: FOOTPRINTS3
source/duke3d/src/player.cpp:5169:                        sprite[spriteNum].picnum == FOOTPRINTS3 || sprite[spriteNum].picnum == FOOTPRINTS4)
source/duke3d/src/player.cpp:5189:                                case 2: spriteNum  = A_Spawn(pPlayer->i, FOOTPRINTS3); break;
Usages for: FOOTPRINTS4
source/duke3d/src/player.cpp:5169:                        sprite[spriteNum].picnum == FOOTPRINTS3 || sprite[spriteNum].picnum == FOOTPRINTS4)
source/duke3d/src/player.cpp:5190:                                default: spriteNum = A_Spawn(pPlayer->i, FOOTPRINTS4); break;
Usages for: EGG
source/duke3d/src/game.cpp:2347:            if (ud.monsters_off == 1 && pSprite->picnum == EGG)
source/duke3d/src/game.cpp:2354:                if (pSprite->picnum == EGG)
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/astub.cpp:1192:            case RECON: case DRONE: case ROTATEGUN: case EGG: case ORGANTIC: case GREENSLIME:
source/duke3d/src/astub.cpp:1227:        PRSTAT(" Egg       =", EGG);
source/duke3d/src/astub.cpp:10298:            case EGG :
Usages for: SCALE
source/duke3d/src/astub.cpp:5498:                Bsprintf(tempbuf,"SCALE");
source/duke3d/src/m32def.cpp:2811:        // syntax: itof <<var>> SCALE
source/duke3d/src/m32def.cpp:2812:        //         ftoi <<var>> SCALE
Usages for: CHAIR3
Usages for: CAMERALIGHT
Usages for: MOVIECAMERA
Usages for: IVUNIT
Usages for: POT1
Usages for: POT2
Usages for: POT3
Usages for: PIPE3B
source/duke3d/src/sector.cpp:2260:            PN(spriteNum)=PIPE3B;
Usages for: WALLLIGHT3
source/duke3d/src/sector.cpp:1780:            if (pWall->picnum == WALLLIGHT3)
source/duke3d/src/astub.cpp:506:        case WALLLIGHT3: case WALLLIGHT1: case WALLLIGHT2:
Usages for: WALLLIGHTBUST3
source/duke3d/src/sector.cpp:1781:                pWall->picnum = WALLLIGHTBUST3;
source/duke3d/src/sector.cpp:1887:        case WALLLIGHT3__STATIC: *pPicnum = WALLLIGHTBUST3; goto GLASSBREAK_CODE;
Usages for: WALLLIGHT1
source/duke3d/src/sector.cpp:1774:            if (pWall->picnum == WALLLIGHT1)
source/duke3d/src/astub.cpp:506:        case WALLLIGHT3: case WALLLIGHT1: case WALLLIGHT2:
Usages for: WALLLIGHTBUST1
source/duke3d/src/sector.cpp:1775:                pWall->picnum = WALLLIGHTBUST1;
source/duke3d/src/sector.cpp:1885:        case WALLLIGHT1__STATIC: *pPicnum = WALLLIGHTBUST1; goto GLASSBREAK_CODE;
Usages for: WALLLIGHT2
source/duke3d/src/sector.cpp:1777:            if (pWall->picnum == WALLLIGHT2)
source/duke3d/src/astub.cpp:506:        case WALLLIGHT3: case WALLLIGHT1: case WALLLIGHT2:
Usages for: WALLLIGHTBUST2
source/duke3d/src/sector.cpp:1778:                pWall->picnum = WALLLIGHTBUST2;
source/duke3d/src/sector.cpp:1886:        case WALLLIGHT2__STATIC: *pPicnum = WALLLIGHTBUST2; goto GLASSBREAK_CODE;
Usages for: LIGHTSWITCH2
source/duke3d/src/sector.cpp:1219:        switchPic == SPACELIGHTSWITCH + 1   || switchPic == LIGHTSWITCH + 1  || switchPic == LIGHTSWITCH2 + 1 ||
source/duke3d/src/astub.cpp:430:    case LIGHTSWITCH2: \
Usages for: WAITTOBESEATED
Usages for: DOORTILE14
source/duke3d/src/astub.cpp:527:        case DOORTILE14: case DOORTILE16: case DOORTILE15: case DOORTILE21:
Usages for: STATUE
source/duke3d/src/sector.cpp:2133:        else if (PN(spriteNum) == STATUE || PN(spriteNum) == STATUEFLASH)
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: MIKE
Usages for: VASE
source/duke3d/src/sector.cpp:2138:        else if (PN(spriteNum) == VASE)
Usages for: SUSHIPLATE1
Usages for: SUSHIPLATE2
Usages for: SUSHIPLATE3
Usages for: SUSHIPLATE4
Usages for: DOORTILE16
source/duke3d/src/astub.cpp:527:        case DOORTILE14: case DOORTILE16: case DOORTILE15: case DOORTILE21:
Usages for: SUSHIPLATE5
Usages for: OJ
Usages for: MASKWALL13
Usages for: HURTRAIL
source/duke3d/src/actors.cpp:2648:                    if ((krand() & 1) && sector[sectNum].floorpicnum == HURTRAIL)
source/duke3d/src/actors.cpp:2700:                        && (krand() & 7) == 0 && sector[sectNum].floorpicnum == HURTRAIL)
Usages for: POWERSWITCH1
source/duke3d/src/sector.cpp:1220:        switchPic == FRANKENSTINESWITCH + 1 || switchPic == POWERSWITCH1 + 1 || switchPic == POWERSWITCH2 + 1 ||
source/duke3d/src/astub.cpp:433:    case POWERSWITCH1: \
Usages for: LOCKSWITCH1
source/duke3d/src/sector.cpp:1221:        switchPic == LOCKSWITCH1 + 1) ?
source/duke3d/src/astub.cpp:432:    case LOCKSWITCH1: \
Usages for: POWERSWITCH2
source/duke3d/src/sector.cpp:1220:        switchPic == FRANKENSTINESWITCH + 1 || switchPic == POWERSWITCH1 + 1 || switchPic == POWERSWITCH2 + 1 ||
source/duke3d/src/astub.cpp:434:    case POWERSWITCH2: \
Usages for: ATM
Usages for: STATUEFLASH
source/duke3d/src/sector.cpp:2133:        else if (PN(spriteNum) == STATUE || PN(spriteNum) == STATUEFLASH)
Usages for: ATMBROKE
source/duke3d/src/sector.cpp:1757:            pWall->picnum = ATMBROKE;
Usages for: BIGHOLE2
Usages for: STRIPEBALL
source/duke3d/src/actors.cpp:142:        pOther->picnum == TRIPBOMB || pOther->picnum == QUEBALL || pOther->picnum == STRIPEBALL || pOther->picnum == DUKELYINGDEAD ||
source/duke3d/src/actors.cpp:4332:                if (pSprite->picnum == STRIPEBALL)
source/duke3d/src/actors.cpp:4356:                            if (sprite[ballSprite].picnum == QUEBALL || sprite[ballSprite].picnum == STRIPEBALL)
source/duke3d/src/sector.cpp:1989:        if (sprite[dmgSrc].picnum == QUEBALL || sprite[dmgSrc].picnum == STRIPEBALL)
Usages for: QUEBALL
source/duke3d/src/actors.cpp:142:        pOther->picnum == TRIPBOMB || pOther->picnum == QUEBALL || pOther->picnum == STRIPEBALL || pOther->picnum == DUKELYINGDEAD ||
source/duke3d/src/actors.cpp:4356:                            if (sprite[ballSprite].picnum == QUEBALL || sprite[ballSprite].picnum == STRIPEBALL)
source/duke3d/src/sector.cpp:1989:        if (sprite[dmgSrc].picnum == QUEBALL || sprite[dmgSrc].picnum == STRIPEBALL)
Usages for: POCKET
source/duke3d/src/actors.cpp:4307:                    if (sprite[hitObject].picnum == POCKET && ldist(&sprite[hitObject],pSprite) < 52)
Usages for: WOODENHORSE
Usages for: TREE1
source/duke3d/src/game.cpp:4409:            if (sprite[pSprite->owner].picnum != TREE1 && sprite[pSprite->owner].picnum != TREE2)
source/duke3d/src/macros.h:59:#define AFLAMABLE(X) (X==BOX||X==TREE1||X==TREE2||X==TIRE||X==CONE)
Usages for: TREE2
source/duke3d/src/game.cpp:4409:            if (sprite[pSprite->owner].picnum != TREE1 && sprite[pSprite->owner].picnum != TREE2)
source/duke3d/src/macros.h:59:#define AFLAMABLE(X) (X==BOX||X==TREE1||X==TREE2||X==TIRE||X==CONE)
Usages for: CACTUS
source/duke3d/src/player.cpp:3767:        if (!FURY && sprite[touchSprite].picnum == CACTUS)
source/duke3d/src/sector.cpp:2067:            if (PN(spriteNum) == CACTUS)
Usages for: MASKWALL2
Usages for: MASKWALL3
Usages for: MASKWALL4
Usages for: FIREEXT
source/duke3d/src/actors.cpp:1702:                if (j == FIREEXT || j == RPG || j == RADIUSEXPLOSION || j == SEENINE || j == OOZFILTER)
source/duke3d/src/actors.cpp:2270:        else if (!FURY && pSprite->picnum == FIREEXT)
source/duke3d/src/game.cpp:3421:            if (pSprite->picnum == FIREEXT)
source/duke3d/src/astub.cpp:487:        case CRACK1: case CRACK2: case CRACK3: case CRACK4: case FIREEXT:
Usages for: TOILETWATER
source/duke3d/src/sector.cpp:2086:        A_Spawn(spriteNum,TOILETWATER);
source/duke3d/src/sector.cpp:2201:        A_Spawn(spriteNum,TOILETWATER);
source/duke3d/src/sector.cpp:2209:        A_Spawn(spriteNum,TOILETWATER);
source/duke3d/src/sector.cpp:2215:        A_Spawn(spriteNum,TOILETWATER);
source/duke3d/src/premap.cpp:82:        for (int j = TOILETWATER; j < (TOILETWATER+4); j++) tloadtile(j,1);
source/duke3d/src/premap.cpp:86:        for (int j = TOILETWATER; j < (TOILETWATER+4); j++) tloadtile(j,1);
source/duke3d/src/premap.cpp:90:        for (int j = TOILETWATER; j < (TOILETWATER+4); j++) tloadtile(j,1);
Usages for: NEON1
Usages for: NEON2
Usages for: CACTUSBROKE
source/duke3d/src/sector.cpp:2066:            //        case CACTUSBROKE:
source/duke3d/src/sector.cpp:2068:                PN(spriteNum) = CACTUSBROKE;
Usages for: BOUNCEMINE
source/duke3d/src/actors.cpp:5118:            if (pSprite->picnum != BOUNCEMINE)
source/duke3d/src/actors.cpp:5160:            if (pData[3] == 0 && (pSprite->picnum == BOUNCEMINE || pSprite->picnum == MORTER) && (moveSprite || playerDist < 844))
Usages for: BROKEFIREHYDRENT
source/duke3d/src/sector.cpp:2214:        PN(spriteNum) = BROKEFIREHYDRENT;
source/duke3d/src/premap.cpp:81:        tloadtile(BROKEFIREHYDRENT,1);
Usages for: BOX
source/duke3d/src/actors.cpp:2045:            if (pSprite->picnum == BOX)
source/duke3d/src/macros.h:59:#define AFLAMABLE(X) (X==BOX||X==TREE1||X==TREE2||X==TIRE||X==CONE)
Usages for: BULLETHOLE
source/duke3d/src/player.cpp:728:                // BULLETHOLE already adds itself to the deletion queue in
source/duke3d/src/player.cpp:730:                if (decalTile != BULLETHOLE)
source/duke3d/src/player.cpp:1189:                if (P_PostFireHitscan(playerNum, spawnedSprite, &hitData, spriteNum, projecTile, Zvel, -SMALLSMOKE, BULLETHOLE, SHOTSPARK1, 0) < 0)
source/duke3d/src/gamedef.cpp:6225:        (int16_t)SMALLSMOKE, -1, -1, 600, (int16_t)BULLETHOLE, -1, 0, 0,
source/duke3d/src/premap.cpp:255:    tloadtile(BULLETHOLE, 1);
Usages for: BOTTLE1
Usages for: BOTTLE2
Usages for: BOTTLE3
Usages for: BOTTLE4
Usages for: FEMPIC5
Usages for: FEMPIC6
Usages for: FEMPIC7
Usages for: HYDROPLANT
Usages for: OCEANSPRITE1
Usages for: OCEANSPRITE2
Usages for: OCEANSPRITE3
Usages for: OCEANSPRITE4
Usages for: OCEANSPRITE5
Usages for: GENERICPOLE
Usages for: CONE
source/duke3d/src/macros.h:59:#define AFLAMABLE(X) (X==BOX||X==TREE1||X==TREE2||X==TIRE||X==CONE)
Usages for: HANGLIGHT
source/duke3d/src/game.cpp:4302:            if (t->statnum != TSPR_TEMP && pSprite->picnum != EXPLOSION2 && pSprite->picnum != HANGLIGHT && pSprite->picnum != DOMELITE && pSprite->picnum != HOTMEAT)
Usages for: HYDRENT
Usages for: MASKWALL14
Usages for: TIRE
source/duke3d/src/actors.cpp:2021:                if (pSprite->picnum == TIRE && T2(spriteNum) == 32)
source/duke3d/src/actors.cpp:5863:                    if (actor[spriteNum].picnum == TIRE)
source/duke3d/src/actors.cpp:5902:                    pPlayer->footprintcount = (actor[spriteNum].picnum == TIRE) ? 10 : 3;
source/duke3d/src/game.cpp:2449:                else if (sprite[spriteNum].pal != 6 && sprite[spriteNum].picnum != NUKEBARREL && sprite[spriteNum].picnum != TIRE)
source/duke3d/src/game.cpp:2454:                if (sprite[spriteNum].picnum == TIRE)
source/duke3d/src/macros.h:59:#define AFLAMABLE(X) (X==BOX||X==TREE1||X==TREE2||X==TIRE||X==CONE)
Usages for: PIPE5
Usages for: PIPE6
Usages for: PIPE4
Usages for: PIPE4B
source/duke3d/src/sector.cpp:2263:            PN(spriteNum)=PIPE4B;
Usages for: BROKEHYDROPLANT
source/duke3d/src/sector.cpp:2178:        PN(spriteNum) = BROKEHYDROPLANT;
Usages for: PIPE5B
source/duke3d/src/sector.cpp:2266:            PN(spriteNum)=PIPE5B;
Usages for: NEON3
Usages for: NEON4
Usages for: NEON5
Usages for: BOTTLE5
Usages for: BOTTLE6
Usages for: BOTTLE8
Usages for: SPOTLITE
Usages for: HANGOOZ
Usages for: MASKWALL15
Usages for: BOTTLE7
Usages for: HORSEONSIDE
source/duke3d/src/premap.cpp:113:        for (int j = HORSEONSIDE; j < (HORSEONSIDE+4); j++) tloadtile(j,1);
Usages for: GLASSPIECES
source/duke3d/src/actors.cpp:4736:                                                           GLASSPIECES + (j % 3), -32, 36, 36, krand() & 2047, 32 + (krand() & 63),
source/duke3d/src/actors.cpp:5484:        if (pSprite->picnum > GLASSPIECES && pSprite->picnum <= GLASSPIECES+2)
source/duke3d/src/actors.cpp:5485:            switchPic = GLASSPIECES;
source/duke3d/src/actors.cpp:5957:                //        case GLASSPIECES+1:
source/duke3d/src/actors.cpp:5958:                //        case GLASSPIECES+2:
source/duke3d/src/game.cpp:7226:            A_InsertSprite(SECT(spriteNum), SX(spriteNum), SY(spriteNum), SZ(spriteNum), GLASSPIECES + (j % 3), -32, 36, 36, a,
source/duke3d/src/game.cpp:7256:            A_InsertSprite(SECT(spriteNum), v1.x, v1.y, z, GLASSPIECES + (j % 3), -32, 36, 36, SA(spriteNum) - 1024, 32 + (krand() & 63),
source/duke3d/src/game.cpp:7267:        = A_InsertSprite(SECT(spriteNum), SX(spriteNum), SY(spriteNum), SZ(spriteNum) - ((krand() & 16) << 8), GLASSPIECES + (glassCnt % 3),
source/duke3d/src/game.cpp:7288:            A_InsertSprite(sectNum, v1.x, v1.y, sector[sectNum].ceilingz + ((krand() & 15) << 8), GLASSPIECES + (j % 3), -32, 36, 36,
source/duke3d/src/game.cpp:7301:            = A_InsertSprite(SECT(spriteNum), SX(spriteNum), SY(spriteNum), SZ(spriteNum) - (krand() & (63 << 8)), GLASSPIECES + (j % 3),
source/duke3d/src/game.cpp:7325:        int const k = A_InsertSprite(SECT(spriteNum), v1.x, v1.y, z, GLASSPIECES + (j % 3), -32, 36, 36, SA(spriteNum) - 1024,
Usages for: HORSELITE
Usages for: DONUTS
Usages for: NEON6
Usages for: MASKWALL6
Usages for: CLOCK
Usages for: RUBBERCAN
Usages for: BROKENCLOCK
Usages for: PLUG
Usages for: OOZFILTER
source/duke3d/src/actors.cpp:1702:                if (j == FIREEXT || j == RPG || j == RADIUSEXPLOSION || j == SEENINE || j == OOZFILTER)
source/duke3d/src/actors.cpp:2252:                                (sprite[j].picnum == OOZFILTER || sprite[j].picnum == SEENINE))
source/duke3d/src/actors.cpp:2293:                    if (pSprite->hitag == sprite[j].hitag && (sprite[j].picnum == OOZFILTER || sprite[j].picnum == SEENINE))
source/duke3d/src/actors.cpp:2314:            if (pSprite->picnum == OOZFILTER || pSprite->picnum == SEENINE || pSprite->picnum == SEENINEDEAD || pSprite->picnum == SEENINEDEAD+1)
source/duke3d/src/actors.cpp:2331:                        if (pSprite->hitag == sprite[j].hitag && (sprite[j].picnum == SEENINE || sprite[j].picnum == OOZFILTER))
source/duke3d/src/actors.cpp:2356:                            if (pSprite->picnum == OOZFILTER)
source/duke3d/src/player.cpp:1149:                        if (PN(spriteNum) == OOZFILTER || PN(spriteNum) == NEWBEAST)
source/duke3d/src/astub.cpp:490:        case SEENINE: case OOZFILTER:
Usages for: FLOORPLASMA
Usages for: REACTOR
source/duke3d/src/actors.cpp:7359:                    if (sprite[j].picnum == REACTOR || sprite[j].picnum == REACTOR2)
source/duke3d/src/astub.cpp:480:        case REACTOR:
source/duke3d/src/astub.cpp:785:        "ROTATE REACTOR SECTOR",
Usages for: REACTORSPARK
Usages for: REACTORBURNT
source/duke3d/src/actors.cpp:5332:                        sprite[j].picnum = REACTORBURNT;
Usages for: DOORTILE15
source/duke3d/src/astub.cpp:527:        case DOORTILE14: case DOORTILE16: case DOORTILE15: case DOORTILE21:
Usages for: HANDSWITCH
source/duke3d/src/player.cpp:338:           tileNum == DIPSWITCH3 || tileNum == DIPSWITCH3 + 1 || tileNum == HANDSWITCH || tileNum == HANDSWITCH + 1;
source/duke3d/src/sector.cpp:1218:        switchPic == HANDSWITCH + 1         || switchPic == SLOTDOOR + 1     || switchPic == SPACEDOORSWITCH + 1 ||
source/duke3d/src/astub.cpp:429:    case HANDSWITCH: \
Usages for: CIRCLEPANNEL
Usages for: CIRCLEPANNELBROKE
source/duke3d/src/sector.cpp:2226:        PN(spriteNum) = CIRCLEPANNELBROKE;
Usages for: PULLSWITCH
source/duke3d/src/sector.cpp:1217:        switchPic == TECHSWITCH + 1         || switchPic == ALIENSWITCH + 1  || switchPic == PULLSWITCH + 1 ||
source/duke3d/src/astub.cpp:435:    case PULLSWITCH: \
Usages for: MASKWALL8
Usages for: BIGHOLE
source/duke3d/src/sbar.cpp:1038:        int32_t bgtile = (fstilep ? MENUTILE : BIGHOLE);
source/duke3d/src/sbar.cpp:1043:        //        Gv_SetVar(g_iReturnVarID,tilesizx[MENUTILE]==320&&tilesizy[MENUTILE]==200?MENUTILE:BIGHOLE, -1, -1);
source/duke3d/src/sbar.cpp:1058:    int32_t const dapicnum = VM_OnEventWithReturn(EVENT_DISPLAYBORDER, g_player[screenpeek].ps->i, screenpeek, BIGHOLE);
Usages for: ALIENSWITCH
source/duke3d/src/sector.cpp:1204:        if (switchPic == DIPSWITCH+i || switchPic == TECHSWITCH+i || switchPic == ALIENSWITCH+i)
source/duke3d/src/sector.cpp:1217:        switchPic == TECHSWITCH + 1         || switchPic == ALIENSWITCH + 1  || switchPic == PULLSWITCH + 1 ||
source/duke3d/src/sector.cpp:1437:                S_PlaySound3D((nSwitchPicnum == ALIENSWITCH || nSwitchPicnum == ALIENSWITCH + 1) ? ALIEN_SWITCH1 : SWITCH_ON,
source/duke3d/src/astub.cpp:416:    case ALIENSWITCH
Usages for: DOORTILE21
source/duke3d/src/astub.cpp:527:        case DOORTILE14: case DOORTILE16: case DOORTILE15: case DOORTILE21:
Usages for: HANDPRINTSWITCH
Usages for: BOTTLE10
source/duke3d/src/sector.cpp:2131:        if (PN(spriteNum) == BOTTLE10)
Usages for: BOTTLE11
Usages for: BOTTLE12
Usages for: BOTTLE13
Usages for: BOTTLE14
Usages for: BOTTLE15
Usages for: BOTTLE16
Usages for: BOTTLE17
Usages for: BOTTLE18
Usages for: BOTTLE19
Usages for: DOORTILE17
source/duke3d/src/astub.cpp:528:        case DOORTILE17: case DOORTILE11: case DOORTILE12: case DOORTILE23:  // ---
Usages for: MASKWALL7
Usages for: JAILBARBREAK
Usages for: DOORTILE11
source/duke3d/src/astub.cpp:528:        case DOORTILE17: case DOORTILE11: case DOORTILE12: case DOORTILE23:  // ---
Usages for: DOORTILE12
source/duke3d/src/astub.cpp:528:        case DOORTILE17: case DOORTILE11: case DOORTILE12: case DOORTILE23:  // ---
Usages for: VENDMACHINE
Usages for: VENDMACHINEBROKE
Usages for: COLAMACHINE
Usages for: COLAMACHINEBROKE
Usages for: CRANEPOLE
source/duke3d/src/game.cpp:1895:                    if (sprite[findSprite].picnum == CRANEPOLE && pSprite->hitag == (sprite[findSprite].hitag))
source/duke3d/src/game.cpp:3847:        else if (pSprite->picnum != CRANEPOLE)
source/duke3d/src/astub.cpp:491:        case CRANEPOLE: case CRANE:
Usages for: CRANE
source/duke3d/src/actors.cpp:1798:        if (!FURY && PN(spriteNum) >= CRANE && PN(spriteNum) <= CRANE+3)
source/duke3d/src/actors.cpp:1833:                    pSprite->picnum = CRANE+1;
source/duke3d/src/actors.cpp:1847:                        if (pSprite->picnum > CRANE) pSprite->picnum--;
source/duke3d/src/actors.cpp:1857:                        if (pSprite->picnum > CRANE) pSprite->picnum--;
source/duke3d/src/actors.cpp:1877:                if (pSprite->picnum == CRANE+2)
source/duke3d/src/actors.cpp:1916:                if (pData[0]==8 && pSprite->picnum < (CRANE+2))
source/duke3d/src/actors.cpp:1959:                    pSprite->picnum = CRANE;
source/duke3d/src/actors.cpp:7818:                        if (!(sprite[sectSprite].picnum >= CRANE && sprite[sectSprite].picnum <= CRANE + 3))
source/duke3d/src/astub.cpp:491:        case CRANEPOLE: case CRANE:
Usages for: BARBROKE
Usages for: BLOODPOOL
source/duke3d/src/actors.cpp:2024:                    j = A_Spawn(spriteNum,BLOODPOOL);
source/duke3d/src/actors.cpp:4789:                            int const j = A_Spawn(spriteNum,BLOODPOOL);
source/duke3d/src/actors.cpp:4881:                    int const j = A_Spawn(spriteNum,BLOODPOOL);
source/duke3d/src/actors.cpp:5724:                        if (sprite[j].picnum == BLOODPOOL && ldist(pSprite, &sprite[j]) < 348)
source/duke3d/src/player.cpp:5748:                A_Spawn(pPlayer->actorsqu, BLOODPOOL);
source/duke3d/src/gameexec.cpp:1002:                A_Spawn(spriteNum,BLOODPOOL);
source/duke3d/src/premap.cpp:256:    tloadtile(BLOODPOOL, 1);
Usages for: NUKEBARREL
source/duke3d/src/game.cpp:2449:                else if (sprite[spriteNum].pal != 6 && sprite[spriteNum].picnum != NUKEBARREL && sprite[spriteNum].picnum != TIRE)
source/duke3d/src/game.cpp:2816:                if (sprite[spriteNum].picnum == NUKEBARREL)
Usages for: NUKEBARRELDENTED
Usages for: NUKEBARRELLEAKED
Usages for: CANWITHSOMETHING
Usages for: MONEY
source/duke3d/src/actors.cpp:5490:        if ((pSprite->picnum == MONEY+1) || (pSprite->picnum == MAIL+1) || (pSprite->picnum == PAPER+1))
source/duke3d/src/game.cpp:3863:        else if ((pSprite->picnum==MONEY+1) || (pSprite->picnum==MAIL+1) || (pSprite->picnum==PAPER+1))
source/duke3d/src/game.cpp:3882:            //case MONEY+1__STATIC:
source/duke3d/src/gameexec.cpp:3343:                A_SpawnMultiple(vm.spriteNum, MONEY, *insptr++);
source/duke3d/src/sector.cpp:1758:            A_SpawnMultiple(spriteNum, MONEY, 1 + (krand() & 7));
source/duke3d/src/sector.cpp:2132:            A_SpawnMultiple(spriteNum, MONEY, 4+(krand()&3));
source/duke3d/src/sector.cpp:3280:        A_SpawnMultiple(pPlayer->i, MONEY, 2);
Usages for: BANNER
Usages for: EXPLODINGBARREL
Usages for: EXPLODINGBARREL2
Usages for: FIREBARREL
Usages for: SEENINE
source/duke3d/src/actors.cpp:1702:                if (j == FIREEXT || j == RPG || j == RADIUSEXPLOSION || j == SEENINE || j == OOZFILTER)
source/duke3d/src/actors.cpp:2252:                                (sprite[j].picnum == OOZFILTER || sprite[j].picnum == SEENINE))
source/duke3d/src/actors.cpp:2293:                    if (pSprite->hitag == sprite[j].hitag && (sprite[j].picnum == OOZFILTER || sprite[j].picnum == SEENINE))
source/duke3d/src/actors.cpp:2314:            if (pSprite->picnum == OOZFILTER || pSprite->picnum == SEENINE || pSprite->picnum == SEENINEDEAD || pSprite->picnum == SEENINEDEAD+1)
source/duke3d/src/actors.cpp:2331:                        if (pSprite->hitag == sprite[j].hitag && (sprite[j].picnum == SEENINE || sprite[j].picnum == OOZFILTER))
source/duke3d/src/actors.cpp:2368:                                else if (pSprite->picnum == SEENINE)
source/duke3d/src/astub.cpp:490:        case SEENINE: case OOZFILTER:
source/duke3d/src/astub.cpp:10432:            case SEENINE :
Usages for: SEENINEDEAD
source/duke3d/src/actors.cpp:2314:            if (pSprite->picnum == OOZFILTER || pSprite->picnum == SEENINE || pSprite->picnum == SEENINEDEAD || pSprite->picnum == SEENINEDEAD+1)
source/duke3d/src/actors.cpp:2362:                            if (pSprite->picnum != (SEENINEDEAD+1))
source/duke3d/src/actors.cpp:2366:                                if (pSprite->picnum == SEENINEDEAD)
source/duke3d/src/actors.cpp:2369:                                    pSprite->picnum = SEENINEDEAD;
Usages for: STEAM
source/duke3d/src/actors.cpp:1714:                                if (sprite[j].picnum == CEILINGSTEAM || sprite[j].picnum == STEAM)
source/duke3d/src/sector.cpp:2273:        int newSprite = A_Spawn(spriteNum, STEAM);
Usages for: CEILINGSTEAM
source/duke3d/src/actors.cpp:1714:                                if (sprite[j].picnum == CEILINGSTEAM || sprite[j].picnum == STEAM)
Usages for: PIPE6B
source/duke3d/src/sector.cpp:2269:            PN(spriteNum)=PIPE6B;
Usages for: TRANSPORTERBEAM
source/duke3d/src/actors.cpp:3742:                                    A_Spawn(spriteNum, TRANSPORTERBEAM);
source/duke3d/src/actors.cpp:3776:                                    int const newSprite = A_Spawn(OW(spriteNum), TRANSPORTERBEAM);
source/duke3d/src/actors.cpp:3954:                                                    int newSprite = A_Spawn(spriteNum, TRANSPORTERBEAM);
source/duke3d/src/actors.cpp:3957:                                                    newSprite = A_Spawn(OW(spriteNum), TRANSPORTERBEAM);
source/duke3d/src/game.cpp:1652:            if (pSprite->picnum == TRANSPORTERBEAM)
source/duke3d/src/premap.cpp:258:    for (int i = TRANSPORTERBEAM; i < (TRANSPORTERBEAM+6); i++)
Usages for: RAT
source/duke3d/src/game.cpp:2084:                if (pSprite->picnum == RAT)
source/duke3d/src/game.cpp:6016:        BOSS1, BOSS2, BOSS3, BOSS4, RAT, ROTATEGUN };
Usages for: TRASH
Usages for: FEMPIC1
source/duke3d/src/premap.cpp:1145:                    w.picnum = (w.picnum == FEMPIC1) ? BLANKSCREEN : SCREENBREAK6;
Usages for: FEMPIC2
source/duke3d/src/sector.cpp:487:            if (animwall[animwallNum].tag >= 0 && wall[wallNum].extra != FEMPIC2 && wall[wallNum].extra != FEMPIC3)
Usages for: BLANKSCREEN
source/duke3d/src/savegame.cpp:2391:                    wall[animwall[i].wallnum].picnum = BLANKSCREEN;
source/duke3d/src/menus.cpp:3641:                    wall[animwall[x].wallnum].picnum = BLANKSCREEN;
source/duke3d/src/gameexec.cpp:6740:                    case FEMPIC1__STATIC: wall[animwall[x].wallnum].picnum = BLANKSCREEN; break;
source/duke3d/src/premap.cpp:1145:                    w.picnum = (w.picnum == FEMPIC1) ? BLANKSCREEN : SCREENBREAK6;
Usages for: PODFEM1
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: FEMPIC3
source/duke3d/src/sector.cpp:487:            if (animwall[animwallNum].tag >= 0 && wall[wallNum].extra != FEMPIC2 && wall[wallNum].extra != FEMPIC3)
Usages for: FEMPIC4
Usages for: FEM1
source/duke3d/src/astub.cpp:488:        case FEM1: case FEM2: case FEM3: case FEM4: case FEM5: case FEM6:
Usages for: FEM2
source/duke3d/src/astub.cpp:488:        case FEM1: case FEM2: case FEM3: case FEM4: case FEM5: case FEM6:
Usages for: FEM3
source/duke3d/src/astub.cpp:488:        case FEM1: case FEM2: case FEM3: case FEM4: case FEM5: case FEM6:
Usages for: FEM5
source/duke3d/src/astub.cpp:488:        case FEM1: case FEM2: case FEM3: case FEM4: case FEM5: case FEM6:
Usages for: BLOODYPOLE
Usages for: FEM4
source/duke3d/src/astub.cpp:488:        case FEM1: case FEM2: case FEM3: case FEM4: case FEM5: case FEM6:
Usages for: FEM6
source/duke3d/src/astub.cpp:488:        case FEM1: case FEM2: case FEM3: case FEM4: case FEM5: case FEM6:
Usages for: FEM6PAD
Usages for: FEM8
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: HELECOPT
source/duke3d/src/game.cpp:1761:            //                if(sp->picnum == HELECOPT || sp->picnum == DUKECAR) sp->xvel = 1024;
Usages for: FETUSJIB
Usages for: HOLODUKE
source/duke3d/src/astub.cpp:1049:    PRSTAT("HoloDuke =", HOLODUKE);
Usages for: SPACEMARINE
Usages for: INDY
Usages for: FETUS
Usages for: FETUSBROKE
source/duke3d/src/sector.cpp:2148:        PN(spriteNum) = FETUSBROKE;
Usages for: MONK
Usages for: LUKE
Usages for: COOLEXPLOSION1
source/duke3d/src/actors.cpp:3292:                if (pSprite->picnum == COOLEXPLOSION1)
source/duke3d/src/actors.cpp:3398:                    if (pSprite->picnum == COOLEXPLOSION1)
source/duke3d/src/actors.cpp:3578:                    if (pSprite->picnum != COOLEXPLOSION1)
source/duke3d/src/actors.cpp:3582:                if (pSprite->picnum == COOLEXPLOSION1)
source/duke3d/src/player.cpp:1301:            if (projecTile == COOLEXPLOSION1)
source/duke3d/src/premap.cpp:252:    for (int i = COOLEXPLOSION1; i < COOLEXPLOSION1+21; i++)
Usages for: WATERSPLASH2
source/duke3d/src/actors.cpp:488:            A_Spawn(spriteNum, WATERSPLASH2);
source/duke3d/src/actors.cpp:3680:        A_Spawn(playerNum, WATERSPLASH2);
source/duke3d/src/actors.cpp:3915:                                            int const newSprite = A_Spawn(sectSprite, WATERSPLASH2);
source/duke3d/src/actors.cpp:5155:                    A_Spawn(spriteNum,WATERSPLASH2);
source/duke3d/src/game.cpp:1615:            if (pSprite->picnum != WATERSPLASH2)
source/duke3d/src/game.cpp:4438:            t->picnum = WATERSPLASH2+T2(i);
Usages for: FIREVASE
Usages for: SCRATCH
Usages for: FEM7
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: APLAYERTOP
source/duke3d/src/player.cpp:4016:            if (actor[pPlayer->i].picnum != APLAYERTOP)
source/duke3d/src/game.cpp:7167:            actor[g_player[i].ps->i].picnum = APLAYERTOP;
source/duke3d/src/screens.cpp:604:                i = APLAYERTOP+(((int32_t) totalclock>>4)&3);
source/duke3d/src/screens.cpp:606:                i = APLAYERTOP;
Usages for: APLAYER
source/duke3d/src/actors.cpp:113:        if (sprite[pSprite->owner].picnum == pOther->picnum && pOther->picnum != APLAYER)
source/duke3d/src/actors.cpp:175:                 || (pSprite->picnum == FIREBALL && sprite[pSprite->owner].picnum == APLAYER)))
source/duke3d/src/actors.cpp:244:            if (pOther->picnum == APLAYER)
source/duke3d/src/actors.cpp:388:                if (pDamage->picnum == APLAYER)
source/duke3d/src/actors.cpp:1177:    if (pSprite->picnum == APLAYER)
source/duke3d/src/actors.cpp:1184:        if (pActor->owner >= 0 && (sprite[pActor->owner].picnum == APLAYER))
source/duke3d/src/actors.cpp:1209:            if (sprite[damageOwner].picnum == APLAYER && playerNum != P_Get(damageOwner))
source/duke3d/src/actors.cpp:3111:                        if (sprite[otherSprite].picnum == APLAYER)
source/duke3d/src/actors.cpp:3400:                        if ((moveSprite & 49152) == 49152 && sprite[moveSprite & (MAXSPRITES - 1)].picnum != APLAYER)
source/duke3d/src/actors.cpp:3412:                                if (A_CheckEnemySprite(&sprite[moveSprite]) || sprite[moveSprite].picnum == APLAYER)
source/duke3d/src/actors.cpp:3425:                            if (sprite[moveSprite].picnum == APLAYER)
source/duke3d/src/actors.cpp:4164:                    if (sprite[moveSprite].picnum == APLAYER)
source/duke3d/src/actors.cpp:5169:            if (sprite[pSprite->owner].picnum == APLAYER)
source/duke3d/src/actors.cpp:5286:                        if (sprite[pSprite->owner].picnum != APLAYER)
source/duke3d/src/actors.cpp:6111:            if (sprite[j].picnum == APLAYER && sprite[j].owner >= 0)
source/duke3d/src/actors.cpp:6343:                            if (sprite[p].picnum == APLAYER && sprite[p].owner >= 0)
source/duke3d/src/actors.cpp:6369:                            if (sprite[p].picnum == APLAYER && sprite[p].owner >= 0)
source/duke3d/src/actors.cpp:7510:                            if (sprite[sectSprite].picnum == APLAYER && sprite[sectSprite].owner >= 0 && g_player[P_Get(sectSprite)].ps->on_ground == 1)
source/duke3d/src/actors.cpp:7544:                            if (sprite[sectSprite].picnum == APLAYER && sprite[sectSprite].owner >= 0 &&g_player[P_Get(sectSprite)].ps->on_ground == 1)
source/duke3d/src/sounds.cpp:574:    if (PN(spriteNum) == APLAYER && P_Get(spriteNum) == screenpeek)
source/duke3d/src/sounds.cpp:586:        if (PN(spriteNum) == APLAYER && P_Get(spriteNum) == 1)
source/duke3d/src/sounds.cpp:685:        if ((g_netServer || ud.multimode > 1) && PN(spriteNum) == APLAYER && P_Get(spriteNum) != screenpeek) // other player sound
source/duke3d/src/player.cpp:195:    int const zOffset = (PN(spriteNum) == APLAYER) ? PHEIGHT : 0;
source/duke3d/src/player.cpp:212:    int const playerNum = pSprite->picnum == APLAYER ? P_GetP(pSprite) : -1;
source/duke3d/src/player.cpp:249:    int const isShrinker = (pSprite->picnum == APLAYER && PWEAPON(playerNum, g_player[playerNum].ps->curr_weapon, WorksLike) == SHRINKER_WEAPON);
source/duke3d/src/player.cpp:250:    int const isFreezer  = (pSprite->picnum == APLAYER && PWEAPON(playerNum, g_player[playerNum].ps->curr_weapon, WorksLike) == FREEZE_WEAPON);
source/duke3d/src/player.cpp:271:                if (A_CheckEnemySprite(&sprite[spriteNum]) || PN(spriteNum) == APLAYER)
source/duke3d/src/player.cpp:273:                    if (PN(spriteNum) == APLAYER && pSprite->picnum == APLAYER && pSprite != &sprite[spriteNum] &&
source/duke3d/src/player.cpp:296:                        if (pSprite->picnum == APLAYER)
source/duke3d/src/player.cpp:644:        if (!FURY && sprite[hitData->sprite].picnum == APLAYER &&
source/duke3d/src/player.cpp:753:        if (sprite[hitData->sprite].picnum != APLAYER)
source/duke3d/src/player.cpp:857:    int const           playerNum = (pSprite->picnum == APLAYER) ? P_GetP(pSprite) : -1;
source/duke3d/src/player.cpp:1661:    int const  playerNum = (pSprite->picnum == APLAYER) ? P_GetP(pSprite) : -1;
source/duke3d/src/player.h:365:// Get the player index given an APLAYER sprite pointer.
source/duke3d/src/player.h:387:// Get the player index given an APLAYER sprite index.
source/duke3d/src/network.cpp:1113:        bool              isAnyOtherPlayerSprite = (snapshotActor->spr_picnum == APLAYER) && (snapshotActor->spr_yvel > 0);
source/duke3d/src/game.cpp:1751:            if (spriteNum >= 0 && sprite[spriteNum].picnum == APLAYER)
source/duke3d/src/game.cpp:1821:                if (sprite[spriteNum].picnum == APLAYER)
source/duke3d/src/game.cpp:1867:                if (sprite[spriteNum].picnum == APLAYER)
source/duke3d/src/game.cpp:3837:        auto const ps = (pSprite->statnum != STAT_ACTOR && pSprite->picnum == APLAYER && pSprite->owner >= 0) ? g_player[P_GetP(pSprite)].ps : NULL;
source/duke3d/src/game.cpp:4109:                // Display APLAYER sprites with action PSTAND when viewed through
source/duke3d/src/game.cpp:4111:                const intptr_t *aplayer_scr = g_tile[APLAYER].execPtr;
source/duke3d/src/game.cpp:4294:                (A_CheckEnemySprite(pSprite) || A_CheckSpriteFlags(t->owner,SFLAG_NVG) || pSprite->picnum == APLAYER || pSprite->statnum == STAT_DUMMYPLAYER))
source/duke3d/src/game.cpp:4301:        if (pSprite->statnum == STAT_DUMMYPLAYER || A_CheckEnemySprite(pSprite) || A_CheckSpriteFlags(t->owner,SFLAG_SHADOW) || (pSprite->picnum == APLAYER && pSprite->owner >= 0))
source/duke3d/src/game.cpp:4455:                if (sprite[pSprite->owner].picnum == APLAYER)
source/duke3d/src/game.cpp:6207:        if (sprite[p.i].picnum == APLAYER && sprite[p.i].pal != 1)
source/duke3d/src/game.cpp:6219:        if (sprite[p.i].picnum == APLAYER && sprite[p.i].pal != 1)
source/duke3d/src/game.cpp:7093:                sprite[hitData.sprite].picnum == APLAYER)
source/duke3d/src/menus.cpp:2504:        rotatesprite_fs(origin.x + (260<<16), origin.y + ((24+(tilesiz[APLAYER].y>>1))<<16), 49152L,0,1441-((((4-((int32_t) totalclock>>4)))&3)*5),0,entry == &ME_PLAYER_TEAM ? G_GetTeamPalette(ud.team) : ud.color,10);
source/duke3d/src/gameexec.cpp:214:    if (pSector->lotag == ST_23_SWINGING_DOOR || (vm.pSprite->picnum == APLAYER && ud.noclip) ||
source/duke3d/src/gameexec.cpp:298:    if (pSprite->picnum != APLAYER && (AC_COUNT(actor[spriteNum].t_data)&63) > 2)
source/duke3d/src/gameexec.cpp:411:                || (hitspr->picnum == APLAYER && A_CheckEnemySprite(pSprite)))
source/duke3d/src/gameexec.cpp:417:        else if (pSprite->statnum == STAT_PROJECTILE && hitspr->picnum == APLAYER && pSprite->owner==florhit)
source/duke3d/src/gameexec.cpp:537:        int const goalAng = (sprite[vm.pSprite->owner].picnum == APLAYER)
source/duke3d/src/gameexec.cpp:680:    if (vm.pSprite->picnum != APLAYER)
source/duke3d/src/gameexec.cpp:796:        else if (vm.pSprite->picnum == APLAYER)
source/duke3d/src/gameexec.cpp:991:    if (A_CheckEnemySprite(pSprite) || (pSprite->picnum == APLAYER && pSprite->owner >= 0))
source/duke3d/src/gameexec.cpp:998:            if (!FURY && !(pSprite->picnum == APLAYER && pSprite->extra > 0) && pSprite->pal != 1 && pSprite->picnum != DRONE)
source/duke3d/src/gameexec.cpp:3197:                if (vm.pSprite->picnum == APLAYER)
source/duke3d/src/gameexec.cpp:3210:                // NOTE: assumes that current actor is APLAYER
source/duke3d/src/gameexec.cpp:3224:                if ((g_netServer || ud.multimode > 1) && vm.pSprite->picnum == APLAYER)
source/duke3d/src/gameexec.cpp:3229:                else if (vm.pSprite->picnum != APLAYER && vm.pPlayer->quick_kick == 0)
source/duke3d/src/gameexec.cpp:3239:                if ((vm.pSprite->picnum == APLAYER && vm.pSprite->yrepeat < 36) || *insptr < vm.pSprite->yrepeat
source/duke3d/src/gameexec.cpp:5056:                    = (vm.pSprite->picnum == APLAYER && (g_netServer || ud.multimode > 1))
source/duke3d/src/gameexec.cpp:5145:                if (vm.pSprite->picnum != APLAYER)
source/duke3d/src/sector.cpp:696:        if (sprite[spriteNum].picnum != APLAYER)
source/duke3d/src/sector.cpp:2382:            if (damageOwner >= 0 && sprite[damageOwner].picnum == APLAYER && PN(spriteNum) != ROTATEGUN && PN(spriteNum) != DRONE)
source/duke3d/src/sector.cpp:2417:            if (sprite[dmgSrc].picnum == FREEZEBLAST && ((PN(spriteNum) == APLAYER && sprite[spriteNum].pal == 1) || (g_freezerSelfDamage == 0 && sprite[dmgSrc].owner == spriteNum)))
source/duke3d/src/sector.cpp:2443:            if (sprite[actor[spriteNum].owner].picnum != APLAYER)
source/duke3d/src/sector.cpp:2526:                if (sprite[actor[spriteNum].owner].picnum != APLAYER)
source/duke3d/src/sector.cpp:3074:                                pPlayer->pos.z+(30<<8), APLAYER, -64, 0, 0, fix16_to_int(pPlayer->q16ang), 0, 0, -1, 10);
source/duke3d/src/sector.cpp:3184:    else if (PN(spriteNum) == APLAYER)
source/duke3d/src/astub.cpp:1050:    PRSTAT("Multi D  =", APLAYER);
source/duke3d/src/astub.cpp:10294:            case APLAYER :
source/duke3d/src/astub.cpp:10521:        case APLAYER :
source/duke3d/src/premap.cpp:1581:                       APLAYER,0,0,0,fix16_to_int(g_player[0].ps->q16ang),0,0,0,10);
Usages for: PLAYERONWATER
source/duke3d/src/player.cpp:5150:                            pPlayer->dummyplayersprite = A_Spawn(pPlayer->i,PLAYERONWATER);
Usages for: DUKELYINGDEAD
source/duke3d/src/actors.cpp:142:        pOther->picnum == TRIPBOMB || pOther->picnum == QUEBALL || pOther->picnum == STRIPEBALL || pOther->picnum == DUKELYINGDEAD ||
Usages for: DUKETORSO
source/duke3d/src/actors.cpp:5775:                        if (pSprite->picnum == DUKELEG || pSprite->picnum == DUKETORSO || pSprite->picnum == DUKEGUN)
Usages for: DUKEGUN
source/duke3d/src/actors.cpp:5775:                        if (pSprite->picnum == DUKELEG || pSprite->picnum == DUKETORSO || pSprite->picnum == DUKEGUN)
Usages for: DUKELEG
source/duke3d/src/actors.cpp:5775:                        if (pSprite->picnum == DUKELEG || pSprite->picnum == DUKETORSO || pSprite->picnum == DUKEGUN)
Usages for: SHARK
source/duke3d/src/actors.cpp:147:        if ((pSprite->picnum == SHRINKSPARK && pOther->picnum != SHARK && (otherSprite == pSprite->owner || pOther->xrepeat < 24))
source/duke3d/src/actors.cpp:3694:    return !!(A_CheckSpriteFlags(spriteNum, SFLAG_NOTELEPORT) || tileNum == SHARK || tileNum == COMMANDER || tileNum == OCTABRAIN
source/duke3d/src/player.cpp:280:                        && (PN(spriteNum) == SHARK || !(PN(spriteNum) >= GREENSLIME && PN(spriteNum) <= GREENSLIME + 7)))
source/duke3d/src/game.cpp:2057:                if (pSprite->picnum != SHARK)
source/duke3d/src/game.cpp:2094:                    if (pSprite->picnum != SHARK)
source/duke3d/src/game.cpp:6006:// Has to be after setting the dynamic names (e.g. SHARK).
source/duke3d/src/game.cpp:6011:        SHARK, RECON, DRONE,
source/duke3d/src/gameexec.cpp:782:                if (FURY || (vm.pSprite->picnum != DRONE && vm.pSprite->picnum != SHARK && vm.pSprite->picnum != COMMANDER))
source/duke3d/src/sector.cpp:2411:            if ((sprite[spriteNum].xrepeat < 24 || PN(spriteNum) == SHARK) && sprite[dmgSrc].picnum == SHRINKSPARK)
Usages for: BLOOD
source/duke3d/src/premap.cpp:266:    for (int i = BLOOD; i < (BLOOD+4); i++)
Usages for: FIRELASER
source/duke3d/src/actors.cpp:3378:                if (pSprite->picnum == FIRELASER)
source/duke3d/src/actors.cpp:3385:                                pSprite->z + ((k * ksgn(pSprite->zvel)) * klabs(pSprite->zvel / 24)), FIRELASER, -40 + (k << 2),
source/duke3d/src/actors.cpp:4540:                    A_Shoot(spriteNum, FIRELASER);
source/duke3d/src/actors.cpp:4580:                        A_Shoot(spriteNum,FIRELASER);
source/duke3d/src/actors.cpp:6883:                A_Shoot(spriteNum, FIRELASER);
source/duke3d/src/premap.cpp:276:    tloadtile(FIRELASER, 1);
Usages for: TRANSPORTERSTAR
source/duke3d/src/actors.cpp:3154:                                A_Spawn(spriteNum, TRANSPORTERSTAR);
source/duke3d/src/actors.cpp:3272:                    int const newSprite       = A_Spawn(spriteNum, TRANSPORTERSTAR);
source/duke3d/src/actors.cpp:3414:                                    int const newSprite       = A_Spawn(spriteNum, TRANSPORTERSTAR);
source/duke3d/src/actors.cpp:3444:                                A_Spawn(spriteNum, TRANSPORTERSTAR);
source/duke3d/src/actors.cpp:5091:                    A_Spawn(spriteNum, TRANSPORTERSTAR);
source/duke3d/src/sector.cpp:1050:                    int const j = A_Spawn(spriteNum, TRANSPORTERSTAR);
source/duke3d/src/premap.cpp:278:    for (int i = TRANSPORTERSTAR; i < TRANSPORTERSTAR+6; i++)
Usages for: SPIT
source/duke3d/src/actors.cpp:3392:                else if (pSprite->picnum == SPIT)
source/duke3d/src/actors.cpp:3430:                                if (pSprite->picnum == SPIT)
source/duke3d/src/actors.cpp:3438:                            if (pSprite->picnum != RPG && pSprite->picnum != FREEZEBLAST && pSprite->picnum != SPIT
source/duke3d/src/player.cpp:1290:            if (projecTile == SPIT)
Usages for: LOOGIE
source/duke3d/src/player.cpp:1760:                        256 - rotAng, LOOGIE, 0, 0, 2);
Usages for: FIST
source/duke3d/src/player.cpp:1824:                 fistZoom, 0, FIST, fistShade, fistPal, 2, wx[0], windowxy1.y, wx[1], windowxy2.y);
source/duke3d/src/player.cpp:2305:                FIST, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2307:            G_DrawTileScaled(weaponX + 40 - (pPlayer->look_ang >> 1), weaponY + 200 + (klabs(sintable[(fistPos)&2047] >> 8)), FIST,
Usages for: FREEZEBLAST
source/duke3d/src/actors.cpp:1202:        if (pActor->owner >= 0 && pSprite->extra <= 0 && pActor->picnum != FREEZEBLAST)
source/duke3d/src/actors.cpp:3375:                if ((moveSprite & 49152) != 49152 && pSprite->picnum != FREEZEBLAST)
source/duke3d/src/actors.cpp:3411:                            if (pSprite->picnum == FREEZEBLAST && sprite[moveSprite].pal == 1)
source/duke3d/src/actors.cpp:3438:                            if (pSprite->picnum != RPG && pSprite->picnum != FREEZEBLAST && pSprite->picnum != SPIT
source/duke3d/src/actors.cpp:3452:                                if (pSprite->picnum == FREEZEBLAST)
source/duke3d/src/actors.cpp:3472:                            if (pSprite->picnum == FREEZEBLAST)
source/duke3d/src/actors.cpp:4152:            if ((moveSprite & 49152) != 49152 && pSprite->picnum != FREEZEBLAST)
source/duke3d/src/actors.cpp:4728:                    if (damageTile == FREEZEBLAST)
source/duke3d/src/actors.cpp:4869:                if (damageTile == FREEZEBLAST)
source/duke3d/src/player.cpp:1384:            if (projecTile != FREEZEBLAST)
source/duke3d/src/player.cpp:1421:                else if (projecTile != FREEZEBLAST)
source/duke3d/src/gamevars.cpp:1248:    case FREEZEBLAST__STATIC: return FREEZEBLAST;
source/duke3d/src/sector.cpp:2356:    if ((sprite[dmgSrc].picnum == FREEZEBLAST || sprite[dmgSrc].owner != spriteNum) && sprite[spriteNum].statnum != STAT_PROJECTILE)
source/duke3d/src/sector.cpp:2368:                if (sprite[dmgSrc].picnum != FREEZEBLAST)
source/duke3d/src/sector.cpp:2417:            if (sprite[dmgSrc].picnum == FREEZEBLAST && ((PN(spriteNum) == APLAYER && sprite[spriteNum].pal == 1) || (g_freezerSelfDamage == 0 && sprite[dmgSrc].owner == spriteNum)))
source/duke3d/src/premap.cpp:289:    for (int i = FREEZEBLAST; i < FREEZEBLAST+3; i++)
Usages for: DEVISTATORBLAST
Usages for: SHRINKSPARK
source/duke3d/src/actors.cpp:126:        if (pSprite->picnum != SHRINKSPARK || (pOther->cstat&257))
source/duke3d/src/actors.cpp:147:        if ((pSprite->picnum == SHRINKSPARK && pOther->picnum != SHARK && (otherSprite == pSprite->owner || pOther->xrepeat < 24))
source/duke3d/src/actors.cpp:169:            || (pSprite->picnum == SHRINKSPARK)
source/duke3d/src/actors.cpp:182:        if (pSprite->picnum != SHRINKSPARK && (!WORLDTOUR || pSprite->picnum != LAVAPOOL))
source/duke3d/src/actors.cpp:1179:        if (ud.god && pActor->picnum != SHRINKSPARK)
source/duke3d/src/actors.cpp:1241:    if (pActor->extra == 0 && pActor->picnum == SHRINKSPARK && pSprite->xrepeat < 24)
source/duke3d/src/player.cpp:1564:                                                    SHRINKSPARK, -16, 28, 28, shootAng, 768, Zvel, spriteNum, 4);
source/duke3d/src/game.cpp:3971:            t->picnum = SHRINKSPARK+(((int32_t) totalclock>>4)&3);
source/duke3d/src/sector.cpp:2411:            if ((sprite[spriteNum].xrepeat < 24 || PN(spriteNum) == SHARK) && sprite[dmgSrc].picnum == SHRINKSPARK)
source/duke3d/src/sector.cpp:2440:            if (sprite[spriteNum].xrepeat < 24 && sprite[dmgSrc].picnum == SHRINKSPARK)
source/duke3d/src/premap.cpp:291:    for (int i = SHRINKSPARK; i < SHRINKSPARK+4; i++)
Usages for: TONGUE
Usages for: MORTER
source/duke3d/src/actors.cpp:148:            || (pSprite->picnum == MORTER && otherSprite == pSprite->owner))
source/duke3d/src/actors.cpp:5160:            if (pData[3] == 0 && (pSprite->picnum == BOUNCEMINE || pSprite->picnum == MORTER) && (moveSprite || playerDist < 844))
source/duke3d/src/premap.cpp:297:    for (int i = MORTER; i < MORTER+4; i++)
Usages for: SHRINKEREXPLOSION
source/duke3d/src/actors.cpp:3547:                            A_Spawn(spriteNum, SHRINKEREXPLOSION);
source/duke3d/src/game.cpp:2709:            else if (pSprite->picnum == SHRINKEREXPLOSION)
source/duke3d/src/premap.cpp:295:    for (int i = SHRINKEREXPLOSION; i < SHRINKEREXPLOSION+4; i++)
Usages for: RADIUSEXPLOSION
source/duke3d/src/actors.cpp:179:            dmgActor.picnum = RADIUSEXPLOSION;
source/duke3d/src/actors.cpp:241:        if (pOther->picnum != RADIUSEXPLOSION &&
source/duke3d/src/actors.cpp:1702:                if (j == FIREEXT || j == RPG || j == RADIUSEXPLOSION || j == SEENINE || j == OOZFILTER)
source/duke3d/src/actors.cpp:6175:                actor[findSprite].picnum = RADIUSEXPLOSION;
Usages for: FORCERIPPLE
source/duke3d/src/sector.cpp:1625:                int const i = A_InsertSprite(sectNum, vPos.x, vPos.y, vPos.z, FORCERIPPLE, -127, xRepeat, yRepeat, 0,
source/duke3d/src/premap.cpp:281:    for (int i = FORCERIPPLE; i < (FORCERIPPLE+9); i++)
Usages for: LIZTROOP
source/duke3d/src/actors.cpp:600:                    && (pSprite->picnum == LIZMAN || (pSprite->picnum == LIZTROOP && pSprite->zvel == 0)))
source/duke3d/src/game.cpp:6013:        LIZTROOPJETPACK, LIZTROOPSHOOT, LIZTROOPDUCKING, LIZTROOPRUNNING, LIZTROOP,
source/duke3d/src/game.cpp:6020:    int GreenSlimeFoodEnemies[] = { LIZTROOP, LIZMAN, PIGCOP, NEWBEAST };
source/duke3d/src/astub.cpp:1112:    LIZTROOP: case LIZTROOPRUNNING : case LIZTROOPSTAYPUT: case LIZTROOPSHOOT: \
source/duke3d/src/astub.cpp:1125:                numsprite[LIZTROOP]++;
source/duke3d/src/astub.cpp:1170:                numsprite[LIZTROOP]++;
source/duke3d/src/astub.cpp:1219:        PRSTAT(" Liztroop  =", LIZTROOP);
source/duke3d/src/astub.cpp:10275:            case LIZTROOP :
source/duke3d/src/astub.cpp:10501:        case LIZTROOP :
source/duke3d/src/premap.cpp:107:        for (int j = LIZTROOP; j < (LIZTROOP+72); j++) tloadtile(j,1);
Usages for: LIZTROOPRUNNING
source/duke3d/src/game.cpp:6013:        LIZTROOPJETPACK, LIZTROOPSHOOT, LIZTROOPDUCKING, LIZTROOPRUNNING, LIZTROOP,
source/duke3d/src/astub.cpp:1112:    LIZTROOP: case LIZTROOPRUNNING : case LIZTROOPSTAYPUT: case LIZTROOPSHOOT: \
source/duke3d/src/astub.cpp:10276:            case LIZTROOPRUNNING :
source/duke3d/src/astub.cpp:10502:        case LIZTROOPRUNNING :
Usages for: LIZTROOPSTAYPUT
source/duke3d/src/game.cpp:6012:        LIZTROOPONTOILET, LIZTROOPJUSTSIT, LIZTROOPSTAYPUT, LIZTROOPSHOOT,
source/duke3d/src/astub.cpp:1112:    LIZTROOP: case LIZTROOPRUNNING : case LIZTROOPSTAYPUT: case LIZTROOPSHOOT: \
source/duke3d/src/astub.cpp:10301:            case LIZTROOPSTAYPUT :
source/duke3d/src/astub.cpp:10527:        case LIZTROOPSTAYPUT :
Usages for: LIZTOP
Usages for: LIZTROOPSHOOT
source/duke3d/src/game.cpp:6012:        LIZTROOPONTOILET, LIZTROOPJUSTSIT, LIZTROOPSTAYPUT, LIZTROOPSHOOT,
source/duke3d/src/game.cpp:6013:        LIZTROOPJETPACK, LIZTROOPSHOOT, LIZTROOPDUCKING, LIZTROOPRUNNING, LIZTROOP,
source/duke3d/src/astub.cpp:1112:    LIZTROOP: case LIZTROOPRUNNING : case LIZTROOPSTAYPUT: case LIZTROOPSHOOT: \
source/duke3d/src/astub.cpp:10270:            case LIZTROOPSHOOT :
source/duke3d/src/astub.cpp:10496:        case LIZTROOPSHOOT :
Usages for: LIZTROOPJETPACK
source/duke3d/src/game.cpp:6013:        LIZTROOPJETPACK, LIZTROOPSHOOT, LIZTROOPDUCKING, LIZTROOPRUNNING, LIZTROOP,
source/duke3d/src/astub.cpp:1113:              case LIZTROOPJETPACK: case LIZTROOPONTOILET: case LIZTROOPDUCKING
source/duke3d/src/astub.cpp:10286:            case LIZTROOPJETPACK :
source/duke3d/src/astub.cpp:10512:        case LIZTROOPJETPACK :
Usages for: LIZTROOPDSPRITE
Usages for: LIZTROOPONTOILET
source/duke3d/src/game.cpp:6012:        LIZTROOPONTOILET, LIZTROOPJUSTSIT, LIZTROOPSTAYPUT, LIZTROOPSHOOT,
source/duke3d/src/astub.cpp:1113:              case LIZTROOPJETPACK: case LIZTROOPONTOILET: case LIZTROOPDUCKING
Usages for: LIZTROOPJUSTSIT
source/duke3d/src/game.cpp:6012:        LIZTROOPONTOILET, LIZTROOPJUSTSIT, LIZTROOPSTAYPUT, LIZTROOPSHOOT,
Usages for: LIZTROOPDUCKING
source/duke3d/src/game.cpp:6013:        LIZTROOPJETPACK, LIZTROOPSHOOT, LIZTROOPDUCKING, LIZTROOPRUNNING, LIZTROOP,
source/duke3d/src/astub.cpp:1113:              case LIZTROOPJETPACK: case LIZTROOPONTOILET: case LIZTROOPDUCKING
source/duke3d/src/astub.cpp:10263:            case LIZTROOPDUCKING :
source/duke3d/src/astub.cpp:10489:        case LIZTROOPDUCKING :
Usages for: HEADJIB1
source/duke3d/src/premap.cpp:108:        for (int j=HEADJIB1; j<LEGJIB1+3; j++) tloadtile(j,1);
Usages for: ARMJIB1
Usages for: LEGJIB1
source/duke3d/src/premap.cpp:108:        for (int j=HEADJIB1; j<LEGJIB1+3; j++) tloadtile(j,1);
Usages for: CANNON
Usages for: CANNONBALL
Usages for: CANNONBALLS
Usages for: OCTABRAIN
source/duke3d/src/actors.cpp:3694:    return !!(A_CheckSpriteFlags(spriteNum, SFLAG_NOTELEPORT) || tileNum == SHARK || tileNum == COMMANDER || tileNum == OCTABRAIN
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/game.cpp:6019:    int NoWaterDipEnemies[] = { OCTABRAIN, COMMANDER, DRONE };
source/duke3d/src/astub.cpp:1188:            case OCTABRAIN:
source/duke3d/src/astub.cpp:1190:                numsprite[OCTABRAIN]++;
source/duke3d/src/astub.cpp:1222:        PRSTAT(" Octabrain =", OCTABRAIN);
source/duke3d/src/astub.cpp:10265:            case OCTABRAIN :
source/duke3d/src/astub.cpp:10491:        case OCTABRAIN :
Usages for: OCTABRAINSTAYPUT
source/duke3d/src/astub.cpp:1189:            case OCTABRAINSTAYPUT:
Usages for: OCTATOP
Usages for: OCTADEADSPRITE
Usages for: INNERJAW
source/duke3d/src/actors.cpp:5487:        if (pSprite->picnum == INNERJAW+1)
source/duke3d/src/actors.cpp:5671:                //        case INNERJAW+1:
Usages for: DRONE
source/duke3d/src/game.cpp:4325:                                   pSprite->statnum == STAT_MISC || pSprite->picnum == DRONE || pSprite->picnum == COMMANDER)
source/duke3d/src/game.cpp:6011:        SHARK, RECON, DRONE,
source/duke3d/src/game.cpp:6019:    int NoWaterDipEnemies[] = { OCTABRAIN, COMMANDER, DRONE };
source/duke3d/src/gameexec.cpp:541:        if (vm.pSprite->xvel && vm.pSprite->picnum != DRONE)
source/duke3d/src/gameexec.cpp:696:            if (!FURY && (vm.pSprite->picnum == DRONE || vm.pSprite->picnum == COMMANDER) && vm.pSprite->extra > 0)
source/duke3d/src/gameexec.cpp:720:                    // The DRONE updates either .floorz or .ceilingz, not both.
source/duke3d/src/gameexec.cpp:782:                if (FURY || (vm.pSprite->picnum != DRONE && vm.pSprite->picnum != SHARK && vm.pSprite->picnum != COMMANDER))
source/duke3d/src/gameexec.cpp:995:            // I'm guessing this DRONE check is from a beta version of the game
source/duke3d/src/gameexec.cpp:998:            if (!FURY && !(pSprite->picnum == APLAYER && pSprite->extra > 0) && pSprite->pal != 1 && pSprite->picnum != DRONE)
source/duke3d/src/sector.cpp:2366:            if ((PN(spriteNum) != DRONE) && (PN(spriteNum) != ROTATEGUN) && (PN(spriteNum) != COMMANDER)
source/duke3d/src/sector.cpp:2382:            if (damageOwner >= 0 && sprite[damageOwner].picnum == APLAYER && PN(spriteNum) != ROTATEGUN && PN(spriteNum) != DRONE)
source/duke3d/src/astub.cpp:1192:            case RECON: case DRONE: case ROTATEGUN: case EGG: case ORGANTIC: case GREENSLIME:
source/duke3d/src/astub.cpp:1225:        PRSTAT(" Drone     =", DRONE);
source/duke3d/src/astub.cpp:10287:            case DRONE :
source/duke3d/src/astub.cpp:10513:        case DRONE :
Usages for: EXPLOSION2
source/duke3d/src/actors.cpp:1153:        if (PN(i) == EXPLOSION2 && sectNum == SECT(i))
source/duke3d/src/actors.cpp:2083:                    j = A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:2284:            j = A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:2300:                j = A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:2410:                        int const newSprite = A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:3513:                            int const newSprite = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:3558:                            int const newSprite       = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:3574:                        int ex = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:4116:                int const newSprite = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:4137:                int const newSprite = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:4276:                A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:4499:                    A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:4510:                    int const newSprite = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:5225:                    int const j = A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:6777:            //Flashing sector lights after reactor EXPLOSION2
source/duke3d/src/actors.cpp:7867:                        A_Spawn(spriteNum, EXPLOSION2);
source/duke3d/src/actors.cpp:8346:                k = A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/actors.cpp:8366:                k = A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/player.cpp:3578:            case HANDBOMB_WEAPON: A_Spawn(pPlayer->i, EXPLOSION2); break;
source/duke3d/src/game.cpp:2703:            if (pSprite->picnum == EXPLOSION2 || pSprite->picnum == EXPLOSION2BOT)
source/duke3d/src/game.cpp:4302:            if (t->statnum != TSPR_TEMP && pSprite->picnum != EXPLOSION2 && pSprite->picnum != HANGLIGHT && pSprite->picnum != DOMELITE && pSprite->picnum != HOTMEAT)
source/duke3d/src/game.cpp:4394:            if (t->picnum == EXPLOSION2)
source/duke3d/src/sector.cpp:2098:            A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/sector.cpp:2188:        A_Spawn(spriteNum,EXPLOSION2);
source/duke3d/src/premap.cpp:249:    for (int i = EXPLOSION2; i < EXPLOSION2+21; i++)
Usages for: COMMANDER
source/duke3d/src/actors.cpp:800:    if (pSprite->picnum == COMMANDER)
source/duke3d/src/actors.cpp:833:    if (s->picnum == COMMANDER)
source/duke3d/src/actors.cpp:3694:    return !!(A_CheckSpriteFlags(spriteNum, SFLAG_NOTELEPORT) || tileNum == SHARK || tileNum == COMMANDER || tileNum == OCTABRAIN
source/duke3d/src/player.cpp:1693:            if (A_CheckEnemySprite(pSprite) && PN(spriteNum) != COMMANDER)
source/duke3d/src/game.cpp:4325:                                   pSprite->statnum == STAT_MISC || pSprite->picnum == DRONE || pSprite->picnum == COMMANDER)
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/game.cpp:6019:    int NoWaterDipEnemies[] = { OCTABRAIN, COMMANDER, DRONE };
source/duke3d/src/gameexec.cpp:696:            if (!FURY && (vm.pSprite->picnum == DRONE || vm.pSprite->picnum == COMMANDER) && vm.pSprite->extra > 0)
source/duke3d/src/gameexec.cpp:698:                if (vm.pSprite->picnum == COMMANDER)
source/duke3d/src/gameexec.cpp:701:                    // NOTE: COMMANDER updates both actor[].floorz and
source/duke3d/src/gameexec.cpp:782:                if (FURY || (vm.pSprite->picnum != DRONE && vm.pSprite->picnum != SHARK && vm.pSprite->picnum != COMMANDER))
source/duke3d/src/sector.cpp:2366:            if ((PN(spriteNum) != DRONE) && (PN(spriteNum) != ROTATEGUN) && (PN(spriteNum) != COMMANDER)
source/duke3d/src/astub.cpp:1184:            case COMMANDER:
source/duke3d/src/astub.cpp:1186:                numsprite[COMMANDER]++;
source/duke3d/src/astub.cpp:1221:        PRSTAT(" Commander =", COMMANDER);
source/duke3d/src/astub.cpp:10288:            case COMMANDER :
source/duke3d/src/astub.cpp:10514:        case COMMANDER :
Usages for: COMMANDERSTAYPUT
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/astub.cpp:1185:            case COMMANDERSTAYPUT:
Usages for: RECON
source/duke3d/src/actors.cpp:1114:                                if (!FURY && pSprite->picnum == RECON)
source/duke3d/src/actors.cpp:1246:    if (pSprite->picnum != RECON && pSprite->owner >= 0 && sprite[pSprite->owner].statnum < MAXSTATUS)
source/duke3d/src/player.cpp:350://  2: do auto getangle only if not RECON (if clear, do unconditionally)
source/duke3d/src/player.cpp:382:        if (!(aimFlags&2) || sprite[returnSprite].picnum != RECON)
source/duke3d/src/game.cpp:4001:            t->picnum = RECON+frameOffset;
source/duke3d/src/game.cpp:6011:        SHARK, RECON, DRONE,
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/astub.cpp:1192:            case RECON: case DRONE: case ROTATEGUN: case EGG: case ORGANTIC: case GREENSLIME:
source/duke3d/src/astub.cpp:1224:        PRSTAT(" Recon Car =", RECON);
source/duke3d/src/astub.cpp:10290:            case RECON :
source/duke3d/src/astub.cpp:10516:        case RECON :
Usages for: TANK
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/astub.cpp:1193:            case BOSS2: case BOSS3: case TANK: case NEWBEAST: case NEWBEASTSTAYPUT: case BOSS4:
source/duke3d/src/astub.cpp:1236:        PRSTAT("Riot Tank =", TANK);
source/duke3d/src/astub.cpp:10289:            case TANK :
source/duke3d/src/astub.cpp:10515:        case TANK :
Usages for: PIGCOP
source/duke3d/src/actors.cpp:4512:                    A_Spawn(spriteNum, PIGCOP);
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/game.cpp:6020:    int GreenSlimeFoodEnemies[] = { LIZTROOP, LIZMAN, PIGCOP, NEWBEAST };
source/duke3d/src/astub.cpp:1172:            case PIGCOP: case PIGCOPSTAYPUT: case PIGCOPDIVE:
source/duke3d/src/astub.cpp:1173:                numsprite[PIGCOP]++;
source/duke3d/src/astub.cpp:1223:        PRSTAT(" PigCop    =", PIGCOP);
source/duke3d/src/astub.cpp:10277:            case PIGCOP :
source/duke3d/src/astub.cpp:10503:        case PIGCOP :
Usages for: PIGCOPSTAYPUT
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/astub.cpp:1172:            case PIGCOP: case PIGCOPSTAYPUT: case PIGCOPDIVE:
source/duke3d/src/astub.cpp:10299:            case PIGCOPSTAYPUT :
source/duke3d/src/astub.cpp:10525:        case PIGCOPSTAYPUT :
Usages for: PIGCOPDIVE
source/duke3d/src/game.cpp:6014:        OCTABRAIN, COMMANDER, COMMANDERSTAYPUT, PIGCOP, PIGCOPSTAYPUT, PIGCOPDIVE, EGG,
source/duke3d/src/astub.cpp:1172:            case PIGCOP: case PIGCOPSTAYPUT: case PIGCOPDIVE:
source/duke3d/src/astub.cpp:10266:            case PIGCOPDIVE :
source/duke3d/src/astub.cpp:10492:        case PIGCOPDIVE :
Usages for: PIGCOPDEADSPRITE
Usages for: PIGTOP
Usages for: LIZMAN
source/duke3d/src/actors.cpp:518:            else if (!FURY && pSprite->picnum == LIZMAN)
source/duke3d/src/actors.cpp:600:                    && (pSprite->picnum == LIZMAN || (pSprite->picnum == LIZTROOP && pSprite->zvel == 0)))
source/duke3d/src/actors.cpp:606:            // NOTE: in Duke3D, LIZMAN on water takes on random angle here.
source/duke3d/src/game.cpp:6015:        LIZMAN, LIZMANSPITTING, LIZMANJUMP, ORGANTIC,
source/duke3d/src/game.cpp:6020:    int GreenSlimeFoodEnemies[] = { LIZTROOP, LIZMAN, PIGCOP, NEWBEAST };
source/duke3d/src/astub.cpp:1175:            case LIZMAN: case LIZMANSTAYPUT: case LIZMANSPITTING: case LIZMANFEEDING: case LIZMANJUMP:
source/duke3d/src/astub.cpp:1176:                numsprite[LIZMAN]++;
source/duke3d/src/astub.cpp:1220:        PRSTAT(" Lizman    =", LIZMAN);
source/duke3d/src/astub.cpp:10278:            case LIZMAN :
source/duke3d/src/astub.cpp:10504:        case LIZMAN :
Usages for: LIZMANSTAYPUT
source/duke3d/src/astub.cpp:1175:            case LIZMAN: case LIZMANSTAYPUT: case LIZMANSPITTING: case LIZMANFEEDING: case LIZMANJUMP:
source/duke3d/src/astub.cpp:10300:            case LIZMANSTAYPUT:
source/duke3d/src/astub.cpp:10526:        case LIZMANSTAYPUT:
Usages for: LIZMANSPITTING
source/duke3d/src/game.cpp:6015:        LIZMAN, LIZMANSPITTING, LIZMANJUMP, ORGANTIC,
source/duke3d/src/astub.cpp:1175:            case LIZMAN: case LIZMANSTAYPUT: case LIZMANSPITTING: case LIZMANFEEDING: case LIZMANJUMP:
source/duke3d/src/astub.cpp:10302:            case LIZMANSPITTING :
source/duke3d/src/astub.cpp:10528:        case LIZMANSPITTING :
Usages for: LIZMANFEEDING
source/duke3d/src/astub.cpp:1175:            case LIZMAN: case LIZMANSTAYPUT: case LIZMANSPITTING: case LIZMANFEEDING: case LIZMANJUMP:
source/duke3d/src/astub.cpp:10303:            case LIZMANFEEDING :
source/duke3d/src/astub.cpp:10529:        case LIZMANFEEDING :
Usages for: LIZMANJUMP
source/duke3d/src/game.cpp:6015:        LIZMAN, LIZMANSPITTING, LIZMANJUMP, ORGANTIC,
source/duke3d/src/astub.cpp:1175:            case LIZMAN: case LIZMANSTAYPUT: case LIZMANSPITTING: case LIZMANFEEDING: case LIZMANJUMP:
source/duke3d/src/astub.cpp:10304:            case LIZMANJUMP :
source/duke3d/src/astub.cpp:10530:        case LIZMANJUMP :
Usages for: LIZMANDEADSPRITE
Usages for: FECES
source/duke3d/src/game.cpp:2450:                    pSprite->pal = (sprite[spriteNum].picnum == FECES) ? 7 : 2;  // Brown or red
Usages for: LIZMANHEAD1
source/duke3d/src/premap.cpp:144:        for (int j=LIZMANHEAD1; j<LIZMANLEG1+3; j++) tloadtile(j,1);
Usages for: LIZMANARM1
Usages for: LIZMANLEG1
source/duke3d/src/premap.cpp:144:        for (int j=LIZMANHEAD1; j<LIZMANLEG1+3; j++) tloadtile(j,1);
Usages for: EXPLOSION2BOT
source/duke3d/src/actors.cpp:3525:                                    A_Spawn(spriteNum, EXPLOSION2BOT);
source/duke3d/src/actors.cpp:5229:                        A_Spawn(spriteNum,EXPLOSION2BOT);
source/duke3d/src/game.cpp:2703:            if (pSprite->picnum == EXPLOSION2 || pSprite->picnum == EXPLOSION2BOT)
Usages for: USERWEAPON
Usages for: HEADERBAR
Usages for: JIBS1
source/duke3d/src/sector.cpp:2309:        A_DoGuts(spriteNum,JIBS1,1);
source/duke3d/src/premap.cpp:268:    for (int i = JIBS1; i < (JIBS5+5); i++)
Usages for: JIBS2
source/duke3d/src/actors.cpp:809:        if (PN(i) == JIBS2)
source/duke3d/src/sector.cpp:2310:        A_DoGuts(spriteNum,JIBS2,2);
Usages for: JIBS3
source/duke3d/src/sector.cpp:2311:        A_DoGuts(spriteNum,JIBS3,3);
source/duke3d/src/sector.cpp:2314:        A_DoGuts(spriteNum,JIBS3,6);
Usages for: JIBS4
source/duke3d/src/sector.cpp:2312:        A_DoGuts(spriteNum,JIBS4,4);
Usages for: JIBS5
source/duke3d/src/sector.cpp:2313:        A_DoGuts(spriteNum,JIBS5,1);
source/duke3d/src/premap.cpp:268:    for (int i = JIBS1; i < (JIBS5+5); i++)
Usages for: BURNING
source/duke3d/src/game.cpp:2716:            else if (pSprite->picnum == BURNING || pSprite->picnum == BURNING2)
source/duke3d/src/sector.cpp:2039:                A_Spawn(spriteNum,BURNING);
source/duke3d/src/premap.cpp:232:    for (int i = BURNING; i < BURNING+14; i++)
Usages for: FIRE
source/duke3d/src/gameexec.cpp:6439:                if (!FURY && EDUKE32_PREDICT_FALSE(g_scriptVersion == 13 && (vm.pSprite->picnum == FIRE || vm.pSprite->picnum == FIRE2)))
Usages for: JIBS6
source/duke3d/src/actors.cpp:5817:                    if (pSprite->picnum == JIBS6)
source/duke3d/src/actors.cpp:5829:                        pSprite->picnum = JIBS6;
source/duke3d/src/player.cpp:118:        A_DoGuts(pPlayer->i,JIBS6,8);
source/duke3d/src/player.cpp:649:            int jibSprite = A_Spawn(spriteNum, JIBS6);
source/duke3d/src/player.cpp:5747:                A_DoGuts(pPlayer->actorsqu, JIBS6, 7);
source/duke3d/src/gameexec.cpp:1000:                A_DoGuts(spriteNum,JIBS6,15);
source/duke3d/src/sector.cpp:2371:                        int const newSprite = A_Spawn(dmgSrc, JIBS6);
source/duke3d/src/premap.cpp:270:    for (int i = JIBS6; i < (JIBS6+8); i++)
Usages for: BLOODSPLAT1
source/duke3d/src/player.cpp:1128:            if (projecTile >= BLOODSPLAT1 && projecTile <= BLOODSPLAT4)
source/duke3d/src/sector.cpp:2156:            A_Shoot(spriteNum,BLOODSPLAT1);
source/duke3d/src/sector.cpp:2294:        A_Shoot(spriteNum,BLOODSPLAT1);
source/duke3d/src/sector.cpp:2302:        A_Shoot(spriteNum,BLOODSPLAT1);
source/duke3d/src/sector.cpp:2387:                        A_Shoot(spriteNum, BLOODSPLAT1);
Usages for: BLOODSPLAT3
source/duke3d/src/sector.cpp:2298:        A_Shoot(spriteNum,BLOODSPLAT3);
source/duke3d/src/sector.cpp:2306:        A_Shoot(spriteNum,BLOODSPLAT3);
source/duke3d/src/sector.cpp:2386:                        A_Shoot(spriteNum, BLOODSPLAT3);
Usages for: BLOODSPLAT2
source/duke3d/src/sector.cpp:2296:        A_Shoot(spriteNum,BLOODSPLAT2);
source/duke3d/src/sector.cpp:2304:        A_Shoot(spriteNum,BLOODSPLAT2);
source/duke3d/src/sector.cpp:2388:                        A_Shoot(spriteNum, BLOODSPLAT2);
Usages for: BLOODSPLAT4
source/duke3d/src/player.cpp:1128:            if (projecTile >= BLOODSPLAT1 && projecTile <= BLOODSPLAT4)
source/duke3d/src/sector.cpp:2300:        A_Shoot(spriteNum,BLOODSPLAT4);
source/duke3d/src/sector.cpp:2308:        A_Shoot(spriteNum,BLOODSPLAT4);
source/duke3d/src/sector.cpp:2389:                        A_Shoot(spriteNum, BLOODSPLAT4);
Usages for: OOZ
source/duke3d/src/gameexec.cpp:430:            && (FURY || (actor[spriteNum].picnum != OOZ && actor[spriteNum].picnum != OOZ2))
Usages for: OOZ2
source/duke3d/src/gameexec.cpp:430:            && (FURY || (actor[spriteNum].picnum != OOZ && actor[spriteNum].picnum != OOZ2))
Usages for: WALLBLOOD1
Usages for: WALLBLOOD2
Usages for: WALLBLOOD3
Usages for: WALLBLOOD4
Usages for: WALLBLOOD5
Usages for: WALLBLOOD6
Usages for: WALLBLOOD7
Usages for: WALLBLOOD8
Usages for: BURNING2
source/duke3d/src/game.cpp:2716:            else if (pSprite->picnum == BURNING || pSprite->picnum == BURNING2)
source/duke3d/src/premap.cpp:234:    for (int i = BURNING2; i < BURNING2+14; i++)
Usages for: FIRE2
source/duke3d/src/gameexec.cpp:6439:                if (!FURY && EDUKE32_PREDICT_FALSE(g_scriptVersion == 13 && (vm.pSprite->picnum == FIRE || vm.pSprite->picnum == FIRE2)))
Usages for: CRACKKNUCKLES
source/duke3d/src/player.cpp:2005:                     CRACKKNUCKLES + knuckleFrames[pPlayer->knuckle_incs >> 1], knuckleShade, 4 + DRAWEAP_CENTER,
source/duke3d/src/premap.cpp:237:    for (int i = CRACKKNUCKLES; i < CRACKKNUCKLES+4; i++)
Usages for: SMALLSMOKE
source/duke3d/src/actors.cpp:3315:                    int const newSprite = A_Spawn(spriteNum, SMALLSMOKE);
source/duke3d/src/actors.cpp:7862:                    k = A_Spawn(spriteNum, SMALLSMOKE);
source/duke3d/src/actors.cpp:8167:                                A_Spawn(j,SMALLSMOKE);
source/duke3d/src/player.cpp:1161:                Proj_HandleKnee(&hitData, spriteNum, playerNum, projecTile, shootAng, NULL, KNEE, 7, SMALLSMOKE, KICK_HIT);
source/duke3d/src/player.cpp:1189:                if (P_PostFireHitscan(playerNum, spawnedSprite, &hitData, spriteNum, projecTile, Zvel, -SMALLSMOKE, BULLETHOLE, SHOTSPARK1, 0) < 0)
source/duke3d/src/player.cpp:1194:                spawnedSprite = A_PostFireHitscan(&hitData, spriteNum, projecTile, Zvel, shootAng, G_DefaultActorHealthForTile(projecTile), -SMALLSMOKE,
source/duke3d/src/gamedef.cpp:6225:        (int16_t)SMALLSMOKE, -1, -1, 600, (int16_t)BULLETHOLE, -1, 0, 0,
source/duke3d/src/game.cpp:2711:            else if (pSprite->picnum == SMALLSMOKE || pSprite->picnum == ONFIRE)
source/duke3d/src/sector.cpp:1983:        A_Spawn(spriteNum,SMALLSMOKE);
source/duke3d/src/premap.cpp:261:    for (int i = SMALLSMOKE; i < (SMALLSMOKE+4); i++)
Usages for: SMALLSMOKEMAKER
Usages for: FLOORFLAME
Usages for: ROTATEGUN
source/duke3d/src/player.cpp:303:                        int const zOffset = (!FURY && (PN(spriteNum) == ORGANTIC || PN(spriteNum) == ROTATEGUN)) ? 0 : ZOFFSET5;
source/duke3d/src/player.cpp:349://  1: do sprite center adjustment (cen-=(8<<8)) for GREENSLIME or ROTATEGUN
source/duke3d/src/player.cpp:373:            ((pSprite->picnum >= GREENSLIME && pSprite->picnum <= GREENSLIME + 7) || pSprite->picnum == ROTATEGUN || pSprite->cstat & CSTAT_SPRITE_YCENTER))
source/duke3d/src/player.cpp:1689:        if (pSprite->picnum != ROTATEGUN)
source/duke3d/src/game.cpp:2109:            if (pSprite->picnum == ROTATEGUN)
source/duke3d/src/game.cpp:6016:        BOSS1, BOSS2, BOSS3, BOSS4, RAT, ROTATEGUN };
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/gameexec.cpp:694:        if (badguyp && (FURY || vm.pSprite->picnum != ROTATEGUN))
source/duke3d/src/sector.cpp:2366:            if ((PN(spriteNum) != DRONE) && (PN(spriteNum) != ROTATEGUN) && (PN(spriteNum) != COMMANDER)
source/duke3d/src/sector.cpp:2382:            if (damageOwner >= 0 && sprite[damageOwner].picnum == APLAYER && PN(spriteNum) != ROTATEGUN && PN(spriteNum) != DRONE)
source/duke3d/src/astub.cpp:1192:            case RECON: case DRONE: case ROTATEGUN: case EGG: case ORGANTIC: case GREENSLIME:
source/duke3d/src/astub.cpp:1226:        PRSTAT(" Turret    =", ROTATEGUN);
source/duke3d/src/astub.cpp:10519:        case ROTATEGUN :
Usages for: GREENSLIME
source/duke3d/src/actors.cpp:3695:              || (tileNum >= GREENSLIME && tileNum <= GREENSLIME + 7));
source/duke3d/src/actors.cpp:4042:        if (!FURY && pSprite->picnum > GREENSLIME && pSprite->picnum <= GREENSLIME+7)
source/duke3d/src/actors.cpp:4043:            switchPic = GREENSLIME;
source/duke3d/src/actors.cpp:4721:                pSprite->picnum = GREENSLIME + 2;
source/duke3d/src/actors.cpp:4819:                    pSprite->picnum = GREENSLIME + slimeFrames[pData[3]];
source/duke3d/src/actors.cpp:4834:                    pSprite->picnum = GREENSLIME + 5;
source/duke3d/src/actors.cpp:4901:                pSprite->picnum = GREENSLIME+4;
source/duke3d/src/actors.cpp:4927:                pSprite->picnum = GREENSLIME + 2 + (g_globalRandom & 1);
source/duke3d/src/actors.cpp:4977:                pSprite->picnum = GREENSLIME;
source/duke3d/src/actors.cpp:5031:                pSprite->picnum = GREENSLIME;
source/duke3d/src/actors.cpp:5047:                pSprite->picnum = GREENSLIME+1;
source/duke3d/src/player.cpp:280:                        && (PN(spriteNum) == SHARK || !(PN(spriteNum) >= GREENSLIME && PN(spriteNum) <= GREENSLIME + 7)))
source/duke3d/src/player.cpp:349://  1: do sprite center adjustment (cen-=(8<<8)) for GREENSLIME or ROTATEGUN
source/duke3d/src/player.cpp:373:            ((pSprite->picnum >= GREENSLIME && pSprite->picnum <= GREENSLIME + 7) || pSprite->picnum == ROTATEGUN || pSprite->cstat & CSTAT_SPRITE_YCENTER))
source/duke3d/src/game.cpp:1984:            if (pSprite->picnum == GREENSLIME)
source/duke3d/src/game.cpp:3731:        if (t->picnum < GREENSLIME || t->picnum > GREENSLIME+7)
source/duke3d/src/game.cpp:6022:    for (bssize_t i=GREENSLIME; i<=GREENSLIME+7; i++)
source/duke3d/src/sector.cpp:2367:                && (PN(spriteNum) < GREENSLIME || PN(spriteNum) > GREENSLIME + 7))
source/duke3d/src/astub.cpp:1192:            case RECON: case DRONE: case ROTATEGUN: case EGG: case ORGANTIC: case GREENSLIME:
source/duke3d/src/astub.cpp:1231:        PRSTAT("Slimer    =", GREENSLIME);
source/duke3d/src/astub.cpp:10297:            case GREENSLIME :
source/duke3d/src/astub.cpp:10524:        case GREENSLIME :
Usages for: WATERDRIPSPLASH
Usages for: SCRAP6
source/duke3d/src/actors.cpp:6023:        if (!FURY && PN(spriteNum) >= SCRAP6 && PN(spriteNum) <= SCRAP5+3)
source/duke3d/src/actors.cpp:6042:                    if (pSprite->picnum < SCRAP6 + 8)
source/duke3d/src/game.cpp:3861:        if ((pSprite->picnum >= SCRAP6) && (pSprite->picnum<=SCRAP6+7))
source/duke3d/src/macros.h:38:    SCRAP6+(krand()&15),-8,48,48,krand()&2047,(krand()&63)+64,-512-(krand()&2047),i,5)
Usages for: SCRAP1
source/duke3d/src/actors.cpp:6055:                if (pSprite->picnum == SCRAP1 && pSprite->yvel > 0 && pSprite->yvel < MAXUSERTILES)
source/duke3d/src/game.cpp:4187:            if (actor[i].picnum == BLIMP && t->picnum == SCRAP1 && pSprite->yvel >= 0)
source/duke3d/src/gameexec.cpp:4918:                                int const tileOffset = (vm.pSprite->picnum == BLIMP && debrisTile == SCRAP1) ? 0 : (krand() % 3);
source/duke3d/src/gameexec.cpp:4925:                                sprite[spriteNum].yvel = (vm.pSprite->picnum == BLIMP && debrisTile == SCRAP1) ? g_blimpSpawnItems[cnt % 14] : -1;
source/duke3d/src/sector.cpp:2077:            A_InsertSprite(SECT(spriteNum),SX(spriteNum),SY(spriteNum),SZ(spriteNum)-ZOFFSET3,SCRAP1+(krand()&15),-8,48,48,krand()&2047,(krand()&63)+64,-(krand()&4095)-(sprite[spriteNum].zvel>>2),spriteNum,5);
source/duke3d/src/sector.cpp:2096:                A_InsertSprite(SECT(spriteNum),SX(spriteNum),SY(spriteNum),sector[SECT(spriteNum)].floorz-ZOFFSET4-(j<<9),SCRAP1+(krand()&15),-8,64,64,
source/duke3d/src/premap.cpp:273:    for (int i = SCRAP1; i < (SCRAP1+29); i++)
Usages for: SCRAP2
Usages for: SCRAP3
source/duke3d/src/actors.cpp:2278:                                   SCRAP3 + (krand() & 3), -8, 48, 48, krand() & 2047, (krand() & 63) + 64,
source/duke3d/src/actors.cpp:4779:                            = A_InsertSprite(sectNum, pSprite->x, pSprite->y, pSprite->z - ZOFFSET3, SCRAP3 + (krand() & 3), -8, 48, 48,
source/duke3d/src/actors.cpp:4887:                    int const j = A_InsertSprite(sectNum, pSprite->x, pSprite->y, pSprite->z - ZOFFSET3, SCRAP3 + (krand() & 3), -8,
source/duke3d/src/sector.cpp:2062:                    A_InsertSprite(SECT(spriteNum), SX(spriteNum), SY(spriteNum), SZ(spriteNum) - (krand() % (48 << 8)), SCRAP3 + (krand() & 3), -8, 48, 48,
source/duke3d/src/sector.cpp:2219:        //            j = A_InsertSprite(SECT,SX,SY,SZ-(krand()%(48<<8)),SCRAP3+(krand()&3),-8,48,48,krand()&2047,(krand()&63)+64,-(krand()&4095)-(sprite[i].zvel>>2),i,5);
Usages for: SCRAP4
Usages for: SCRAP5
source/duke3d/src/actors.cpp:6023:        if (!FURY && PN(spriteNum) >= SCRAP6 && PN(spriteNum) <= SCRAP5+3)
source/duke3d/src/game.cpp:3862:            switchpic = SCRAP5;
Usages for: ORGANTIC
source/duke3d/src/player.cpp:303:                        int const zOffset = (!FURY && (PN(spriteNum) == ORGANTIC || PN(spriteNum) == ROTATEGUN)) ? 0 : ZOFFSET5;
source/duke3d/src/game.cpp:2098:                if (pSprite->picnum == ORGANTIC) pSprite->cstat |= 128;
source/duke3d/src/game.cpp:6015:        LIZMAN, LIZMANSPITTING, LIZMANJUMP, ORGANTIC,
source/duke3d/src/gameexec.cpp:738:            else if ((FURY && badguyp) || vm.pSprite->picnum != ORGANTIC)
source/duke3d/src/gameexec.cpp:744:                // All other actors besides ORGANTIC don't update .floorz or
source/duke3d/src/astub.cpp:1192:            case RECON: case DRONE: case ROTATEGUN: case EGG: case ORGANTIC: case GREENSLIME:
Usages for: BETAVERSION
source/duke3d/src/demo.cpp:946:                    rotatesprite_fs((320-50)<<16, 9<<16, 65536L, 0, BETAVERSION, 0, 0, 2+8+16+128);
source/duke3d/src/screens.cpp:1369:            rotatesprite_fs((320-50)<<16, 9<<16, 65536L, 0, BETAVERSION, 0, 0, 2+8+16+128);
Usages for: PLAYERISHERE
Usages for: PLAYERWASHERE
Usages for: SELECTDIR
source/duke3d/src/menus.cpp:5021:        int32_t scrollTileCursor = (ud.menu_scrollbartilenum >= 0) ? ud.menu_scrollbartilenum + 3 : SELECTDIR;
source/duke3d/src/menus.cpp:5904:    uint32_t const posx = tilesiz[SELECTDIR].y * SELECTDIR_z;
source/duke3d/src/menus.cpp:5906:    rotatesprite_(origin.x + posx, 0, SELECTDIR_z, 512, SELECTDIR,
source/duke3d/src/menus.cpp:5928:    vec2_t backbuttonbound = { ((tilesiz[SELECTDIR].y * SELECTDIR_z)>>17)<<16, tilesiz[SELECTDIR].x * SELECTDIR_z };
Usages for: F1HELP
source/duke3d/src/menus.cpp:2468:        rotatesprite_fs(origin.x + (MENU_MARGIN_CENTER<<16), origin.y + (100<<16), 65536L,0,F1HELP,0,0,10+64);
source/duke3d/src/screens.cpp:1004:            rotatesprite_fs(160<<16, 100<<16, 65536L, 0, F1HELP, 0, 0, 10+64);
Usages for: NOTCHON
Usages for: NOTCHOFF
Usages for: GROWSPARK
source/duke3d/src/player.cpp:1214:            int const otherSprite = A_InsertSprite(hitData.sect, hitData.pos.x, hitData.pos.y, hitData.pos.z, GROWSPARK, -16, 28, 28,
source/duke3d/src/game.cpp:3974:            t->picnum = GROWSPARK+(((int32_t) totalclock>>4)&3);
source/duke3d/src/gamevars.cpp:1249:    case GROWSPARK__STATIC: return GROWSPARK;
source/duke3d/src/premap.cpp:293:    for (int i = GROWSPARK; i < GROWSPARK+4; i++)
Usages for: DUKEICON
source/duke3d/src/screens.cpp:1279:                rotatesprite_win((160-j)<<16, 100L<<16, 65536L, 0, DUKEICON, 0, 0, 2+1);
Usages for: BADGUYICON
Usages for: FOODICON
Usages for: GETICON
Usages for: MENUSCREEN
source/duke3d/src/menus.cpp:114:    rotatesprite_fs(origin.x + (MENU_MARGIN_CENTER<<16), origin.y + (100<<16), 65536L,0,MENUSCREEN,16,0,10+64);
source/duke3d/src/premap.cpp:284:    for (int i = MENUSCREEN; i < DUKECAR; i++)
source/duke3d/src/screens.cpp:2160:    rotatesprite_fs(160<<16, 100<<16, 65536L, 0, MENUSCREEN, 16, 0, 2+8+64+BGSTRETCH);
source/duke3d/src/sbar.cpp:1036:        const int32_t MENUTILE = MENUSCREEN;//(videoGetRenderMode() == REND_CLASSIC ? MENUSCREEN : LOADSCREEN);
Usages for: MENUBAR
source/duke3d/src/menus.cpp:122:        rotatesprite_fs(origin.x + (MENU_MARGIN_CENTER<<16), origin.y + TopBarY, MF_Redfont.cursorScale, 0,MENUBAR,16,0,10);
Usages for: KILLSICON
source/duke3d/src/sbar.cpp:929:            rotatesprite_fs(sbarx(277+1), sbary(SBY+7-1), sb16, 0, KILLSICON, 0, 0, 10+16);
Usages for: FIRSTAID_ICON
source/duke3d/src/sbar.cpp:437:                rotatesprite_win(x, y, 65536L, 0, FIRSTAID_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:576:        int32_t iicons[8] = { -1, FIRSTAID_ICON, STEROIDS_ICON, HOLODUKE_ICON,
Usages for: HEAT_ICON
source/duke3d/src/sbar.cpp:449:                rotatesprite_win(x, y, 65536L, 0, HEAT_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:577:            JETPACK_ICON, HEAT_ICON, AIRTANK_ICON, BOOT_ICON };
Usages for: BOTTOMSTATUSBAR
source/duke3d/src/sbar.h:42:    return WORLDTOUR ? WIDESCREENSTATUSBAR : BOTTOMSTATUSBAR;
Usages for: BOOT_ICON
source/duke3d/src/sbar.cpp:455:                rotatesprite_win(x, y-(1<<16), 65536L, 0, BOOT_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:577:            JETPACK_ICON, HEAT_ICON, AIRTANK_ICON, BOOT_ICON };
Usages for: FRAGBAR
source/duke3d/src/premap.cpp:218:        tloadtile(FRAGBAR, 1);
source/duke3d/src/premap.cpp:569:        return ((j + 3) >> 2) * tilesiz[FRAGBAR].y;
source/duke3d/src/sbar.cpp:482:        rotatesprite_fs(0, (8*i)<<16, 65600, 0, FRAGBAR, 0, 0, orient);
Usages for: JETPACK_ICON
source/duke3d/src/sbar.cpp:446:                rotatesprite_win(x, y, 65536L, 0, JETPACK_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:577:            JETPACK_ICON, HEAT_ICON, AIRTANK_ICON, BOOT_ICON };
Usages for: AIRTANK_ICON
source/duke3d/src/sbar.cpp:452:                rotatesprite_win(x, y, 65536L, 0, AIRTANK_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:577:            JETPACK_ICON, HEAT_ICON, AIRTANK_ICON, BOOT_ICON };
Usages for: STEROIDS_ICON
source/duke3d/src/sbar.cpp:440:                rotatesprite_win(x+(1<<16), y, 65536L, 0, STEROIDS_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:576:        int32_t iicons[8] = { -1, FIRSTAID_ICON, STEROIDS_ICON, HOLODUKE_ICON,
Usages for: HOLODUKE_ICON
source/duke3d/src/sbar.cpp:443:                rotatesprite_win(x+(2<<16), y, 65536L, 0, HOLODUKE_ICON, 0, 0, 2+16);
source/duke3d/src/sbar.cpp:576:        int32_t iicons[8] = { -1, FIRSTAID_ICON, STEROIDS_ICON, HOLODUKE_ICON,
Usages for: ACCESS_ICON
source/duke3d/src/sbar.cpp:945:            if (p->got_access&4) rotatesprite_fs(sbarx(275), sbary(SBY+16), sb16, 0, ACCESS_ICON, 0, 23, 10+16);
source/duke3d/src/sbar.cpp:946:            if (p->got_access&2) rotatesprite_fs(sbarx(288), sbary(SBY+16), sb16, 0, ACCESS_ICON, 0, 21, 10+16);
source/duke3d/src/sbar.cpp:947:            if (p->got_access&1) rotatesprite_fs(sbarx(281), sbary(SBY+23), sb16, 0, ACCESS_ICON, 0, 0, 10+16);
Usages for: DIGITALNUM
source/duke3d/src/sbar.cpp:314:    G_DrawTXDigiNumZ(DIGITALNUM, sbarx16(x), yofs + sbary16(y), n, s, 0, cs|ROTATESPRITE_FULL16, 0, 0, xdim-1, ydim-1, sbarsc(65536L));
Usages for: DUKECAR
source/duke3d/src/game.cpp:1761:            //                if(sp->picnum == HELECOPT || sp->picnum == DUKECAR) sp->xvel = 1024;
source/duke3d/src/premap.cpp:284:    for (int i = MENUSCREEN; i < DUKECAR; i++)
Usages for: CAMCORNER
source/duke3d/src/screens.cpp:281:        rotatesprite_win(24<<16, 33<<16, 65536L, 0, CAMCORNER, 0, 0, 2);
source/duke3d/src/screens.cpp:282:        rotatesprite_win((320-26)<<16, 34<<16, 65536L, 0, CAMCORNER+1, 0, 0, 2);
source/duke3d/src/screens.cpp:283:        rotatesprite_win(22<<16, 163<<16, 65536L, 512, CAMCORNER+1, 0, 0, 2+4);
source/duke3d/src/screens.cpp:284:        rotatesprite_win((310-10)<<16, 163<<16, 65536L, 512, CAMCORNER+1, 0, 0, 2);
Usages for: CAMLIGHT
source/duke3d/src/screens.cpp:287:            rotatesprite_win(46<<16, 32<<16, 65536L, 0, CAMLIGHT, 0, 0, 2);
Usages for: LOGO
Usages for: TITLE
source/duke3d/src/common.cpp:891:        // Account for TITLE and REALMS swap between basepal number and on-disk order.
Usages for: NUKEWARNINGICON
Usages for: MOUSECURSOR
Usages for: SLIDEBAR
source/duke3d/src/menus.cpp:5414:                        const int32_t slidebarwidth = mulscale16(tilesiz[SLIDEBAR].x * ud.menu_slidebarz, z);
source/duke3d/src/menus.cpp:5415:                        const int32_t slidebarheight = mulscale16(tilesiz[SLIDEBAR].y * ud.menu_slidebarz, z);
source/duke3d/src/menus.cpp:5425:                        rotatesprite_ybounds(slidebarx, slidebary, mulscale16(ud.menu_slidebarz, z), 0, SLIDEBAR, s, p, 2|8|16, ydim_upper, ydim_lower);
source/duke3d/src/menus.cpp:5427:                        const int32_t slideregionwidth = mulscale16((tilesiz[SLIDEBAR].x * ud.menu_slidebarz) - (ud.menu_slidebarmargin<<1) - (tilesiz[SLIDEBAR+1].x * ud.menu_slidecursorz), z);
source/duke3d/src/menus.cpp:5429:                        const int32_t slidepointy = slidebary + mulscale16((((tilesiz[SLIDEBAR].y>>1) * ud.menu_slidebarz) - ((tilesiz[SLIDEBAR+1].y>>1) * ud.menu_slidecursorz)), z);
source/duke3d/src/menus.cpp:5431:                        rotatesprite_ybounds(slidepointx, slidepointy, mulscale16(ud.menu_slidecursorz, z), 0, SLIDEBAR+1, s, p, 2|8|16, ydim_upper, ydim_lower);
source/duke3d/src/menus.cpp:5467:                                const int32_t slidepointhalfwidth = mulscale16((((tilesiz[SLIDEBAR+1].x)*ud.menu_slidecursorz)>>1) + ud.menu_slidebarmargin, z);
source/duke3d/src/menus.cpp:5513:                        const int32_t slidebarwidth = mulscale16(tilesiz[SLIDEBAR].x * ud.menu_slidebarz, z);
source/duke3d/src/menus.cpp:5514:                        const int32_t slidebarheight = mulscale16(tilesiz[SLIDEBAR].y * ud.menu_slidebarz, z);
source/duke3d/src/menus.cpp:5524:                        rotatesprite_ybounds(slidebarx, slidebary, mulscale16(ud.menu_slidebarz, z), 0, SLIDEBAR, s, p, 2|8|16, ydim_upper, ydim_lower);
source/duke3d/src/menus.cpp:5526:                        const int32_t slideregionwidth = mulscale16((tilesiz[SLIDEBAR].x * ud.menu_slidebarz) - (ud.menu_slidebarmargin<<1) - (tilesiz[SLIDEBAR+1].x * ud.menu_slidecursorz), z);
source/duke3d/src/menus.cpp:5528:                        const int32_t slidepointy = slidebary + mulscale16(((tilesiz[SLIDEBAR].y>>1) * ud.menu_slidebarz) - ((tilesiz[SLIDEBAR+1].y>>1) * ud.menu_slidecursorz), z);
source/duke3d/src/menus.cpp:5530:                        rotatesprite_ybounds(slidepointx, slidepointy, mulscale16(ud.menu_slidecursorz, z), 0, SLIDEBAR+1, s, p, 2|8|16, ydim_upper, ydim_lower);
source/duke3d/src/menus.cpp:5566:                                const int32_t slidepointhalfwidth = mulscale16((((tilesiz[SLIDEBAR+1].x)*ud.menu_slidecursorz)>>1) + ud.menu_slidebarmargin, z);
source/duke3d/src/menus.cpp:5613:                        const int32_t slidebarwidth = mulscale16(tilesiz[SLIDEBAR].x * ud.menu_slidebarz, z);
source/duke3d/src/menus.cpp:5614:                        const int32_t slidebarheight = mulscale16(tilesiz[SLIDEBAR].y * ud.menu_slidebarz, z);
source/duke3d/src/menus.cpp:5624:                        rotatesprite_ybounds(slidebarx, slidebary, mulscale16(ud.menu_slidebarz, z), 0, SLIDEBAR, s, p, 2|8|16, ydim_upper, ydim_lower);
source/duke3d/src/menus.cpp:5626:                        const int32_t slideregionwidth = mulscale16((tilesiz[SLIDEBAR].x * ud.menu_slidebarz) - (ud.menu_slidebarmargin<<1) - (tilesiz[SLIDEBAR+1].x * ud.menu_slidecursorz), z);
source/duke3d/src/menus.cpp:5628:                        const int32_t slidepointy = slidebary + mulscale16(((tilesiz[SLIDEBAR].y)>>1 * ud.menu_slidebarz) - ((tilesiz[SLIDEBAR+1].y)>>1 * ud.menu_slidecursorz), z);
source/duke3d/src/menus.cpp:5630:                        rotatesprite_ybounds(slidepointx, slidepointy, mulscale16(ud.menu_slidecursorz, z), 0, SLIDEBAR+1, s, p, 2|8|16, ydim_upper, ydim_lower);
source/duke3d/src/menus.cpp:5666:                                const int32_t slidepointhalfwidth = mulscale16((((tilesiz[SLIDEBAR+1].x)*ud.menu_slidecursorz)>>1) + ud.menu_slidebarmargin, z);
source/duke3d/src/demo.cpp:865:                        rotatesprite(60<<16, 16<<16, 32768, 0, SLIDEBAR, 0, 0, 2+8+16+1024, 0, 0, (xdim*95)/320, ydim-1);
source/duke3d/src/demo.cpp:866:                        rotatesprite(90<<16, 16<<16, 32768, 0, SLIDEBAR, 0, 0, 2+8+16+1024, (xdim*95)/320, 0, (xdim*125)/320, ydim-1);
source/duke3d/src/demo.cpp:867:                        rotatesprite(120<<16, 16<<16, 32768, 0, SLIDEBAR, 0, 0, 2+8+16+1024, (xdim*125)/320, 0, (xdim*155)/320, ydim-1);
source/duke3d/src/demo.cpp:868:                        rotatesprite(150<<16, 16<<16, 32768, 0, SLIDEBAR, 0, 0, 2+8+16+1024, (xdim*155)/320, 0, xdim-1, ydim-1);
source/duke3d/src/demo.cpp:871:                        rotatesprite_fs(j, (16<<16)+(1<<15), 32768, 0, SLIDEBAR+1, 0, 0, 2+8+16+1024);
Usages for: DREALMS
source/duke3d/src/screens.cpp:1561:            rotatesprite_fs(160 << 16, 100 << 16, 65536L, 0, DREALMS, 0, 0, 2 + 8 + 64 + BGSTRETCH);
source/duke3d/src/screens.cpp:1563:            fadepaltile(0, 0, 0, 252, 0, -28, DREALMS);
source/duke3d/src/screens.cpp:1571:                    rotatesprite_fs(160 << 16, 100 << 16, 65536L, 0, DREALMS, 0, 0, 2 + 8 + 64 + BGSTRETCH);
source/duke3d/src/screens.cpp:1583:            fadepaltile(0, 0, 0, 0, 252, 28, DREALMS);
Usages for: BETASCREEN
source/duke3d/src/network.cpp:1560:    rotatesprite_fs(160 << 16, 100 << 16, 65536, 0, BETASCREEN, 0, 0, 2 + 8 + 64 + BGSTRETCH);
source/duke3d/src/screens.cpp:1598:    rotatesprite_fs(160 << 16, 100 << 16, 65536L, 0, BETASCREEN, 0, 0, 2 + 8 + 64 + BGSTRETCH);
source/duke3d/src/screens.cpp:1600:    fadepaltile(0, 0, 0, 252, 0, -28, BETASCREEN);
source/duke3d/src/screens.cpp:1612:            rotatesprite_fs(160 << 16, 100 << 16, 65536L, 0, BETASCREEN, 0, 0, 2 + 8 + 64 + BGSTRETCH);
Usages for: WINDOWBORDER1
source/duke3d/src/menus.cpp:2587:        rotatesprite_fs(origin.x + (99<<16), origin.y + (50<<16), 65536L,512,WINDOWBORDER1,24,0,10);
source/duke3d/src/menus.cpp:2588:        rotatesprite_fs(origin.x + (103<<16), origin.y + (144<<16), 65536L,1024+512,WINDOWBORDER1,24,0,10);
source/duke3d/src/menus.cpp:2650:        rotatesprite_fs(origin.x + (99<<16), origin.y + (50<<16), 65536L,512,WINDOWBORDER1,24,0,10);
source/duke3d/src/menus.cpp:2651:        rotatesprite_fs(origin.x + (103<<16), origin.y + (144<<16), 65536L,1024+512,WINDOWBORDER1,24,0,10);
Usages for: TEXTBOX
source/duke3d/src/menus.cpp:2581:            rotatesprite_fs(origin.x + ((160+64+91-64)<<16), origin.y + ((i+56)<<16), 65536L,0,TEXTBOX,24,0,10);
source/duke3d/src/menus.cpp:2644:            rotatesprite_fs(origin.x + ((160+64+91-64)<<16), origin.y + ((i+56)<<16), 65536L,0,TEXTBOX,24,0,10);
Usages for: WINDOWBORDER2
source/duke3d/src/menus.cpp:2585:        rotatesprite_fs(origin.x + (22<<16), origin.y + (97<<16), 65536L,0,WINDOWBORDER2,24,0,10);
source/duke3d/src/menus.cpp:2586:        rotatesprite_fs(origin.x + (180<<16), origin.y + (97<<16), 65536L,1024,WINDOWBORDER2,24,0,10);
source/duke3d/src/menus.cpp:2648:        rotatesprite_fs(origin.x + (22<<16), origin.y + (97<<16), 65536L,0,WINDOWBORDER2,24,0,10);
source/duke3d/src/menus.cpp:2649:        rotatesprite_fs(origin.x + (180<<16), origin.y + (97<<16), 65536L,1024,WINDOWBORDER2,24,0,10);
Usages for: DUKENUKEM
source/duke3d/src/network.cpp:1562:    rotatesprite_fs(160 << 16, (104) << 16, 60 << 10, 0, DUKENUKEM, 0, 0, 2 + 8);
source/duke3d/src/screens.cpp:1622:                    rotatesprite_fs(160 << 16, 104 << 16, ((int32_t) totalclock - 120) << 10, 0, DUKENUKEM, 0, 0, 2 + 8);
source/duke3d/src/screens.cpp:1625:                    rotatesprite_fs(160 << 16, (104) << 16, 60 << 10, 0, DUKENUKEM, 0, 0, 2 + 8);
source/duke3d/src/screens.cpp:1640:                    rotatesprite_fs(160 << 16, (104) << 16, 60 << 10, 0, DUKENUKEM, 0, 0, 2 + 8);
Usages for: THREEDEE
source/duke3d/src/network.cpp:1563:    rotatesprite_fs(160 << 16, (129) << 16, 30 << 11, 0, THREEDEE, 0, 0, 2 + 8);
source/duke3d/src/screens.cpp:1641:                    rotatesprite_fs(160 << 16, (129) << 16, ((int32_t) totalclock - 220) << 11, 0, THREEDEE, 0, 0, 2 + 8);
source/duke3d/src/screens.cpp:1644:                    rotatesprite_fs(160 << 16, (129) << 16, 30 << 11, 0, THREEDEE, 0, 0, 2 + 8);
Usages for: INGAMEDUKETHREEDEE
source/duke3d/src/menus.cpp:2497:            rotatesprite_fs(origin.x + (MENU_MARGIN_CENTER<<16), origin.y + ((28+l)<<16), 65536L,0,INGAMEDUKETHREEDEE,0,0,10);
source/duke3d/src/screens.cpp:2161:    rotatesprite_fs(160<<16, 34<<16, 65536L, 0, INGAMEDUKETHREEDEE, 0, 0, 10);
Usages for: TENSCREEN
source/duke3d/src/screens.cpp:1483:    rotatesprite_fs(160 << 16, 100 << 16, 65536L, 0, TENSCREEN, 0, 0, 2 + 8 + 64 + BGSTRETCH);
source/duke3d/src/screens.cpp:1484:    fadepaltile(0, 0, 0, 252, 0, -28, TENSCREEN);
source/duke3d/src/screens.cpp:1488:    fadepaltile(0, 0, 0, 0, 252, 28, TENSCREEN);
Usages for: PLUTOPAKSPRITE
source/duke3d/src/network.cpp:1565:        rotatesprite_fs(160 << 16, (151) << 16, 30 << 11, 0, PLUTOPAKSPRITE + 1, 0, 0, 2 + 8);
source/duke3d/src/menus.cpp:2499:                rotatesprite_fs(origin.x + ((MENU_MARGIN_CENTER+100)<<16), origin.y + (36<<16), 65536L,0,PLUTOPAKSPRITE+2,(sintable[((int32_t) totalclock<<4)&2047]>>11),0,2+8);
source/duke3d/src/screens.cpp:1654:                    rotatesprite_fs(160 << 16, (151) << 16, (410 - (int32_t) totalclock) << 12, 0, PLUTOPAKSPRITE + 1,
source/duke3d/src/screens.cpp:1669:                    rotatesprite_fs(160 << 16, (151) << 16, 30 << 11, 0, PLUTOPAKSPRITE + 1, (sintable[((int32_t) totalclock << 4) & 2047] >> 11), 0,
source/duke3d/src/screens.cpp:2163:        rotatesprite_fs((260)<<16, 36<<16, 65536L, 0, PLUTOPAKSPRITE+2, 0, 0, 2+8);
Usages for: DEVISTATOR
source/duke3d/src/player.cpp:2774:                                                       DEVISTATOR, weaponShade, weaponBits | 4, weaponPal);
source/duke3d/src/player.cpp:2776:                                                       DEVISTATOR + tileOffset, -32, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2781:                                                       DEVISTATOR + tileOffset, -32, weaponBits | 4, weaponPal);
source/duke3d/src/player.cpp:2782:                                G_DrawWeaponTileWithID(currentWeapon, weaponX + 268 - halfLookAng, weaponY + 238 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2793:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 268 - halfLookAng, weaponY + 238 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2795:                            G_DrawWeaponTileWithID(currentWeapon << 1, weaponX + 30 - halfLookAng, weaponY + 240 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2801:                        G_DrawWeaponTileWithID(currentWeapon, weaponX + 268 - halfLookAng, weaponY + 238 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2803:                        G_DrawWeaponTileWithID(currentWeapon << 1, weaponX + 30 - halfLookAng, weaponY + 240 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2822:                                               DEVISTATOR + tileOffset, -32, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2823:                        G_DrawWeaponTileWithID(currentWeapon << 1, weaponX + 30 - halfLookAng, weaponY + 240 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2830:                                               DEVISTATOR + tileOffset, -32, weaponBits | 4, weaponPal);
source/duke3d/src/player.cpp:2831:                        G_DrawWeaponTileWithID(currentWeapon, weaponX + 268 - halfLookAng, weaponY + 238 - weaponYOffset, DEVISTATOR,
source/duke3d/src/player.cpp:2837:                    G_DrawWeaponTileWithID(currentWeapon, weaponX + 268 - halfLookAng, weaponY + 238 - weaponYOffset, DEVISTATOR, weaponShade,
source/duke3d/src/player.cpp:2839:                    G_DrawWeaponTileWithID(currentWeapon << 1, weaponX + 30 - halfLookAng, weaponY + 240 - weaponYOffset, DEVISTATOR,
source/duke3d/src/premap.cpp:203:        for (int j=DEVISTATOR; j<=DEVISTATOR+1; j++) tloadtile(j,1);
Usages for: KNEE
source/duke3d/src/player.cpp:1109:            if (projecTile == KNEE)
source/duke3d/src/player.cpp:1161:                Proj_HandleKnee(&hitData, spriteNum, playerNum, projecTile, shootAng, NULL, KNEE, 7, SMALLSMOKE, KICK_HIT);
source/duke3d/src/player.cpp:1974:                     kneeY+280-(fix16_to_int(ps->q16horiz-ps->q16horizoff)>>4),KNEE,kneeShade,4+DRAWEAP_CENTER,kneePal);
source/duke3d/src/player.cpp:2281:                G_DrawTileScaled(weaponX + 80 - (pPlayer->look_ang >> 1), weaponY + 250 - weaponYOffset, KNEE, weaponShade,
source/duke3d/src/player.cpp:2284:                G_DrawTileScaled(weaponX + 160 - 16 - (pPlayer->look_ang >> 1), weaponY + 214 - weaponYOffset, KNEE + 1,
source/duke3d/src/player.cpp:2344:                    G_DrawTileScaled(weaponX + 220 - halfLookAng, weaponY + 250 - weaponYOffset, KNEE,
source/duke3d/src/player.cpp:2347:                    G_DrawTileScaled(weaponX + 160 - halfLookAng, weaponY + 214 - weaponYOffset, KNEE + 1,
source/duke3d/src/player.cpp:3452:            A_Shoot(pPlayer->i, KNEE);
source/duke3d/src/gamevars.cpp:1252:    case KNEE__STATIC: return KNEE;
Usages for: CROSSHAIR
source/duke3d/src/menus.cpp:7490:    if (tilesiz[CROSSHAIR].x > 0 && mousestatus)
source/duke3d/src/menus.cpp:7531:        int32_t a = VM_OnEventWithReturn(EVENT_DISPLAYCURSOR, g_player[screenpeek].ps->i, screenpeek, CROSSHAIR);
source/duke3d/src/screens.cpp:104:    tileLoad(CROSSHAIR);
source/duke3d/src/screens.cpp:106:    if (!waloff[CROSSHAIR])
source/duke3d/src/screens.cpp:109:    char const *ptr = (char const *) waloff[CROSSHAIR];
source/duke3d/src/screens.cpp:112:    int32_t ii = tilesiz[CROSSHAIR].x * tilesiz[CROSSHAIR].y;
source/duke3d/src/screens.cpp:140:    tileLoad(CROSSHAIR);
source/duke3d/src/screens.cpp:142:    if (!waloff[CROSSHAIR])
source/duke3d/src/screens.cpp:153:    char *ptr = (char *) waloff[CROSSHAIR];
source/duke3d/src/screens.cpp:155:    int32_t ii = tilesiz[CROSSHAIR].x * tilesiz[CROSSHAIR].y;
source/duke3d/src/screens.cpp:180:    tileInvalidate(CROSSHAIR, -1, -1);
source/duke3d/src/screens.cpp:1213:        int32_t a = VM_OnEventWithReturn(EVENT_DISPLAYCROSSHAIR, g_player[screenpeek].ps->i, screenpeek, CROSSHAIR);
source/duke3d/src/screens.cpp:1244:        int32_t a = VM_OnEventWithReturn(EVENT_DISPLAYPOINTER, g_player[screenpeek].ps->i, screenpeek, CROSSHAIR);
Usages for: FIRSTGUN
source/duke3d/src/player.cpp:2644:                                           FIRSTGUN + pistolFrames[*weaponFrame > 2 ? 0 : *weaponFrame], weaponShade, 2,
source/duke3d/src/player.cpp:2653:                int32_t const FIRSTGUN_5 = WORLDTOUR ? FIRSTGUNRELOADWIDE : FIRSTGUN + 5;
source/duke3d/src/player.cpp:2656:                    G_DrawWeaponTileWithID(currentWeapon, 194 - (pPlayer->look_ang >> 1), weaponY + 230 - weaponYOffset, FIRSTGUN + 4,
source/duke3d/src/player.cpp:2661:                                           weaponY + 130 - weaponYOffset + ((*weaponFrame) << 4), FIRSTGUN + 6, weaponShade,
source/duke3d/src/player.cpp:2669:                                           weaponY + 430 - weaponYOffset - ((*weaponFrame) << 3), FIRSTGUN + 6, weaponShade,
source/duke3d/src/player.cpp:2678:                                           FIRSTGUN + 8, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2685:                                           FIRSTGUN + 8, weaponShade, weaponBits, weaponPal);
source/duke3d/src/premap.cpp:240:    for (int i = FIRSTGUN; i < FIRSTGUN+3; i++)
Usages for: FIRSTGUNRELOAD
source/duke3d/src/premap.cpp:242:    tloadtile(FIRSTGUNRELOAD, 1);
source/duke3d/src/premap.cpp:243:    tloadtile(WORLDTOUR ? FIRSTGUNRELOADWIDE : FIRSTGUNRELOAD+1, 1);
source/duke3d/src/premap.cpp:244:    tloadtile(FIRSTGUNRELOAD+2, 1);
source/duke3d/src/premap.cpp:245:    tloadtile(FIRSTGUNRELOAD+4, 1);
Usages for: FALLINGCLIP
Usages for: CLIPINHAND
Usages for: HAND
Usages for: SHELL
source/duke3d/src/gamevars.cpp:1254:    case SHELL__STATIC: return SHELL;
source/duke3d/src/premap.cpp:246:    for (int i = SHELL; i < SHELL+2; i++)
Usages for: SHOTGUNSHELL
source/duke3d/src/game.cpp:1832:                    if (pSprite->picnum == SHOTGUNSHELL)
source/duke3d/src/gamevars.cpp:1255:    case SHOTGUNSHELL__STATIC: return SHOTGUNSHELL;
source/duke3d/src/premap.cpp:199:        tloadtile(SHOTGUNSHELL,1);
Usages for: CHAINGUN
source/duke3d/src/player.cpp:1913:        if (weaponTile >= CHAINGUN + 1 && weaponTile <= CHAINGUN + 4)
source/duke3d/src/player.cpp:2523:                            CHAINGUN+1,weaponShade,weaponBits,weaponPal);
source/duke3d/src/player.cpp:2528:                            CHAINGUN+2,weaponShade,weaponBits,weaponPal);
source/duke3d/src/player.cpp:2532:                    // 1) move weapon up/right, hand on clip (CHAINGUN - 17)
source/duke3d/src/player.cpp:2533:                    // 2) move weapon up/right, hand removing clip (CHAINGUN - 18)
source/duke3d/src/player.cpp:2534:                    // 3) hold weapon up/right, hand removed clip (CHAINGUN - 19)
source/duke3d/src/player.cpp:2535:                    // 4) hold weapon up/right, hand inserting clip (CHAINGUN - 18)
source/duke3d/src/player.cpp:2536:                    // 5) move weapon down/left, clip inserted (CHAINGUN - 17)
source/duke3d/src/player.cpp:2549:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 168 - halfLookAng, weaponY + 260 - weaponYOffset, CHAINGUN - 17,
source/duke3d/src/player.cpp:2557:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 168 - halfLookAng, weaponY + 260 - weaponYOffset, CHAINGUN - 18,
source/duke3d/src/player.cpp:2566:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 168 - halfLookAng, weaponY + 260 - weaponYOffset, CHAINGUN - 19,
source/duke3d/src/player.cpp:2575:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 168 - halfLookAng, weaponY + 260 - weaponYOffset, CHAINGUN - 18,
source/duke3d/src/player.cpp:2584:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 168 - halfLookAng, weaponY + 260 - weaponYOffset, CHAINGUN - 17,
source/duke3d/src/player.cpp:2596:                                           CHAINGUN + 1, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2606:                                               CHAINGUN + 5 + ((*weaponFrame - 4) / 5), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2610:                                               CHAINGUN + 5 + ((*weaponFrame - 4) / 5), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2618:                                               CHAINGUN + 5 + ((*weaponFrame - 2) / 5), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2620:                                               CHAINGUN + 1 + ((*weaponFrame) >> 1), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2624:                                               CHAINGUN + 1, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2630:                                       CHAINGUN, weaponShade, weaponBits, weaponPal);
source/duke3d/src/gamevars.cpp:1247:    case CHAINGUN__STATIC: return CHAINGUN;
source/duke3d/src/sector.cpp:1619:                else if (weaponNum == CHAINGUN)
source/duke3d/src/premap.cpp:172:        for (int j=CHAINGUN; j<=CHAINGUN+7; j++) tloadtile(j,1);
Usages for: RPGGUN
source/duke3d/src/player.cpp:2383:                            RPGGUN + ((*weaponFrame) >> 1), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2395:                G_DrawWeaponTileWithID(currentWeapon, weaponX + 164, (weaponY << 1) + 176 - weaponYOffset, WT_WIDE(RPGGUN), weaponShade,
source/duke3d/src/premap.cpp:175:        tloadtile(WT_WIDE(RPGGUN), 1);
source/duke3d/src/premap.cpp:176:        for (int j=RPGGUN+1; j<=RPGGUN+2; j++) tloadtile(j,1);
Usages for: RPGMUZZLEFLASH
Usages for: FREEZE
source/duke3d/src/player.cpp:2859:                                           WORLDTOUR ? FREEZEFIREWIDE : FREEZE + 2, -32, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2861:                                           FREEZE + 3 + freezerFrames[*weaponFrame % 6], -32, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2865:                                           WT_WIDE(FREEZE), weaponShade, weaponBits, weaponPal);
source/duke3d/src/premap.cpp:179:        tloadtile(WT_WIDE(FREEZE), 1);
source/duke3d/src/premap.cpp:180:        tloadtile(WORLDTOUR ? FREEZEFIREWIDE : FREEZE+2, 1);
source/duke3d/src/premap.cpp:181:        for (int j=FREEZE+3; j<=FREEZE+5; j++) tloadtile(j,1);
Usages for: CATLITE
Usages for: SHRINKER
source/duke3d/src/player.cpp:2905:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 188 - halfLookAng, weaponY + 240 - weaponYOffset, SHRINKER - 2,
source/duke3d/src/player.cpp:2911:                            G_DrawWeaponTileUnfadedWithID(currentWeapon << 1, weaponX + 184 - halfLookAng, weaponY + 240 - weaponYOffset, SHRINKER + 2,
source/duke3d/src/player.cpp:2913:                            G_DrawWeaponTileWithID(currentWeapon, weaponX + 188 - halfLookAng, weaponY + 240 - weaponYOffset, SHRINKER,
source/duke3d/src/player.cpp:2949:                                                  SHRINKER + 3 + ((*weaponFrame) & 3), -32, weaponBits, currentWeapon == GROW_WEAPON ? 2 : 0);
source/duke3d/src/player.cpp:2952:                                           SHRINKER + (currentWeapon == GROW_WEAPON ? -1 : 1), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2966:                                                  SHRINKER + 3 + ((*weaponFrame) & 3), -32, weaponBits, currentWeapon == GROW_WEAPON ? 2 : 0);
source/duke3d/src/player.cpp:2968:                                           WT_WIDE(SHRINKER) + (currentWeapon == GROW_WEAPON ? -1 : 1), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2973:                                                  SHRINKER + 2, 16 - (sintable[pPlayer->random_club_frame & 2047] >> 10), weaponBits,
source/duke3d/src/player.cpp:2976:                                           WT_WIDE(SHRINKER) + (currentWeapon == GROW_WEAPON ? -2 : 0), weaponShade, weaponBits, weaponPal);
source/duke3d/src/gamevars.cpp:1258:    case SHRINKER__STATIC: return SHRINKER;
source/duke3d/src/premap.cpp:186:        int32_t const tile = WT_WIDE(SHRINKER);
source/duke3d/src/premap.cpp:188:        for (int j=SHRINKER+2; j<=SHRINKER+5; j++) tloadtile(j,1);
Usages for: HANDHOLDINGLASER
source/duke3d/src/player.cpp:2207:                         HANDHOLDINGLASER + (pSprite->access_incs >> 3), accessShade, DRAWEAP_CENTER, accessPal);
source/duke3d/src/player.cpp:2361:                                           weaponY + 234 - weaponYOffset, HANDHOLDINGLASER + 3, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2364:                                       HANDHOLDINGLASER + ((*weaponFrame) >> 2), weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2367:                                       weaponY + 249 - weaponYOffset, HANDHOLDINGLASER + ((*weaponFrame) >> 2), weaponShade, weaponBits | 4,
source/duke3d/src/gamevars.cpp:1250:    case HANDHOLDINGLASER__STATIC: return HANDHOLDINGLASER;
source/duke3d/src/premap.cpp:196:        for (int j=HANDHOLDINGLASER; j<=HANDHOLDINGLASER+4; j++) tloadtile(j,1);
Usages for: TRIPBOMB
source/duke3d/src/actors.cpp:142:        pOther->picnum == TRIPBOMB || pOther->picnum == QUEBALL || pOther->picnum == STRIPEBALL || pOther->picnum == DUKELYINGDEAD ||
source/duke3d/src/actors.cpp:2052:        else if (!FURY && pSprite->picnum == TRIPBOMB)
source/duke3d/src/actors.cpp:7802:                        if (sprite[sectSprite].picnum == TRIPBOMB)
source/duke3d/src/player.cpp:1489:                int const spawnedSprite = A_InsertSprite(hitData.sect, hitData.pos.x, hitData.pos.y, hitData.pos.z, TRIPBOMB, -16, 4, 5,
source/duke3d/src/player.cpp:4245:                                if (sprite[spriteNum].picnum == TRIPBOMB && klabs(sprite[spriteNum].z - hitData.pos.z) < ZOFFSET4
source/duke3d/src/game.cpp:1464:            && s.picnum != SPEAKER && s.picnum != LETTER && s.picnum != DUCK && s.picnum != TARGET && s.picnum != TRIPBOMB
source/duke3d/src/premap.cpp:979:                // TRIPBOMB uses t_data[7] for its own purposes. Wouldn't be
source/duke3d/src/premap.cpp:981:                if ((ROTFIXSPR_STATNUMP(ss.statnum) && ss.picnum != TRIPBOMB)
Usages for: LASERLINE
source/duke3d/src/actors.cpp:2091:                        if (sprite[j].picnum == LASERLINE && pSprite->hitag == sprite[j].hitag)
source/duke3d/src/actors.cpp:2154:                        j = A_Spawn(spriteNum, LASERLINE);
source/duke3d/src/actors.cpp:2176:                        // this is a hack to work around the LASERLINE sprite's art tile offset
source/duke3d/src/actors.cpp:6341:                        if (sprite[p].picnum != LASERLINE)
source/duke3d/src/actors.cpp:6367:                        if (sprite[p].picnum != LASERLINE)
source/duke3d/src/screens.cpp:425:                if (spr->picnum == LASERLINE)
Usages for: HANDHOLDINGACCESS
source/duke3d/src/player.cpp:2212:                         accessY + 266 - (fix16_to_int(pSprite->q16horiz - pSprite->q16horizoff) >> 4), HANDHOLDINGACCESS, accessShade,
Usages for: HANDREMOTE
source/duke3d/src/player.cpp:2755:                                           HANDREMOTE + remoteFrames[(*weaponFrame)], weaponShade, weaponBits, weaponPal);
source/duke3d/src/premap.cpp:193:        for (int j=HANDREMOTE; j<=HANDREMOTE+5; j++) tloadtile(j,1);
Usages for: HANDTHROW
source/duke3d/src/player.cpp:2742:                                           HANDTHROW + pipebombFrames[(*weaponFrame)], weaponShade, weaponBits, weaponPal);
Usages for: TIP
source/duke3d/src/player.cpp:2174:                     TIP + ((26 - pPlayer->tipincs) >> 4), tipShade, DRAWEAP_CENTER, tipPal);
Usages for: GLAIR
Usages for: SCUBAMASK
source/duke3d/src/player.cpp:2123:        int scubaY = 200 - tilesiz[SCUBAMASK].y;
source/duke3d/src/player.cpp:2135:            G_DrawTileScaled(44, scubaY, SCUBAMASK, 0, 2 + 16 + DRAWEAP_CENTER, scubaPal);
source/duke3d/src/player.cpp:2137:        G_DrawTileScaled(43, scubaY, SCUBAMASK, 0, 2 + 16 + DRAWEAP_CENTER, scubaPal);
source/duke3d/src/player.cpp:2138:        G_DrawTileScaled(320 - 43, scubaY, SCUBAMASK, 0, 2 + 4 + 16 + DRAWEAP_CENTER, scubaPal);
Usages for: SPACEMASK
Usages for: FORCESPHERE
source/duke3d/src/actors.cpp:4400:                        int const newSprite        = A_Spawn(spriteNum, FORCESPHERE);
source/duke3d/src/actors.cpp:4428:                    if (sprite[miscSprite].owner == spriteNum && sprite[miscSprite].picnum == FORCESPHERE)
Usages for: SHOTSPARK1
source/duke3d/src/player.cpp:415:    int returnSprite = A_InsertSprite(hitData->sect, hitData->pos.x, hitData->pos.y, hitData->pos.z, SHOTSPARK1, -15,
source/duke3d/src/player.cpp:419:    sprite[returnSprite].yvel  = projecTile;  // This is a hack to allow you to detect which weapon spawned a SHOTSPARK1
source/duke3d/src/player.cpp:613:// Finish shooting hitscan weapon from player <p>. <k> is the inserted SHOTSPARK1.
source/duke3d/src/player.cpp:1189:                if (P_PostFireHitscan(playerNum, spawnedSprite, &hitData, spriteNum, projecTile, Zvel, -SMALLSMOKE, BULLETHOLE, SHOTSPARK1, 0) < 0)
source/duke3d/src/player.cpp:1195:                    SHOTSPARK1);
source/duke3d/src/gameexec.cpp:242:        vm.pActor->picnum = SHOTSPARK1;
source/duke3d/src/gameexec.cpp:1005:            actor[spriteNum].picnum = SHOTSPARK1;
source/duke3d/src/gamevars.cpp:1257:    case SHOTSPARK1__STATIC: return SHOTSPARK1;
source/duke3d/src/sector.cpp:2093:        if (sprite[dmgSrc].extra != G_DefaultActorHealthForTile(SHOTSPARK1))
source/duke3d/src/premap.cpp:263:    for (int i = SHOTSPARK1; i < (SHOTSPARK1+4); i++)
Usages for: RPG
source/duke3d/src/actors.cpp:165:            || pSprite->picnum == RPG
source/duke3d/src/actors.cpp:275:    if (!FURY && (pSprite->picnum == RPG && pSprite->xrepeat < 11))
source/duke3d/src/actors.cpp:1702:                if (j == FIREEXT || j == RPG || j == RADIUSEXPLOSION || j == SEENINE || j == OOZFILTER)
source/duke3d/src/actors.cpp:3299:                if (pSprite->picnum == RPG && sector[pSprite->sectnum].lotag == ST_2_UNDERWATER)
source/duke3d/src/actors.cpp:3311:                if (pSprite->picnum == RPG && actor[spriteNum].picnum != BOSS2 && pSprite->xrepeat >= 10
source/duke3d/src/actors.cpp:3366:                if (pSprite->picnum == RPG && (unsigned) pSprite->yvel < MAXSPRITES)  // RPG_YVEL
source/duke3d/src/actors.cpp:3438:                            if (pSprite->picnum != RPG && pSprite->picnum != FREEZEBLAST && pSprite->picnum != SPIT
source/duke3d/src/actors.cpp:3589:                else if (pSprite->picnum == RPG && sector[pSprite->sectnum].lotag == ST_2_UNDERWATER && pSprite->xrepeat >= 10 && rnd(140))
source/duke3d/src/actors.cpp:6490:                            A_Shoot(spriteNum,RPG);
source/duke3d/src/player.cpp:1352:                if (projecTile == RPG)
source/duke3d/src/player.cpp:1449:            pReturn->clipdist = (projecTile == RPG) ? 4 : 40;
source/duke3d/src/game.cpp:3986:            t->picnum = RPG+frameOffset;
source/duke3d/src/gamevars.cpp:1253:    case RPG__STATIC: return RPG;
source/duke3d/src/sector.cpp:2363:            if (sprite[dmgSrc].picnum == RPG)
source/duke3d/src/astub.cpp:1059:    PRSTAT("RPG      =", RPGSPRITE);
source/duke3d/src/astub.cpp:1073:    PRSTAT("RPG Box  =", RPGAMMO);
source/duke3d/src/premap.cpp:287:    for (int i = RPG; i < RPG+7; i++)
Usages for: LASERSITE
Usages for: SHOTGUN
source/duke3d/src/player.cpp:2416:                                               SHOTGUN, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2421:                                               SHOTGUN + 1, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2431:                                               SHOTGUN, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2442:                                               SHOTGUN + 2, -128, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2449:                                               SHOTGUN, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2458:                                               SHOTGUN + 1 + ((*(weaponFrame)-1) >> 1), -128, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2466:                                               SHOTGUN + 3, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2473:                                               SHOTGUN + 4, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2485:                                               SHOTGUN + 5, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2493:                                               SHOTGUN + 6, weaponShade, weaponBits, weaponPal);
source/duke3d/src/player.cpp:2501:                                               SHOTGUN + 4, weaponShade, weaponBits, weaponPal);
source/duke3d/src/gamevars.cpp:1256:    case SHOTGUN__STATIC: return SHOTGUN;
source/duke3d/src/premap.cpp:200:        for (int j=SHOTGUN; j<=SHOTGUN+6; j++) tloadtile(j,1);
Usages for: BOSS1
source/duke3d/src/actors.cpp:598:                || (!FURY && (pSprite->picnum == BOSS1 || pSprite->picnum == BOSS2) && sector[newSectnum].lotag == ST_1_ABOVE_WATER)
source/duke3d/src/player.cpp:527:    if (pSprite->picnum == BOSS1)
source/duke3d/src/player.cpp:530:    Proj_MaybeAddSpread(doSpread, zvel, shootAng, 256, 128 >> (uint8_t)(pSprite->picnum != BOSS1));
source/duke3d/src/game.cpp:2036:            if (pSprite->picnum == BOSS4STAYPUT || pSprite->picnum == BOSS1 || pSprite->picnum == BOSS2 ||
source/duke3d/src/game.cpp:6016:        BOSS1, BOSS2, BOSS3, BOSS4, RAT, ROTATEGUN };
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/astub.cpp:1114:#define CASES_BOSS1  BOSS1: case BOSS1STAYPUT: case BOSS1SHOOT: case BOSS1LOB: case BOSSTOP
source/duke3d/src/astub.cpp:1128:                multisprite[BOSS1]++;
source/duke3d/src/astub.cpp:1180:                    numsprite[BOSS1]++;
source/duke3d/src/astub.cpp:1182:                    multisprite[BOSS1]++;
source/duke3d/src/astub.cpp:1232:        PRSTAT("Boss1     =", BOSS1);
source/duke3d/src/astub.cpp:1233:        PrintStatus("MiniBoss1 =", multisprite[BOSS1], x, y+(yi++), multisprite[BOSS1]?11:7);
source/duke3d/src/astub.cpp:10279:            case BOSS1 :
source/duke3d/src/astub.cpp:10505:        case BOSS1 :
Usages for: BOSS1STAYPUT
source/duke3d/src/game.cpp:2037:                pSprite->picnum == BOSS1STAYPUT || pSprite->picnum == BOSS3 || pSprite->picnum == BOSS4 ||
source/duke3d/src/game.cpp:6041:        SETFLAG(BOSS1STAYPUT, SFLAG_NODAMAGEPUSH|SFLAG_HARDCODED_BADGUY);
source/duke3d/src/astub.cpp:1114:#define CASES_BOSS1  BOSS1: case BOSS1STAYPUT: case BOSS1SHOOT: case BOSS1LOB: case BOSSTOP
source/duke3d/src/astub.cpp:10306:            case BOSS1STAYPUT :
source/duke3d/src/astub.cpp:10532:        case BOSS1STAYPUT :
Usages for: BOSS1SHOOT
source/duke3d/src/astub.cpp:1114:#define CASES_BOSS1  BOSS1: case BOSS1STAYPUT: case BOSS1SHOOT: case BOSS1LOB: case BOSSTOP
source/duke3d/src/astub.cpp:10268:            case BOSS1SHOOT :
source/duke3d/src/astub.cpp:10494:        case BOSS1SHOOT :
Usages for: BOSS1LOB
source/duke3d/src/astub.cpp:1114:#define CASES_BOSS1  BOSS1: case BOSS1STAYPUT: case BOSS1SHOOT: case BOSS1LOB: case BOSSTOP
source/duke3d/src/astub.cpp:10269:            case BOSS1LOB :
source/duke3d/src/astub.cpp:10495:        case BOSS1LOB :
Usages for: BOSSTOP
source/duke3d/src/astub.cpp:1114:#define CASES_BOSS1  BOSS1: case BOSS1STAYPUT: case BOSS1SHOOT: case BOSS1LOB: case BOSSTOP
Usages for: BOSS2
source/duke3d/src/actors.cpp:597:                || (!FURY && pSprite->picnum == BOSS2 && pSprite->pal == 0 && sector[newSectnum].lotag != ST_3)
source/duke3d/src/actors.cpp:598:                || (!FURY && (pSprite->picnum == BOSS1 || pSprite->picnum == BOSS2) && sector[newSectnum].lotag == ST_1_ABOVE_WATER)
source/duke3d/src/actors.cpp:3311:                if (pSprite->picnum == RPG && actor[spriteNum].picnum != BOSS2 && pSprite->xrepeat >= 10
source/duke3d/src/player.cpp:1248:                    vel = (pSprite->picnum == BOSS2) ? 644 : 348;
source/duke3d/src/player.cpp:1305:                if (PN(spriteNum) == BOSS2)
source/duke3d/src/player.cpp:1362:                else if (PN(spriteNum) == BOSS2)
source/duke3d/src/player.cpp:1413:                else if (PN(spriteNum) == BOSS2)
source/duke3d/src/game.cpp:2036:            if (pSprite->picnum == BOSS4STAYPUT || pSprite->picnum == BOSS1 || pSprite->picnum == BOSS2 ||
source/duke3d/src/game.cpp:6016:        BOSS1, BOSS2, BOSS3, BOSS4, RAT, ROTATEGUN };
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/astub.cpp:1130:            case BOSS2:
source/duke3d/src/astub.cpp:1131:                multisprite[BOSS2]++;
source/duke3d/src/astub.cpp:1193:            case BOSS2: case BOSS3: case TANK: case NEWBEAST: case NEWBEASTSTAYPUT: case BOSS4:
source/duke3d/src/astub.cpp:1234:        PRSTAT("Boss2     =", BOSS2);
source/duke3d/src/astub.cpp:10280:            case BOSS2 :
source/duke3d/src/astub.cpp:10506:        case BOSS2 :
Usages for: BOSS3
source/duke3d/src/player.cpp:1360:                if (PN(spriteNum) == BOSS3)
source/duke3d/src/player.cpp:1396:                if (PN(spriteNum) == BOSS3)
source/duke3d/src/player.cpp:1595:                if (PN(spriteNum) == BOSS3 || PN(spriteNum) == BOSS3STAYPUT)
source/duke3d/src/game.cpp:2037:                pSprite->picnum == BOSS1STAYPUT || pSprite->picnum == BOSS3 || pSprite->picnum == BOSS4 ||
source/duke3d/src/game.cpp:6016:        BOSS1, BOSS2, BOSS3, BOSS4, RAT, ROTATEGUN };
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/astub.cpp:1133:            case BOSS3:
source/duke3d/src/astub.cpp:1134:                multisprite[BOSS3]++;
source/duke3d/src/astub.cpp:1193:            case BOSS2: case BOSS3: case TANK: case NEWBEAST: case NEWBEASTSTAYPUT: case BOSS4:
source/duke3d/src/astub.cpp:1235:        PRSTAT("Boss3     =", BOSS3);
source/duke3d/src/astub.cpp:10281:            case BOSS3 :
source/duke3d/src/astub.cpp:10507:        case BOSS3 :
Usages for: SPINNINGNUKEICON
source/duke3d/src/network.cpp:5076:        int32_t const fullwidth = width + textsc((tilesiz[SPINNINGNUKEICON].x << 15) + (2 << 16));
source/duke3d/src/network.cpp:5079:        int32_t const cursor_x = text_x + width + textsc((tilesiz[SPINNINGNUKEICON].x << 14) + (1 << 16));
source/duke3d/src/network.cpp:5080:        rotatesprite_fs(cursor_x, y, textsc(32768), 0, SPINNINGNUKEICON + (((int32_t) totalclock >> 3) % 7),
source/duke3d/src/menus.cpp:165:    Menu_DrawCursorCommon(x, y, z, VM_OnEventWithReturn(EVENT_MENUCURSORLEFT, -1, myconnectindex, SPINNINGNUKEICON+(((int32_t) totalclock>>3)%7)));
source/duke3d/src/menus.cpp:170:    Menu_DrawCursorCommon(x, y, z, VM_OnEventWithReturn(EVENT_MENUCURSORRIGHT, -1, myconnectindex, SPINNINGNUKEICON+6-((6+((int32_t) totalclock>>3))%7)));
source/duke3d/src/menus.cpp:179:    vec2_16_t const & siz = tilesiz[SPINNINGNUKEICON];
source/duke3d/src/menus.cpp:187:    Menu_DrawCursorTextTile(x, y, h, SPINNINGNUKEICON+(((int32_t) totalclock>>3)%7), siz, ydim_upper, ydim_lower);
Usages for: BIGFNTCURSOR
Usages for: SMALLFNTCURSOR
source/duke3d/src/osdfuncs.cpp:106:    int ac = (type) ? SMALLFNTCURSOR : '_' - '!' + STARTALPHANUM;
source/duke3d/src/menus.cpp:183:        Menu_DrawCursorTextTile(x, y, h, SMALLFNTCURSOR, tilesiz[SMALLFNTCURSOR], ydim_upper, ydim_lower);
source/duke3d/src/astub.cpp:3898:    sp->picnum = SMALLFNTCURSOR;
Usages for: STARTALPHANUM
source/duke3d/src/osdfuncs.cpp:41:#define OSDCHAR_WIDTH (tilesiz[STARTALPHANUM + 'A' - '!'].x)
source/duke3d/src/osdfuncs.cpp:42:#define OSDCHAR_HEIGHT (tilesiz[STARTALPHANUM + 'A' - '!'].y + 1)
source/duke3d/src/osdfuncs.cpp:51:    const int ac = ch-'!'+STARTALPHANUM;
source/duke3d/src/osdfuncs.cpp:52:    return (ac < STARTALPHANUM || ac > ENDALPHANUM) ? -1 : ac;
source/duke3d/src/osdfuncs.cpp:106:    int ac = (type) ? SMALLFNTCURSOR : '_' - '!' + STARTALPHANUM;
source/duke3d/src/menus.cpp:1782:    if ((unsigned)MF_Bluefont.tilenum >= MAXTILES) MF_Bluefont.tilenum = STARTALPHANUM;
source/duke3d/src/astub.cpp:9564:                // maprange <start ascii num> <end ascii num> <start tilenum>, e.g. map 33 126 STARTALPHANUM
source/duke3d/src/astub.cpp:9565:                // maprangea <start char> <end char> <start tilenum>, e.g. map "!" "~" STARTALPHANUM
source/duke3d/src/premap.cpp:222:    for (int i = STARTALPHANUM; i < ENDALPHANUM+1; i++)
source/duke3d/src/text.cpp:91:    TileFontPtr_t tilefont_STARTALPHANUM = tilefontGetPtr(STARTALPHANUM);
source/duke3d/src/text.cpp:97:        tilefontMaybeDefineMapping(tilefont_STARTALPHANUM, chr32, STARTALPHANUM + i);
Usages for: ENDALPHANUM
source/duke3d/src/osdfuncs.cpp:52:    return (ac < STARTALPHANUM || ac > ENDALPHANUM) ? -1 : ac;
source/duke3d/src/premap.cpp:222:    for (int i = STARTALPHANUM; i < ENDALPHANUM+1; i++)
Usages for: BIGALPHANUM
source/duke3d/src/menus.cpp:1781:    if ((unsigned)MF_Redfont.tilenum >= MAXTILES) MF_Redfont.tilenum = BIGALPHANUM;
source/duke3d/src/premap.cpp:224:    for (int i = BIGALPHANUM-11; i < BIGALPHANUM+82; i++)
source/duke3d/src/text.cpp:44:    TileFontPtr_t tilefont_BIGALPHANUM = tilefontGetPtr(BIGALPHANUM);
source/duke3d/src/text.cpp:51:        tilefontMaybeDefineMapping(tilefont_BIGALPHANUM, chr32, BIGALPHANUM + i + j);
source/duke3d/src/text.cpp:58:        tilefontMaybeDefineMapping(tilefont_BIGALPHANUM, chr32, BIGALPHANUM + i + j);
source/duke3d/src/text.cpp:65:        tilefontMaybeDefineMapping(tilefont_BIGALPHANUM, chr32, BIGALPHANUM + i + j);
source/duke3d/src/text.cpp:70:        { '-', BIGALPHANUM - 11, },
source/duke3d/src/text.cpp:71:        { '_', BIGALPHANUM - 11, },
source/duke3d/src/text.cpp:78:        { '\\', BIGALPHANUM + 68, },
source/duke3d/src/text.cpp:79:        { '/', BIGALPHANUM + 68, },
source/duke3d/src/text.cpp:80:        { '%', BIGALPHANUM + 69, },
source/duke3d/src/text.cpp:123:            return font + (BIGPERIOD - (BIGALPHANUM + offset));
source/duke3d/src/text.cpp:125:            return font + (BIGCOMMA - (BIGALPHANUM + offset));
source/duke3d/src/text.cpp:127:            return font + (BIGX_ - (BIGALPHANUM + offset));
source/duke3d/src/text.cpp:129:            return font + (BIGQ - (BIGALPHANUM + offset));
source/duke3d/src/text.cpp:131:            return font + (BIGSEMI - (BIGALPHANUM + offset));
source/duke3d/src/text.cpp:133:            return font + (BIGCOLIN - (BIGALPHANUM + offset));
source/duke3d/src/text.cpp:142:            return font + (BIGAPPOS - (BIGALPHANUM + offset));
source/duke3d/src/screens.cpp:1318:                i -= sbarsc(ud.althud ? (tilesiz[BIGALPHANUM].y+8)<<16 : tilesiz[INVENTORYBOX].y<<16);
source/duke3d/src/sbar.cpp:415:            y -= invensc(tilesiz[BIGALPHANUM].y+10); // slide on the y-axis
Usages for: BIGPERIOD
source/duke3d/src/text.cpp:72:        { '.', BIGPERIOD, },
source/duke3d/src/text.cpp:123:            return font + (BIGPERIOD - (BIGALPHANUM + offset));
Usages for: BIGCOMMA
source/duke3d/src/text.cpp:73:        { ',', BIGCOMMA, },
source/duke3d/src/text.cpp:125:            return font + (BIGCOMMA - (BIGALPHANUM + offset));
Usages for: BIGX
Usages for: BIGQ
source/duke3d/src/text.cpp:75:        { '?', BIGQ, },
source/duke3d/src/text.cpp:129:            return font + (BIGQ - (BIGALPHANUM + offset));
Usages for: BIGSEMI
source/duke3d/src/text.cpp:76:        { ';', BIGSEMI, },
source/duke3d/src/text.cpp:131:            return font + (BIGSEMI - (BIGALPHANUM + offset));
Usages for: BIGCOLIN
source/duke3d/src/text.cpp:77:        { ':', BIGCOLIN, },
source/duke3d/src/text.cpp:133:            return font + (BIGCOLIN - (BIGALPHANUM + offset));
Usages for: THREEBYFIVE
source/duke3d/src/sbar.cpp:110:                rotatesprite_fs(sbarx(x+(-4+4*i)+1), sbyp1, sbscale, 0, THREEBYFIVE+dabuf[i]-'0',
source/duke3d/src/sbar.cpp:115:            rotatesprite_fs(sbarx(x+(-4+4*i)), sby, sbscale, 0, THREEBYFIVE+dabuf[i]-'0', ha, 0, sbits);
source/duke3d/src/sbar.cpp:123:            rotatesprite_fs(sbarx(x+1), sbyp1, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', 127, 4, POLYMOSTTRANS|sbits);
source/duke3d/src/sbar.cpp:124:            rotatesprite_fs(sbarx(x+4+1), sbyp1, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', 127, 4, POLYMOSTTRANS|sbits);
source/duke3d/src/sbar.cpp:127:        rotatesprite_fs(sbarx(x), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, sbits);
source/duke3d/src/sbar.cpp:128:        rotatesprite_fs(sbarx(x+4), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, sbits);
source/duke3d/src/sbar.cpp:132:    rotatesprite_fs(sbarx(x+4+1), sbyp1, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 4, sbits);
source/duke3d/src/sbar.cpp:133:    rotatesprite_fs(sbarx(x+4), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, sbits);
source/duke3d/src/sbar.cpp:143:    rotatesprite_fs(sbarx(x-7), sby, sbscale, 0, THREEBYFIVE+ind+1, ha-10, 7, 10);
source/duke3d/src/sbar.cpp:144:    rotatesprite_fs(sbarx(x-3), sby, sbscale, 0, THREEBYFIVE+10, ha, 0, 10);
source/duke3d/src/sbar.cpp:152:    rotatesprite_fs(sbarx(x+9), sby, sbscale, 0, THREEBYFIVE+11, ha, 0, 10);
source/duke3d/src/sbar.cpp:160:        rotatesprite_fs(sbarx(x), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:161:        rotatesprite_fs(sbarx(x+4), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:163:    else rotatesprite_fs(sbarx(x+4), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:168:        rotatesprite_fs(sbarx(x+13), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:169:        rotatesprite_fs(sbarx(x+17), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:172:    rotatesprite_fs(sbarx(x+13), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:182:    rotatesprite_fs(sbarx(x-7), sby, sbscale, 0, THREEBYFIVE+ind+1, ha-10, 7, 10);
source/duke3d/src/sbar.cpp:183:    rotatesprite_fs(sbarx(x-4), sby, sbscale, 0, THREEBYFIVE+10, ha, 0, 10);
source/duke3d/src/sbar.cpp:184:    rotatesprite_fs(sbarx(x+13), sby, sbscale, 0, THREEBYFIVE+11, ha, 0, 10);
source/duke3d/src/sbar.cpp:189:        rotatesprite_fs(sbarx(x), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:190:        rotatesprite_fs(sbarx(x+4), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:191:        rotatesprite_fs(sbarx(x+8), sby, sbscale, 0, THREEBYFIVE+dabuf[2]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:195:        rotatesprite_fs(sbarx(x+4), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:196:        rotatesprite_fs(sbarx(x+8), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:198:    else rotatesprite_fs(sbarx(x+8), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:203:        rotatesprite_fs(sbarx(x+17), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:204:        rotatesprite_fs(sbarx(x+21), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:205:        rotatesprite_fs(sbarx(x+25), sby, sbscale, 0, THREEBYFIVE+dabuf[2]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:209:        rotatesprite_fs(sbarx(x+17), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:210:        rotatesprite_fs(sbarx(x+21), sby, sbscale, 0, THREEBYFIVE+dabuf[1]-'0', ha, 0, 10);
source/duke3d/src/sbar.cpp:214:        rotatesprite_fs(sbarx(x+25), sby, sbscale, 0, THREEBYFIVE+dabuf[0]-'0', ha, 0, 10);
Usages for: BIGAPPOS
source/duke3d/src/text.cpp:81:        { '`', BIGAPPOS, },
source/duke3d/src/text.cpp:82:        { '\"', BIGAPPOS, },
source/duke3d/src/text.cpp:83:        { '\'', BIGAPPOS, },
source/duke3d/src/text.cpp:142:            return font + (BIGAPPOS - (BIGALPHANUM + offset));
Usages for: BLANK
Usages for: MINIFONT
source/duke3d/src/menus.cpp:1783:    if ((unsigned)MF_Minifont.tilenum >= MAXTILES) MF_Minifont.tilenum = MINIFONT;
source/duke3d/src/premap.cpp:226:    for (int i = MINIFONT; i < MINIFONT+93; i++)
source/duke3d/src/text.cpp:41:    for (int i = MINIFONT + ('a'-'!'); minitext_lowercase && i < MINIFONT + ('z'-'!') + 1; ++i)
source/duke3d/src/text.cpp:92:    TileFontPtr_t tilefont_MINIFONT = tilefontGetPtr(MINIFONT);
source/duke3d/src/text.cpp:98:        tilefontMaybeDefineMapping(tilefont_MINIFONT, chr32, MINIFONT + i);
Usages for: BUTTON1
Usages for: GLASS3
Usages for: RESPAWNMARKERRED
source/duke3d/src/actors.cpp:5250:                        A_Spawn(spriteNum,RESPAWNMARKERRED);
source/duke3d/src/actors.cpp:5298:                            A_Spawn(spriteNum, RESPAWNMARKERRED);
Usages for: RESPAWNMARKERYELLOW
source/duke3d/src/actors.cpp:4250:                PN(spriteNum) = RESPAWNMARKERYELLOW;
Usages for: RESPAWNMARKERGREEN
source/duke3d/src/actors.cpp:4252:                PN(spriteNum) = RESPAWNMARKERGREEN;
source/duke3d/src/game.cpp:4068:                    playerTyping->picnum  = RESPAWNMARKERGREEN;
Usages for: BONUSSCREEN
source/duke3d/src/menus.cpp:2524:        rotatesprite_fs(origin.x + (40<<16), origin.y + (32<<16), 16384, 0, BONUSSCREEN, 0, 0, 2|8|16);
source/duke3d/src/screens.cpp:2369:    rotatesprite_fs(160<<16, 100<<16, 65536L, 0, BONUSSCREEN+gfx_offset, 0, 0, 2+8+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:2398:                rotatesprite_fs(160<<16, 100<<16, 65536L, 0, BONUSSCREEN+gfx_offset, 0, 0, 2+8+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:2429:                        rotatesprite_fs(199<<16, 31<<16, 65536L, 0, BONUSSCREEN+3+gfx_offset, 0, 0, 2+8+16+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:2433:                        rotatesprite_fs(199<<16, 31<<16, 65536L, 0, BONUSSCREEN+4+gfx_offset, 0, 0, 2+8+16+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:2444:                        rotatesprite_fs(199<<16, 31<<16, 65536L, 0, BONUSSCREEN+1+gfx_offset, 0, 0, 2+8+16+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:2447:                        rotatesprite_fs(199<<16, 31<<16, 65536L, 0, BONUSSCREEN+2+gfx_offset, 0, 0, 2+8+16+64+128+BGSTRETCH);
Usages for: VIEWBORDER
source/duke3d/src/sbar.cpp:1113:            rotatesprite(x1<<16, y<<16, 65536L, 0, VIEWBORDER, 0, 0, 8+16+64, x1, y1, x2, y2); // left
source/duke3d/src/sbar.cpp:1115:            rotatesprite((x2+1)<<16, (y+64)<<16, 65536L, 1024, VIEWBORDER, 0, 0, 8+16+64, x1, y1, x2, y2); // right
source/duke3d/src/sbar.cpp:1122:            rotatesprite((x+64)<<16, y1<<16, 65536L, 512, VIEWBORDER, 0, 0, 8+16+64, x1, y1, x2, y2); // top
source/duke3d/src/sbar.cpp:1124:            rotatesprite(x<<16, (y2+1)<<16, 65536L, 1536, VIEWBORDER, 0, 0, 8+16+64, x1, y1, x2, y2); // bottom
source/duke3d/src/sbar.cpp:1128:        rotatesprite(x1<<16, y1<<16, 65536L, 0, VIEWBORDER+1, 0, 0, 8+16+64, x1, y1, x2, y2); // top left
source/duke3d/src/sbar.cpp:1130:        rotatesprite((x2+1)<<16, y1<<16, 65536L, 512, VIEWBORDER+1, 0, 0, 8+16+64, x1, y1, x2, y2); // top right
source/duke3d/src/sbar.cpp:1132:        rotatesprite((x2+1)<<16, (y2+1)<<16, 65536L, 1024, VIEWBORDER+1, 0, 0, 8+16+64, x1, y1, x2, y2); // bottom right
source/duke3d/src/sbar.cpp:1134:        rotatesprite(x1<<16, (y2+1)<<16, 65536L, 1536, VIEWBORDER+1, 0, 0, 8+16+64, x1, y1, x2, y2); // bottom left
Usages for: VICTORY1
source/duke3d/src/screens.cpp:1815:                0, 120, VICTORY1+3, 86, 59,
source/duke3d/src/screens.cpp:1816:                220, 260, VICTORY1+4, 86, 59,
source/duke3d/src/screens.cpp:1817:                260, 290, VICTORY1+5, 86, 59,
source/duke3d/src/screens.cpp:1818:                290, 320, VICTORY1+6, 86, 59,
source/duke3d/src/screens.cpp:1819:                320, 350, VICTORY1+7, 86, 59,
source/duke3d/src/screens.cpp:1820:                350, 380, VICTORY1+8, 86, 59,
source/duke3d/src/screens.cpp:1821:                350, 380, VICTORY1+8, 86, 59 // duplicate row to alleviate overflow in the for loop below "boss"
source/duke3d/src/screens.cpp:1826:            rotatesprite_fs(0, 50<<16, 65536L, 0, VICTORY1, 0, 0, 2+8+16+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:1838:                    rotatesprite_fs(0, 50<<16, 65536L, 0, VICTORY1, 0, 0, 2+8+16+64+128+BGSTRETCH);
source/duke3d/src/screens.cpp:1858:                            0,  30, VICTORY1+1, 176, 59,
source/duke3d/src/screens.cpp:1859:                            30,  60, VICTORY1+2, 176, 59,
source/duke3d/src/screens.cpp:1860:                            60,  90, VICTORY1+1, 176, 59,
source/duke3d/src/screens.cpp:1866:                            rotatesprite_fs(86<<16, 59<<16, 65536L, 0, VICTORY1+8, 0, 0, 2+8+16+64+128+BGSTRETCH);
Usages for: ORDERING
source/duke3d/src/screens.cpp:1789:        rotatesprite_fs(160<<16, 100<<16, 65536L, 0, ORDERING+i, 0, 0, 2+8+64+BGSTRETCH);
Usages for: TEXTSTORY
source/duke3d/src/menus.cpp:2464:        rotatesprite_fs(origin.x + (MENU_MARGIN_CENTER<<16), origin.y + (100<<16), 65536L,0,TEXTSTORY,0,0,10+64);
source/duke3d/src/screens.cpp:1001:            rotatesprite_fs(160<<16, 100<<16, 65536L, 0, TEXTSTORY, 0, 0, 10+64);
Usages for: LOADSCREEN
source/duke3d/src/game.cpp:6178:    picanm[LOADSCREEN].sf |= PICANM_NOFULLBRIGHT_BIT;
source/duke3d/src/game.cpp:6816:        rotatesprite_fs(160<<16,100<<16,65536L,0,LOADSCREEN,0,0,2+8+64+BGSTRETCH);
source/duke3d/src/menus.cpp:2527:        rotatesprite_fs(origin.x + (200<<16), origin.y + (32<<16), 16384, 0, LOADSCREEN, 0, 0, 2|8|16);
source/duke3d/src/premap.cpp:352:    int const loadScreenTile = VM_OnEventWithReturn(EVENT_GETLOADTILE, g_player[screenpeek].ps->i, screenpeek, LOADSCREEN);
source/duke3d/src/sbar.cpp:1036:        const int32_t MENUTILE = MENUSCREEN;//(videoGetRenderMode() == REND_CLASSIC ? MENUSCREEN : LOADSCREEN);
Usages for: BORNTOBEWILDSCREEN
Usages for: BLIMP
source/duke3d/src/game.cpp:4187:            if (actor[i].picnum == BLIMP && t->picnum == SCRAP1 && pSprite->yvel >= 0)
source/duke3d/src/gameexec.cpp:4918:                                int const tileOffset = (vm.pSprite->picnum == BLIMP && debrisTile == SCRAP1) ? 0 : (krand() % 3);
source/duke3d/src/gameexec.cpp:4925:                                sprite[spriteNum].yvel = (vm.pSprite->picnum == BLIMP && debrisTile == SCRAP1) ? g_blimpSpawnItems[cnt % 14] : -1;
Usages for: FEM9
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: FOOTPRINT
Usages for: FRAMEEFFECT1_13
source/duke3d/src/actors.cpp:5076:            int const j        = A_Spawn(spriteNum, (PLUTOPAK ? FRAMEEFFECT1 : FRAMEEFFECT1_13));
Usages for: POOP
source/duke3d/src/actors.cpp:8645:                        goto POOP;
source/duke3d/src/actors.cpp:8650:                POOP:
Usages for: FRAMEEFFECT1
source/duke3d/src/actors.cpp:5076:            int const j        = A_Spawn(spriteNum, (PLUTOPAK ? FRAMEEFFECT1 : FRAMEEFFECT1_13));
Usages for: PANNEL3
Usages for: SCREENBREAK14
Usages for: SCREENBREAK15
Usages for: SCREENBREAK19
Usages for: SCREENBREAK16
Usages for: SCREENBREAK17
Usages for: SCREENBREAK18
Usages for: W_TECHWALL11
Usages for: W_TECHWALL12
Usages for: W_TECHWALL13
Usages for: W_TECHWALL14
Usages for: W_TECHWALL5
Usages for: W_TECHWALL6
Usages for: W_TECHWALL7
Usages for: W_TECHWALL8
Usages for: W_TECHWALL9
Usages for: BPANNEL3
source/duke3d/src/sector.cpp:2239:        PN(spriteNum) = BPANNEL3;
Usages for: W_HITTECHWALL16
source/duke3d/src/sector.cpp:1741:            G_BreakWall(W_HITTECHWALL16, spriteNum, wallNum);
Usages for: W_HITTECHWALL10
source/duke3d/src/sector.cpp:1725:            G_BreakWall(W_HITTECHWALL10, spriteNum, wallNum);
Usages for: W_HITTECHWALL15
source/duke3d/src/sector.cpp:1737:            G_BreakWall(W_HITTECHWALL15, spriteNum, wallNum);
Usages for: W_MILKSHELF
Usages for: W_MILKSHELFBROKE
source/duke3d/src/sector.cpp:1721:            G_BreakWall(W_MILKSHELFBROKE, spriteNum, wallNum);
Usages for: PURPLELAVA
source/duke3d/src/player.cpp:5396:        if (!FURY && (floorPicnum == PURPLELAVA || sector[pSprite->sectnum].ceilingpicnum == PURPLELAVA))
Usages for: LAVABUBBLE
Usages for: DUKECUTOUT
Usages for: TARGET
source/duke3d/src/game.cpp:1464:            && s.picnum != SPEAKER && s.picnum != LETTER && s.picnum != DUCK && s.picnum != TARGET && s.picnum != TRIPBOMB
source/duke3d/src/astub.cpp:479:        case TARGET: case DUCK:
Usages for: GUNPOWDERBARREL
Usages for: DUCK
source/duke3d/src/game.cpp:1464:            && s.picnum != SPEAKER && s.picnum != LETTER && s.picnum != DUCK && s.picnum != TARGET && s.picnum != TRIPBOMB
source/duke3d/src/astub.cpp:479:        case TARGET: case DUCK:
Usages for: HATRACK
Usages for: DESKLAMP
Usages for: COFFEEMACHINE
Usages for: CUPS
Usages for: GAVALS
Usages for: GAVALS2
Usages for: POLICELIGHTPOLE
Usages for: FLOORBASKET
Usages for: PUKE
source/duke3d/src/actors.cpp:5883:                    if (pSprite->pal == 0 && pSprite->picnum != PUKE && (krand()&255) < 16)
source/duke3d/src/game.cpp:2445:            if (spriteNum >= 0 && pSprite->picnum != PUKE)
Usages for: DOORTILE23
source/duke3d/src/astub.cpp:528:        case DOORTILE17: case DOORTILE11: case DOORTILE12: case DOORTILE23:  // ---
Usages for: TOPSECRET
Usages for: SPEAKER
source/duke3d/src/game.cpp:1464:            && s.picnum != SPEAKER && s.picnum != LETTER && s.picnum != DUCK && s.picnum != TARGET && s.picnum != TRIPBOMB
Usages for: TEDDYBEAR
Usages for: ROBOTDOG
Usages for: ROBOTPIRATE
Usages for: ROBOTMOUSE
Usages for: MAIL
source/duke3d/src/actors.cpp:5490:        if ((pSprite->picnum == MONEY+1) || (pSprite->picnum == MAIL+1) || (pSprite->picnum == PAPER+1))
source/duke3d/src/game.cpp:3863:        else if ((pSprite->picnum==MONEY+1) || (pSprite->picnum==MAIL+1) || (pSprite->picnum==PAPER+1))
source/duke3d/src/game.cpp:3884:            //case MAIL+1__STATIC:
source/duke3d/src/gameexec.cpp:3348:                A_SpawnMultiple(vm.spriteNum, MAIL, *insptr++);
Usages for: MAILBAG
Usages for: HOTMEAT
source/duke3d/src/game.cpp:4302:            if (t->statnum != TSPR_TEMP && pSprite->picnum != EXPLOSION2 && pSprite->picnum != HANGLIGHT && pSprite->picnum != DOMELITE && pSprite->picnum != HOTMEAT)
Usages for: COFFEEMUG
Usages for: DONUTS2
Usages for: TRIPODCAMERA
Usages for: METER
Usages for: DESKPHONE
Usages for: GUMBALLMACHINE
Usages for: GUMBALLMACHINEBROKE
Usages for: PAPER
source/duke3d/src/actors.cpp:5490:        if ((pSprite->picnum == MONEY+1) || (pSprite->picnum == MAIL+1) || (pSprite->picnum == PAPER+1))
source/duke3d/src/game.cpp:3863:        else if ((pSprite->picnum==MONEY+1) || (pSprite->picnum==MAIL+1) || (pSprite->picnum==PAPER+1))
source/duke3d/src/game.cpp:3886:            //case PAPER+1__STATIC:
source/duke3d/src/gameexec.cpp:3358:                A_SpawnMultiple(vm.spriteNum, PAPER, *insptr++);
Usages for: MACE
Usages for: GENERICPOLE2
Usages for: XXXSTACY
Usages for: WETFLOOR
Usages for: BROOM
Usages for: MOP
Usages for: LETTER
source/duke3d/src/game.cpp:1464:            && s.picnum != SPEAKER && s.picnum != LETTER && s.picnum != DUCK && s.picnum != TARGET && s.picnum != TRIPBOMB
Usages for: PIRATE1A
Usages for: PIRATE4A
Usages for: PIRATE2A
Usages for: PIRATE5A
Usages for: PIRATE3A
Usages for: PIRATE6A
Usages for: PIRATEHALF
Usages for: CHESTOFGOLD
Usages for: SIDEBOLT1
source/duke3d/src/actors.cpp:2472:                if (switchPic > SIDEBOLT1 && switchPic <= SIDEBOLT1 + 3)
source/duke3d/src/actors.cpp:2473:                    switchPic = SIDEBOLT1;
source/duke3d/src/actors.cpp:2611:                    //        case SIDEBOLT1+1:
source/duke3d/src/actors.cpp:2612:                    //        case SIDEBOLT1+2:
source/duke3d/src/actors.cpp:2613:                    //        case SIDEBOLT1+3:
source/duke3d/src/actors.cpp:2643:                    // SIDEBOLT1 never gets translucent as a consequence, unlike BOLT1.
source/duke3d/src/actors.cpp:2651:                    if (pSprite->picnum == SIDEBOLT1 + 4)
source/duke3d/src/actors.cpp:2652:                        pSprite->picnum = SIDEBOLT1;
source/duke3d/src/actors.cpp:7811:                            || sprite[sectSprite].picnum == SIDEBOLT1
source/duke3d/src/actors.cpp:7812:                            || sprite[sectSprite].picnum == SIDEBOLT1 + 1
source/duke3d/src/actors.cpp:7813:                            || sprite[sectSprite].picnum == SIDEBOLT1 + 2
source/duke3d/src/actors.cpp:7814:                            || sprite[sectSprite].picnum == SIDEBOLT1 + 3
source/duke3d/src/game.cpp:1526:    else if (pSprite->picnum >= SIDEBOLT1 && pSprite->picnum <= SIDEBOLT1 + 3)
source/duke3d/src/game.cpp:1527:        pSprite->picnum = SIDEBOLT1;
Usages for: FOODOBJECT1
Usages for: FOODOBJECT2
Usages for: FOODOBJECT3
Usages for: FOODOBJECT4
Usages for: FOODOBJECT5
Usages for: FOODOBJECT6
Usages for: FOODOBJECT7
Usages for: FOODOBJECT8
Usages for: FOODOBJECT9
Usages for: FOODOBJECT10
Usages for: FOODOBJECT11
Usages for: FOODOBJECT12
Usages for: FOODOBJECT13
Usages for: FOODOBJECT14
Usages for: FOODOBJECT15
Usages for: FOODOBJECT16
Usages for: FOODOBJECT17
Usages for: FOODOBJECT18
Usages for: FOODOBJECT19
Usages for: FOODOBJECT20
Usages for: HEADLAMP
Usages for: TAMPON
Usages for: SKINNEDCHICKEN
Usages for: FEATHEREDCHICKEN
Usages for: ROBOTDOG2
Usages for: JOLLYMEAL
Usages for: DUKEBURGER
Usages for: SHOPPINGCART
Usages for: CANWITHSOMETHING2
Usages for: CANWITHSOMETHING3
Usages for: CANWITHSOMETHING4
Usages for: SNAKEP
Usages for: DOLPHIN1
Usages for: DOLPHIN2
Usages for: NEWBEAST
source/duke3d/src/player.cpp:1149:                        if (PN(spriteNum) == OOZFILTER || PN(spriteNum) == NEWBEAST)
source/duke3d/src/game.cpp:6020:    int GreenSlimeFoodEnemies[] = { LIZTROOP, LIZMAN, PIGCOP, NEWBEAST };
source/duke3d/src/astub.cpp:1193:            case BOSS2: case BOSS3: case TANK: case NEWBEAST: case NEWBEASTSTAYPUT: case BOSS4:
source/duke3d/src/astub.cpp:1237:        PRSTAT("Newbeast  =", NEWBEAST);
source/duke3d/src/astub.cpp:10283:            case NEWBEAST:
source/duke3d/src/astub.cpp:10509:        case NEWBEAST:
Usages for: NEWBEASTSTAYPUT
source/duke3d/src/astub.cpp:1193:            case BOSS2: case BOSS3: case TANK: case NEWBEAST: case NEWBEASTSTAYPUT: case BOSS4:
source/duke3d/src/astub.cpp:10305:            case NEWBEASTSTAYPUT :
source/duke3d/src/astub.cpp:10531:        case NEWBEASTSTAYPUT :
Usages for: NEWBEASTJUMP
Usages for: NEWBEASTHANG
Usages for: NEWBEASTHANGDEAD
Usages for: BOSS4
source/duke3d/src/game.cpp:2037:                pSprite->picnum == BOSS1STAYPUT || pSprite->picnum == BOSS3 || pSprite->picnum == BOSS4 ||
source/duke3d/src/game.cpp:6016:        BOSS1, BOSS2, BOSS3, BOSS4, RAT, ROTATEGUN };
source/duke3d/src/game.cpp:6018:    int SolidEnemies[] = { TANK, BOSS1, BOSS2, BOSS3, BOSS4, RECON, ROTATEGUN };
source/duke3d/src/astub.cpp:1193:            case BOSS2: case BOSS3: case TANK: case NEWBEAST: case NEWBEASTSTAYPUT: case BOSS4:
source/duke3d/src/astub.cpp:1238:        PRSTAT("Boss4     =", BOSS4);
source/duke3d/src/astub.cpp:10282:            case BOSS4 :
source/duke3d/src/astub.cpp:10508:        case BOSS4 :
Usages for: BOSS4STAYPUT
source/duke3d/src/game.cpp:2036:            if (pSprite->picnum == BOSS4STAYPUT || pSprite->picnum == BOSS1 || pSprite->picnum == BOSS2 ||
source/duke3d/src/game.cpp:6044:        SETFLAG(BOSS4STAYPUT, SFLAG_NODAMAGEPUSH|SFLAG_HARDCODED_BADGUY);
Usages for: FEM10
source/duke3d/src/astub.cpp:489:        case FEM7: case FEM8: case FEM9: case FEM10: case PODFEM1: case NAKED1: //case STATUE: //?
Usages for: TOUGHGAL
Usages for: MAN
Usages for: MAN2
Usages for: WOMAN
Usages for: PLEASEWAIT
Usages for: NATURALLIGHTNING
source/duke3d/src/actors.cpp:8140:                        if (sprite[j].picnum == NATURALLIGHTNING && sprite[j].hitag == pSprite->hitag)
source/duke3d/src/actors.cpp:8159:                        if (sprite[j].picnum == NATURALLIGHTNING && sprite[j].hitag == pSprite->hitag)
source/duke3d/src/game.cpp:3826:        if (pSprite->picnum == NATURALLIGHTNING)
source/duke3d/src/astub.cpp:492:        case NATURALLIGHTNING:
Usages for: WEATHERWARN
Usages for: DUKETAG
Usages for: SIGN1
Usages for: SIGN2
Usages for: JURYGUY
Usages for: RESERVEDSLOT1
Usages for: RESERVEDSLOT2
Usages for: RESERVEDSLOT3
Usages for: RESERVEDSLOT4
Usages for: RESERVEDSLOT5
Usages for: RESERVEDSLOT6
Usages for: RESERVEDSLOT7
Usages for: RESERVEDSLOT8
Usages for: RESERVEDSLOT9
Usages for: RESERVEDSLOT10
Usages for: RESERVEDSLOT11
Usages for: RESERVEDSLOT12
